<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sh2zqp</title>
  <subtitle>Keep Learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-29T04:46:58.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>QinPeng Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android Version &amp; API Level</title>
    <link href="http://yoursite.com/2017/07/29/Android%20Version%20&amp;%20API%20Level/"/>
    <id>http://yoursite.com/2017/07/29/Android Version &amp; API Level/</id>
    <published>2017-07-29T03:24:34.000Z</published>
    <updated>2017-07-29T04:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Android目前为止所有发布的版本以及对应的API等级</strong></p>
<h2 id="Android-SDK版本"><a href="#Android-SDK版本" class="headerlink" title="Android SDK版本"></a>Android SDK版本</h2><h3 id="两个预发布的内部版本"><a href="#两个预发布的内部版本" class="headerlink" title="两个预发布的内部版本"></a>两个预发布的内部版本</h3><hr>
<h2 id="gt-Android-alpha-Astro·原子小金刚"><a href="#gt-Android-alpha-Astro·原子小金刚" class="headerlink" title="&gt; Android alpha (Astro·原子小金刚)"></a>&gt; Android alpha (Astro·原子小金刚)</h2><blockquote>
<p>Android beta   (Bender·机器人班亭) </p>
<h2 id="2007-11-05"><a href="#2007-11-05" class="headerlink" title="@2007.11.05"></a><em>@2007.11.05</em></h2><h3 id="初期过渡版本"><a href="#初期过渡版本" class="headerlink" title="初期过渡版本"></a>初期过渡版本</h3><hr>
<p>Android 1.0<br><strong>[API 1]</strong> </p>
<h2 id="2008-09-23"><a href="#2008-09-23" class="headerlink" title="@2008.09.23"></a><em>@2008.09.23</em></h2><p>Android 1.1<br><strong> [API 2]</strong> </p>
<h2 id="2009-02-09"><a href="#2009-02-09" class="headerlink" title="@2009.02.09"></a><em>@2009.02.09</em></h2><h3 id="甜点版本代号"><a href="#甜点版本代号" class="headerlink" title="甜点版本代号"></a>甜点版本代号</h3><hr>
<p>Android 1.5 (Cupcake·纸杯蛋糕)<br><strong> [API 3]</strong></p>
<h2 id="2009-04-27"><a href="#2009-04-27" class="headerlink" title="@2009.04.27"></a><em>@2009.04.27</em></h2><p>Android 1.6 (Donut·甜甜圈)<br><strong> [API 4]</strong></p>
<h2 id="2009-09-15"><a href="#2009-09-15" class="headerlink" title="@2009.09.15"></a><em>@2009.09.15</em></h2><p>Android 2.0 (Eclair· 泡芙)<br><strong>[API 5]</strong></p>
<h2 id="2009-10-26"><a href="#2009-10-26" class="headerlink" title="@2009.10.26"></a><em>@2009.10.26</em></h2><p>Android 2.0.1 (Eclair· 泡芙)<br><strong>[API 6]</strong></p>
<h2 id="2009-12-03"><a href="#2009-12-03" class="headerlink" title="@2009.12.03"></a><em>@2009.12.03</em></h2><p>Android 2.1 (Eclair· 泡芙)<br><strong>[API 7]</strong></p>
<h2 id="2010-01-12"><a href="#2010-01-12" class="headerlink" title="@2010.01.12"></a><em>@2010.01.12</em></h2><p>Android 2.2/2.2.1/2.2.2/2.2.3 (Froyo·冻酸奶)<br><strong> [API 8]</strong></p>
<h2 id="2010-05-20-2011-01-18-2011-01-22-2011-11-21"><a href="#2010-05-20-2011-01-18-2011-01-22-2011-11-21" class="headerlink" title="@2010.05.20/2011.01.18/2011.01.22/2011.11.21"></a><em>@2010.05.20/2011.01.18/2011.01.22/2011.11.21</em></h2><p>Android 2.3/2.3.1/2.3.2 (Gingerbread·姜饼)<br><strong> [API 9]</strong></p>
<h2 id="2010-12-06-2010-12-15-2011-01-09"><a href="#2010-12-06-2010-12-15-2011-01-09" class="headerlink" title="@2010.12.06/2010.12.15/2011.01.09"></a><em>@2010.12.06/2010.12.15/2011.01.09</em></h2><p>Android 2.3.3/2.3.4/2.3.5/2.3.6/2.3.7 (Gingerbread·姜饼)<br><strong> [API 10]</strong></p>
<h2 id="2011-02-09-2011-04-28-2011-07-25-2011-09-02-2011-09-21"><a href="#2011-02-09-2011-04-28-2011-07-25-2011-09-02-2011-09-21" class="headerlink" title="@2011.02.09/2011.04.28/2011.07.25/2011.09.02/2011.09.21"></a><em>@2011.02.09/2011.04.28/2011.07.25/2011.09.02/2011.09.21</em></h2><p>Android 3.0 (Honeycomb·蜂巢)<br><strong> [API 11]</strong></p>
<h2 id="2011-02-22"><a href="#2011-02-22" class="headerlink" title="@2011.02.22"></a><em>@2011.02.22</em></h2><p>Android 3.1 (Honeycomb·蜂巢)<br><strong> [API 12]</strong></p>
<h2 id="2011-05-10"><a href="#2011-05-10" class="headerlink" title="@2011.05.10"></a><em>@2011.05.10</em></h2><p>Android 3.2/3.2.1/3.2.2/3.2.3/3.2.4/3.2.5/3.2.6 (Honeycomb·蜂巢)<br><strong> [API 13]</strong></p>
<h2 id="2011-07-15-…-…-…-2011-12-04-2012-01-14-2012-02-22"><a href="#2011-07-15-…-…-…-2011-12-04-2012-01-14-2012-02-22" class="headerlink" title="@2011.07.15/…/…/…/2011.12.04/2012.01.14/2012.02.22"></a><em>@2011.07.15/…/…/…/2011.12.04/2012.01.14/2012.02.22</em></h2><p>Android 4.0/4.0.1/4.0.2 (Ice Cream Sandwich·冰淇淋三明治)<br><strong> [API 14]</strong></p>
<h2 id="2011-10-18-2011-10-21-2011-11-28"><a href="#2011-10-18-2011-10-21-2011-11-28" class="headerlink" title="@2011.10.18/2011.10.21/2011.11.28"></a><em>@2011.10.18/2011.10.21/2011.11.28</em></h2><p>Android 4.0.3/4.0.4 (Ice Cream Sandwich·冰淇淋三明治)<br><strong> [API 15]</strong></p>
<h2 id="2011-12-16-2012-03-29"><a href="#2011-12-16-2012-03-29" class="headerlink" title="@2011.12.16/2012.03.29"></a><em>@2011.12.16/2012.03.29</em></h2><p>Android 4.1/4.1.1/4.1.2 (Jelly Bean·果冻豆)<br><strong> [API 16]</strong></p>
<h2 id="2012-07-09-2012-07-11-2012-10-09"><a href="#2012-07-09-2012-07-11-2012-10-09" class="headerlink" title="@2012.07.09/2012.07.11/2012.10.09"></a><em>@2012.07.09/2012.07.11/2012.10.09</em></h2><p>Android 4.2/4.2.1/4.2.2 (Jelly Bean·果冻豆)<br><strong> [API 17]</strong></p>
<h2 id="2012-11-13-2012-11-27-2013-02-11"><a href="#2012-11-13-2012-11-27-2013-02-11" class="headerlink" title="@2012.11.13/2012.11.27/2013.02.11"></a><em>@2012.11.13/2012.11.27/2013.02.11</em></h2><p>Android 4.3/4.3.1 (Jelly Bean·果冻豆)<br><strong> [API 18]</strong></p>
<h2 id="2013-07-24-2013-10-03"><a href="#2013-07-24-2013-10-03" class="headerlink" title="@2013.07.24/2013.10.03"></a><em>@2013.07.24/2013.10.03</em></h2><p>Android 4.4/4.4.1/4.4.2/4.4.3/4.4.4 (KitKat·奇巧巧克力)<br><strong> [API 19]</strong></p>
<h2 id="2013-10-31-2013-12-05-2013-12-09-2014-06-02-2014-06-20"><a href="#2013-10-31-2013-12-05-2013-12-09-2014-06-02-2014-06-20" class="headerlink" title="@2013.10.31/2013.12.05/2013.12.09/2014.06.02/2014.06.20"></a><em>@2013.10.31/2013.12.05/2013.12.09/2014.06.02/2014.06.20</em></h2><p>Android 4.4W/4.4W.1/4.4W.2 (KitKat·奇巧巧克力)<br><strong> [API 20]</strong></p>
<h2 id="2014-06-25-2014-09-06-2014-10-21"><a href="#2014-06-25-2014-09-06-2014-10-21" class="headerlink" title="@2014.06.25/2014.09.06~2014.10.21"></a><em>@2014.06.25/2014.09.06~2014.10.21</em></h2><p>Android 5.0/5.0.1/5.0.2 (Lollipop·棒棒糖)<br><strong> [API 21]</strong></p>
<h2 id="2014-11-12-2014-12-02-2014-12-19"><a href="#2014-11-12-2014-12-02-2014-12-19" class="headerlink" title="@2014.11.12~2014.12.02/2014.12.19"></a><em>@2014.11.12~2014.12.02/2014.12.19</em></h2><p>Android 5.1/5.1.1 (Lollipop·棒棒糖)<br><strong> [API 22]</strong></p>
<h2 id="2015-03-10-2015-04-22"><a href="#2015-03-10-2015-04-22" class="headerlink" title="@2015.03.10/2015.04.22"></a><em>@2015.03.10/2015.04.22</em></h2><p>Android 6.0/6.0.1 (Marshmallow·棉花糖)<br><strong> [API 23]</strong></p>
<h2 id="2015-10-05-2015-12-07"><a href="#2015-10-05-2015-12-07" class="headerlink" title="@2015.10.05/2015.12.07"></a><em>@2015.10.05/2015.12.07</em></h2><p>Android 7.0 (Nougat·牛轧糖)<br><strong> [API 24]</strong></p>
<h2 id="2016-08-22"><a href="#2016-08-22" class="headerlink" title="_@2016.08.22"></a>_@2016.08.22</h2><p>Android 7.1.1/7.1.2 (Nougat·牛轧糖)<br><strong> [API 25]</strong></p>
<h2 id="2016-12-05-2017-04-04"><a href="#2016-12-05-2017-04-04" class="headerlink" title="@2016.12.05/2017.04.04"></a><em>@2016.12.05/2017.04.04</em></h2><p>Android 8.0  O(预览版)<br><strong> [API 26]</strong><br><em>@2017.03.21</em></p>
</blockquote>
<h2 id="Android-SDK版本用处"><a href="#Android-SDK版本用处" class="headerlink" title="Android SDK版本用处"></a>Android SDK版本用处</h2><h3 id="获取版本号"><a href="#获取版本号" class="headerlink" title="获取版本号"></a>获取版本号</h3><ul>
<li>为什么要获取版本号?</li>
</ul>
<blockquote>
<p>有时候发布的APP出现异常，我们捕获异常，需要将异常携带该设备的SDK版本号上传到服务器，方便开发者进行异常分析。</p>
</blockquote>
<ul>
<li><p>如何获取发布版本号以及API Level?</p>
<pre><code>/**
 * 获取Android发布的版本
 */
public static String getVersion() {
    return android.os.Build.VERSION.RELEASE;
}
/**
 * 获取SDK的API Level
 * @return
 */
public static int getSDK() {
    return android.os.Build.VERSION.SDK_INT;
}
</code></pre></li>
</ul>
<h3 id="根据版本号来适配"><a href="#根据版本号来适配" class="headerlink" title="根据版本号来适配"></a>根据版本号来适配</h3><ul>
<li><p>Android 6.0的权限系统</p>
<p>  protected boolean hasPermission(String permission) {</p>
<pre><code>    if (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.LOLLIPOP_MR1)
        return (checkSelfPermission(permission) == PackageManager.PERMISSION_GRANTED);
    return true;
}
</code></pre></li>
</ul>
<blockquote>
<p>判断是否有权限，如果版本大于5.1才需要判断（即6.0以上），其他则不需要判断。Build.VERSION.SDK_INT是指当前设备的API Level。</p>
</blockquote>
<ul>
<li><p>通知的部分属性</p>
<p>  if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) {    </p>
<pre><code>builder.setSubText(&quot;it is really basic&quot;);
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>通知的副标题需要API Level 16才能使用。</p>
<p>当然API Level也可以直接写成数字,不过不建议大家这样做，这里你可能记得16数字的含义，可是在其他地方使用数字你可能就不记得了，所以为了规范还是写VERSION_CODES吧，毕竟这样逼格也更高！</p>
</blockquote>
<pre><code>if (Build.VERSION.SDK_INT &gt;= 16) {    
    builder.setSubText(&quot;it is really basic&quot;);
}
</code></pre><p><strong>参考文献</strong></p>
<p><a href="https://zh.wikipedia.org/wiki/Android%E6%AD%B7%E5%8F%B2%E7%89%88%E6%9C%AC" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android%E6%AD%B7%E5%8F%B2%E7%89%88%E6%9C%AC</a><br><a href="http://www.cnblogs.com/kangjianwei101/p/5220035.html" target="_blank" rel="external">http://www.cnblogs.com/kangjianwei101/p/5220035.html</a><br><a href="http://www.jianshu.com/p/830d0eb44a56" target="_blank" rel="external">http://www.jianshu.com/p/830d0eb44a56</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Android目前为止所有发布的版本以及对应的API等级&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;Android-SDK版本&quot;&gt;&lt;a href=&quot;#Android-SDK版本&quot; class=&quot;headerlink&quot; title=&quot;Android SDK版本
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Android版本" scheme="http://yoursite.com/tags/Android%E7%89%88%E6%9C%AC/"/>
    
      <category term="API等级" scheme="http://yoursite.com/tags/API%E7%AD%89%E7%BA%A7/"/>
    
      <category term="SDK版本适配" scheme="http://yoursite.com/tags/SDK%E7%89%88%E6%9C%AC%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android开发人员不得不收集的代码(持续更新中)</title>
    <link href="http://yoursite.com/2017/07/29/Android%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%B8%8D%E5%BE%97%E4%B8%8D%E6%94%B6%E9%9B%86%E7%9A%84%E4%BB%A3%E7%A0%81(%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%E4%B8%AD)/"/>
    <id>http://yoursite.com/2017/07/29/Android开发人员不得不收集的代码(持续更新中)/</id>
    <published>2017-07-29T03:17:18.000Z</published>
    <updated>2017-07-29T03:21:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/Blankj/AndroidUtilCode/master/art/logo.png" alt=""></p>
<p><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="external"><img src="https://img.shields.io/badge/AndroidUtilCode-v1.7.1-brightgreen.svg" alt="auc"></a> <a href="https://android-arsenal.com/api?level=15" target="_blank" rel="external"><img src="https://img.shields.io/badge/API-15+-brightgreen.svg" alt="api"></a> <a href="https://travis-ci.org/Blankj/AndroidUtilCode" target="_blank" rel="external"><img src="https://travis-ci.org/Blankj/AndroidUtilCode.svg?branch=master" alt="build"></a> <a href="https://insight.io/github.com/Blankj/AndroidUtilCode" target="_blank" rel="external"><img src="https://www.insight.io/repoBadge/github.com/Blankj/AndroidUtilCode" alt="Insight"></a> <a href="https://github.com/Blankj/AndroidUtilCode/blob/master/LICENSE" target="_blank" rel="external"><img src="https://img.shields.io/badge/License-Apache--2.0-brightgreen.svg" alt="License"></a></p>
<p><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="external">README of English</a></p>
<p><strong>API</strong></p>
<ul>
<li><p>Activity相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ActivityUtils.java" target="_blank" rel="external">ActivityUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ActivityActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  isActivityExists   : 判断是否存在Activity<br>  startActivity      : 打开Activity<br>  getLauncherActivity: 获取入口activity<br>  getTopActivity     : 获取栈顶Activity</p>
</li>
<li><p>App相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/AppUtils.java" target="_blank" rel="external">AppUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/AppActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  isInstallApp         : 判断App是否安装<br>  installApp           : 安装App（支持7.0）<br>  installAppSilent     : 静默安装App<br>  uninstallApp         : 卸载App<br>  uninstallAppSilent   : 静默卸载App<br>  isAppRoot            : 判断App是否有root权限<br>  launchApp            : 打开App<br>  getAppPackageName    : 获取App包名<br>  getAppDetailsSettings: 获取App具体设置<br>  getAppName           : 获取App名称<br>  getAppIcon           : 获取App图标<br>  getAppPath           : 获取App路径<br>  getAppVersionName    : 获取App版本号<br>  getAppVersionCode    : 获取App版本码<br>  isSystemApp          : 判断App是否是系统应用<br>  isAppDebug           : 判断App是否是Debug版本<br>  getAppSignature      : 获取App签名<br>  getAppSignatureSHA1  : 获取应用签名的的SHA1值<br>  isAppForeground      : 判断App是否处于前台<br>  getForegroundApp     : 获取前台应用包名<br>  getAppInfo           : 获取App信息<br>  getAppsInfo          : 获取所有已安装App信息</p>
</li>
<li><p>栏相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/BarUtils.java" target="_blank" rel="external">BarUtils.java</a></p>
<p>  setTransparentStatusBar: 设置透明状态栏（api大于19方可使用）<br>  hideStatusBar          : 隐藏状态栏<br>  getStatusBarHeight     : 获取状态栏高度<br>  isStatusBarExists      : 判断状态栏是否存在<br>  getActionBarHeight     : 获取ActionBar高度<br>  showNotificationBar    : 显示通知栏<br>  hideNotificationBar    : 隐藏通知栏</p>
</li>
<li><p>缓存相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/CacheUtils.java" target="_blank" rel="external">CacheUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/CacheUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  getInstance    : 获取缓存实例<br>  put            : 缓存中写入数据<br>  getBytes       : 缓存中读取字节数组<br>  getString      : 缓存中读取String<br>  getJSONObject  : 缓存中读取JSONObject<br>  getJSONArray   : 缓存中读取JSONArray<br>  getBitmap      : 缓存中读取Bitmap<br>  getDrawable    : 缓存中读取Drawable<br>  getParcelable  : 缓存中读取Parcelable<br>  getSerializable: 缓存中读取Serializable<br>  getCacheSize   : 获取缓存大小<br>  getCacheCount  : 获取缓存个数<br>  remove         : 根据键值移除缓存<br>  clear          : 清除所有缓存</p>
</li>
<li><p>清除相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/CleanUtils.java" target="_blank" rel="external">CleanUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/CleanActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  cleanInternalCache   : 清除内部缓存<br>  cleanInternalFiles   : 清除内部文件<br>  cleanInternalDbs     : 清除内部数据库<br>  cleanInternalDbByName: 根据名称清除数据库<br>  cleanInternalSP      : 清除内部SP<br>  cleanExternalCache   : 清除外部缓存<br>  cleanCustomCache     : 清除自定义目录下的文件</p>
</li>
<li><p>剪贴板相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ClipboardUtils.java" target="_blank" rel="external">ClipboardUtils.java</a></p>
<p>  copyText  : 复制文本到剪贴板<br>  getText   : 获取剪贴板的文本<br>  copyUri   : 复制uri到剪贴板<br>  getUri    : 获取剪贴板的uri<br>  copyIntent: 复制意图到剪贴板<br>  getIntent : 获取剪贴板的意图</p>
</li>
<li><p>关闭相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/CloseUtils.java" target="_blank" rel="external">CloseUtils.java</a></p>
<p>  closeIO       : 关闭IO<br>  closeIOQuietly: 安静关闭IO</p>
</li>
<li><p>转换相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ConvertUtils.java" target="_blank" rel="external">ConvertUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/ConvertUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  bytes2HexString, hexString2Bytes        : byteArr与hexString互转<br>  chars2Bytes, bytes2Chars                : charArr与byteArr互转<br>  memorySize2Byte, byte2MemorySize        : 以unit为单位的内存大小与字节数互转<br>  byte2FitMemorySize                      : 字节数转合适内存大小<br>  timeSpan2Millis, millis2TimeSpan        : 以unit为单位的时间长度与毫秒时间戳互转<br>  millis2FitTimeSpan                      : 毫秒时间戳转合适时间长度<br>  bytes2Bits, bits2Bytes                  : bytes与bits互转<br>  input2OutputStream, output2InputStream  : inputStream与outputStream互转<br>  inputStream2Bytes, bytes2InputStream    : inputStream与byteArr互转<br>  outputStream2Bytes, bytes2OutputStream  : outputStream与byteArr互转<br>  inputStream2String, string2InputStream  : inputStream与string按编码互转<br>  outputStream2String, string2OutputStream: outputStream与string按编码互转<br>  bitmap2Bytes, bytes2Bitmap              : bitmap与byteArr互转<br>  drawable2Bitmap, bitmap2Drawable        : drawable与bitmap互转<br>  drawable2Bytes, bytes2Drawable          : drawable与byteArr互转<br>  view2Bitmap                             : view转Bitmap<br>  dp2px, px2dp                            : dp与px互转<br>  sp2px, px2sp                            : sp与px互转</p>
</li>
<li><p>崩溃相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/CrashUtils.java" target="_blank" rel="external">CrashUtils.java</a></p>
<p>  init: 初始化</p>
</li>
<li><p>设备相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/DeviceUtils.java" target="_blank" rel="external">DeviceUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/DeviceActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  isDeviceRooted   : 判断设备是否rooted<br>  getSDKVersion    : 获取设备系统版本号<br>  getAndroidID     : 获取设备AndroidID<br>  getMacAddress    : 获取设备MAC地址<br>  getManufacturer  : 获取设备厂商<br>  getModel         : 获取设备型号<br>  shutdown         : 关机<br>  reboot           : 重启<br>  reboot2Recovery  : 重启到recovery<br>  reboot2Bootloader: 重启到bootloader</p>
</li>
<li><p>判空相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/EmptyUtils.java" target="_blank" rel="external">EmptyUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/EmptyUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  isEmpty   : 判断对象是否为空<br>  isNotEmpty: 判断对象是否非空</p>
</li>
<li><p>编码解码相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/EncodeUtils.java" target="_blank" rel="external">EncodeUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/EncodeUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  urlEncode          : URL编码<br>  urlDecode          : URL解码<br>  base64Encode       : Base64编码<br>  base64Encode2String: Base64编码<br>  base64Decode       : Base64解码<br>  base64UrlSafeEncode: Base64URL安全编码<br>  htmlEncode         : Html编码<br>  htmlDecode         : Html解码</p>
</li>
<li><p>加密解密相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/EncryptUtils.java" target="_blank" rel="external">EncryptUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/EncryptUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  encryptMD2, encryptMD2ToString                        : MD2加密<br>  encryptMD5, encryptMD5ToString                        : MD5加密<br>  encryptMD5File, encryptMD5File2String                 : MD5加密文件<br>  encryptSHA1, encryptSHA1ToString                      : SHA1加密<br>  encryptSHA224, encryptSHA224ToString                  : SHA224加密<br>  encryptSHA256, encryptSHA256ToString                  : SHA256加密<br>  encryptSHA384, encryptSHA384ToString                  : SHA384加密<br>  encryptSHA512, encryptSHA512ToString                  : SHA512加密<br>  encryptHmacMD5, encryptHmacMD5ToString                : HmacMD5加密<br>  encryptHmacSHA1, encryptHmacSHA1ToString              : HmacSHA1加密<br>  encryptHmacSHA224, encryptHmacSHA224ToString          : HmacSHA224加密<br>  encryptHmacSHA256, encryptHmacSHA256ToString          : HmacSHA256加密<br>  encryptHmacSHA384, encryptHmacSHA384ToString          : HmacSHA384加密<br>  encryptHmacSHA512, encryptHmacSHA512ToString          : HmacSHA512加密<br>  encryptDES, encryptDES2HexString, encryptDES2Base64   : DES加密<br>  decryptDES, decryptHexStringDES, decryptBase64DES     : DES解密<br>  encrypt3DES, encrypt3DES2HexString, encrypt3DES2Base64: 3DES加密<br>  decrypt3DES, decryptHexString3DES, decryptBase64_3DES : 3DES解密<br>  encryptAES, encryptAES2HexString, encryptAES2Base64   : AES加密<br>  decryptAES, decryptHexStringAES, decryptBase64AES     : AES解密</p>
</li>
<li><p>文件相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/FileIOUtils.java" target="_blank" rel="external">FileIOUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/FileIOUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  writeFileFromIS            : 将输入流写入文件<br>  writeFileFromBytesByStream : 将字节数组写入文件<br>  writeFileFromBytesByChannel: 将字节数组写入文件<br>  writeFileFromBytesByMap    : 将字节数组写入文件<br>  writeFileFromString        : 将字符串写入文件<br>  readFile2List              : 读取文件到字符串链表中<br>  readFile2String            : 读取文件到字符串中<br>  readFile2BytesByStream     : 读取文件到字节数组中<br>  readFile2BytesByChannel    : 读取文件到字节数组中<br>  readFile2BytesByMap        : 读取文件到字节数组中<br>  setBufferSize              : 设置缓冲区尺寸</p>
</li>
<li><p>文件相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/FileUtils.java" target="_blank" rel="external">FileUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/FileUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  getFileByPath            : 根据文件路径获取文件<br>  isFileExists             : 判断文件是否存在<br>  rename                   : 重命名文件<br>  isDir                    : 判断是否是目录<br>  isFile                   : 判断是否是文件<br>  createOrExistsDir        : 判断目录是否存在，不存在则判断是否创建成功<br>  createOrExistsFile       : 判断文件是否存在，不存在则判断是否创建成功<br>  createFileByDeleteOldFile: 判断文件是否存在，存在则在创建之前删除<br>  copyDir                  : 复制目录<br>  copyFile                 : 复制文件<br>  moveDir                  : 移动目录<br>  moveFile                 : 移动文件<br>  deleteDir                : 删除目录<br>  deleteFile               : 删除文件<br>  listFilesInDir           : 获取目录下所有文件<br>  listFilesInDir           : 获取目录下所有文件包括子目录<br>  listFilesInDirWithFilter : 获取目录下所有后缀名为suffix的文件<br>  listFilesInDirWithFilter : 获取目录下所有后缀名为suffix的文件包括子目录<br>  listFilesInDirWithFilter : 获取目录下所有符合filter的文件<br>  listFilesInDirWithFilter : 获取目录下所有符合filter的文件包括子目录<br>  searchFileInDir          : 获取目录下指定文件名的文件包括子目录<br>  getFileLastModified      : 获取文件最后修改的毫秒时间戳<br>  getFileCharsetSimple     : 简单获取文件编码格式<br>  getFileLines             : 获取文件行数<br>  getDirSize               : 获取目录大小<br>  getFileSize              : 获取文件大小<br>  getDirLength             : 获取目录长度<br>  getFileLength            : 获取文件长度<br>  getFileMD5               : 获取文件的MD5校验码<br>  getFileMD5ToString       : 获取文件的MD5校验码<br>  getDirName               : 根据全路径获取最长目录<br>  getFileName              : 根据全路径获取文件名<br>  getFileNameNoExtension   : 根据全路径获取文件名不带拓展名<br>  getFileExtension         : 根据全路径获取文件拓展名</p>
</li>
<li><p>Fragment相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/FragmentUtils.java" target="_blank" rel="external">FragmentUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/FragmentActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  addFragment              : 新增fragment<br>  hideAddFragment          : 先隐藏后新增fragment<br>  addFragments             : 新增多个fragment<br>  removeFragment           : 移除fragment<br>  removeToFragment         : 移除到指定fragment<br>  removeFragments          : 移除同级别fragment<br>  removeAllFragments       : 移除所有fragment<br>  replaceFragment          : 替换fragment<br>  popFragment              : 出栈fragment<br>  popToFragment            : 出栈到指定fragment<br>  popFragments             : 出栈同级别fragment<br>  popAllFragments          : 出栈所有fragment<br>  popAddFragment           : 先出栈后新增fragment<br>  hideFragment             : 隐藏fragment<br>  hideFragments            : 隐藏同级别fragment<br>  showFragment             : 显示fragment<br>  hideShowFragment         : 先隐藏后显示fragment<br>  getLastAddFragment       : 获取同级别最后加入的fragment<br>  getLastAddFragmentInStack: 获取栈中同级别最后加入的fragment<br>  getTopShowFragment       : 获取顶层可见fragment<br>  getTopShowFragmentInStack: 获取栈中顶层可见fragment<br>  getFragments             : 获取同级别fragment<br>  getFragmentsInStack      : 获取栈中同级别fragment<br>  getAllFragments          : 获取所有fragment<br>  getAllFragmentsInStack   : 获取栈中所有fragment<br>  getPreFragment           : 获取目标fragment的前一个fragment<br>  findFragment             : 查找fragment<br>  dispatchBackPress        : 处理fragment回退键<br>  setBackgroundColor       : 设置背景色<br>  setBackgroundResource    : 设置背景资源<br>  setBackground            : 设置背景</p>
</li>
<li><p>图片相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ImageUtils.java" target="_blank" rel="external">ImageUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ImageActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  bitmap2Bytes, bytes2Bitmap      : bitmap与byteArr互转<br>  drawable2Bitmap, bitmap2Drawable: drawable与bitmap互转<br>  drawable2Bytes, bytes2Drawable  : drawable与byteArr互转<br>  getBitmap                       : 获取bitmap<br>  scale                           : 缩放图片<br>  clip                            : 裁剪图片<br>  skew                            : 倾斜图片<br>  rotate                          : 旋转图片<br>  getRotateDegree                 : 获取图片旋转角度<br>  toRound                         : 转为圆形图片<br>  toRoundCorner                   : 转为圆角图片<br>  fastBlur                        : 快速模糊<br>  renderScriptBlur                : renderScript模糊图片<br>  stackBlur                       : stack模糊图片<br>  addFrame                        : 添加颜色边框<br>  addReflection                   : 添加倒影<br>  addTextWatermark                : 添加文字水印<br>  addImageWatermark               : 添加图片水印<br>  toAlpha                         : 转为alpha位图<br>  toGray                          : 转为灰度图片<br>  save                            : 保存图片<br>  isImage                         : 根据文件名判断文件是否为图片<br>  getImageType                    : 获取图片类型<br>  compressByScale                 : 按缩放压缩<br>  compressByQuality               : 按质量压缩<br>  compressBySampleSize            : 按采样大小压缩</p>
</li>
<li><p>意图相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/IntentUtils.java" target="_blank" rel="external">IntentUtils.java</a></p>
<p>  getInstallAppIntent        : 获取安装App（支持6.0）的意图<br>  getUninstallAppIntent      : 获取卸载App的意图<br>  getLaunchAppIntent         : 获取打开App的意图<br>  getAppDetailsSettingsIntent: 获取App具体设置的意图<br>  getShareTextIntent         : 获取分享文本的意图<br>  getShareImageIntent        : 获取分享图片的意图<br>  getComponentIntent         : 获取其他应用组件的意图<br>  getShutdownIntent          : 获取关机的意图<br>  getCaptureIntent           : 获取拍照的意图</p>
</li>
<li><p>键盘相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/KeyboardUtils.java" target="_blank" rel="external">KeyboardUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/KeyboardActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  showSoftInput               : 动态显示软键盘<br>  hideSoftInput               : 动态隐藏软键盘<br>  toggleSoftInput             : 切换键盘显示与否状态<br>  clickBlankArea2HideSoftInput: 点击屏幕空白区域隐藏软键盘</p>
</li>
<li><p>定位相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/LocationUtils.java" target="_blank" rel="external">LocationUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/LocationActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  isGpsEnabled     : 判断Gps是否可用<br>  isLocationEnabled: 判断定位是否可用<br>  openGpsSettings  : 打开Gps设置界面<br>  register         : 注册<br>  unregister       : 注销<br>  getAddress       : 根据经纬度获取地理位置<br>  getCountryName   : 根据经纬度获取所在国家<br>  getLocality      : 根据经纬度获取所在地<br>  getStreet        : 根据经纬度获取所在街道<br>  isBetterLocation : 是否更好的位置<br>  isSameProvider   : 是否相同的提供者</p>
</li>
<li><p>日志相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/LogUtils.java" target="_blank" rel="external">LogUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/LogActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  Builder.setLogSwitch     : 设置log总开关<br>  Builder.setConsoleSwitch : 设置log控制台开关<br>  Builder.setGlobalTag     : 设置log全局tag<br>  Builder.setLogHeadSwitch : 设置log头部信息开关<br>  Builder.setLog2FileSwitch: 设置log文件开关<br>  Builder.setDir           : 设置log文件存储目录<br>  Builder.setBorderSwitch  : 设置log边框开关<br>  Builder.setConsoleFilter : 设置log控制台过滤器<br>  Builder.setFileFilter    : 设置log文件过滤器<br>  v                        : Verbose日志<br>  d                        : Debug日志<br>  i                        : Info日志<br>  w                        : Warn日志<br>  e                        : Error日志<br>  a                        : Assert日志<br>  file                     : log到文件<br>  json                     : log字符串之json<br>  xml                      : log字符串之xml</p>
</li>
<li><p>网络相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/NetworkUtils.java" target="_blank" rel="external">NetworkUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/NetworkActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  openWirelessSettings  : 打开网络设置界面<br>  isConnected           : 判断网络是否连接<br>  isAvailableByPing     : 判断网络是否可用<br>  getDataEnabled        : 判断移动数据是否打开<br>  setDataEnabled        : 打开或关闭移动数据<br>  is4G                  : 判断网络是否是4G<br>  getWifiEnabled        : 判断wifi是否打开<br>  setWifiEnabled        : 打开或关闭wifi<br>  isWifiConnected       : 判断wifi是否连接状态<br>  isWifiAvailable       : 判断wifi数据是否可用<br>  getNetworkOperatorName: 获取移动网络运营商名称<br>  getNetworkType        : 获取当前网络类型<br>  getIPAddress          : 获取IP地址<br>  getDomainAddress      : 获取域名ip地址</p>
</li>
<li><p>手机相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/PhoneUtils.java" target="_blank" rel="external">PhoneUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/PhoneActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  isPhone            : 判断设备是否是手机<br>  getIMEI            : 获取IMEI码<br>  getIMSI            : 获取IMSI码<br>  getPhoneType       : 获取移动终端类型<br>  isSimCardReady     : 判断sim卡是否准备好<br>  getSimOperatorName : 获取Sim卡运营商名称<br>  getSimOperatorByMnc: 获取Sim卡运营商名称<br>  getPhoneStatus     : 获取手机状态信息<br>  dial               : 跳至拨号界面<br>  call               : 拨打phoneNumber<br>  sendSms            : 跳至发送短信界面<br>  sendSmsSilent      : 发送短信<br>  getAllContactInfo  : 获取手机联系人<br>  getContactNum      : 打开手机联系人界面点击联系人后便获取该号码<br>  getAllSMS          : 获取手机短信并保存到xml中</p>
</li>
<li><p>拼音相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/PinyinUtils.java" target="_blank" rel="external">PinyinUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/PinyinUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  ccs2Pinyin           : 汉字转拼音<br>  ccs2Pinyin           : 汉字转拼音<br>  getPinyinFirstLetter : 获取第一个汉字首字母<br>  getPinyinFirstLetters: 获取所有汉字的首字母<br>  getSurnamePinyin     : 根据名字获取姓氏的拼音<br>  getSurnameFirstLetter: 根据名字获取姓氏的首字母</p>
</li>
<li><p>进程相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ProcessUtils.java" target="_blank" rel="external">ProcessUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ProcessActivity.java" target="_blank" rel="external">Demo</a> </p>
<p>  getForegroundProcessName  : 获取前台线程包名<br>  killAllBackgroundProcesses: 杀死所有的后台服务进程<br>  killBackgroundProcesses   : 杀死后台服务进程</p>
</li>
<li><p>正则相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/RegexUtils.java" target="_blank" rel="external">RegexUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/RegexUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  isMobileSimple : 验证手机号（简单）<br>  isMobileExact  : 验证手机号（精确）<br>  isTel          : 验证电话号码<br>  isIDCard15     : 验证身份证号码15位<br>  isIDCard18     : 验证身份证号码18位<br>  isEmail        : 验证邮箱<br>  isURL          : 验证URL<br>  isZh           : 验证汉字<br>  isUsername     : 验证用户名<br>  isDate         : 验证yyyy-MM-dd格式的日期校验，已考虑平闰年<br>  isIP           : 验证IP地址<br>  isMatch        : 判断是否匹配正则<br>  getMatches     : 获取正则匹配的部分<br>  getSplits      : 获取正则匹配分组<br>  getReplaceFirst: 替换正则匹配的第一部分<br>  getReplaceAll  : 替换所有正则匹配的部分</p>
</li>
<li><p>屏幕相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ScreenUtils.java" target="_blank" rel="external">ScreenUtils.java</a></p>
<p>  getScreenWidth         : 获取屏幕的宽度（单位：px）<br>  getScreenHeight        : 获取屏幕的高度（单位：px）<br>  setLandscape           : 设置屏幕为横屏<br>  setPortrait            : 设置屏幕为竖屏<br>  isLandscape            : 判断是否横屏<br>  isPortrait             : 判断是否竖屏<br>  getScreenRotation      : 获取屏幕旋转角度<br>  captureWithStatusBar   : 获取当前屏幕截图，包含状态栏<br>  captureWithoutStatusBar: 获取当前屏幕截图，不包含状态栏<br>  isScreenLock           : 判断是否锁屏</p>
</li>
<li><p>SD卡相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SDCardUtils.java" target="_blank" rel="external">SDCardUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/SDCardActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  isSDCardEnable: 判断SD卡是否可用<br>  getSDCardPath : 获取SD卡路径<br>  getDataPath   : 获取SD卡Data路径<br>  getFreeSpace  : 计算SD卡的剩余空间<br>  getSDCardInfo : 获取SD卡信息</p>
</li>
<li><p>服务相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ServiceUtils.java" target="_blank" rel="external">ServiceUtils.java</a></p>
<p>  getAllRunningService: 获取所有运行的服务<br>  startService        : 启动服务<br>  stopService         : 停止服务<br>  bindService         : 绑定服务<br>  unbindService       : 解绑服务<br>  isServiceRunning    : 判断服务是否运行</p>
</li>
<li><p>Shell相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ShellUtils.java" target="_blank" rel="external">ShellUtils.java</a></p>
<p>  execCmd: 是否是在root下执行命令</p>
</li>
<li><p>尺寸相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SizeUtils.java" target="_blank" rel="external">SizeUtils.java</a></p>
<p>  dp2px, px2dp     : dp与px转换<br>  sp2px, px2sp     : sp与px转换<br>  applyDimension   : 各种单位转换<br>  forceGetViewSize : 在onCreate中获取视图的尺寸<br>  measureView      : 测量视图尺寸<br>  getMeasuredWidth : 获取测量视图宽度<br>  getMeasuredHeight: 获取测量视图高度</p>
</li>
<li><p>Snackbar相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SnackbarUtils.java" target="_blank" rel="external">SnackbarUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/SnackbarActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  with           : 设置snackbar依赖view<br>  setMessage     : 设置消息<br>  setMessageColor: 设置消息颜色<br>  setBgColor     : 设置背景色<br>  setBgResource  : 设置背景资源<br>  setDuration    : 设置显示时长<br>  setAction      : 设置行为<br>  setBottomMargin: 设置底边距<br>  show           : 显示snackbar<br>  showSuccess    : 显示预设成功的snackbar<br>  showWarning    : 显示预设警告的snackbar<br>  showError      : 显示预设错误的snackbar<br>  dismiss        : 消失snackbar<br>  getView        : 获取snackbar视图<br>  addView        : 添加snackbar视图</p>
</li>
<li><p>SpannableString相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SpanUtils.java" target="_blank" rel="external">SpanUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/SpanActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  setFlag           : 设置标识<br>  setForegroundColor: 设置前景色<br>  setBackgroundColor: 设置背景色<br>  setLineHeight     : 设置行高<br>  setQuoteColor     : 设置引用线的颜色<br>  setLeadingMargin  : 设置缩进<br>  setBullet         : 设置列表标记<br>  setIconMargin     : 设置图标<br>  setFontSize       : 设置字体尺寸<br>  setFontProportion : 设置字体比例<br>  setFontXProportion: 设置字体横向比例<br>  setStrikethrough  : 设置删除线<br>  setUnderline      : 设置下划线<br>  setSuperscript    : 设置上标<br>  setSubscript      : 设置下标<br>  setBold           : 设置粗体<br>  setItalic         : 设置斜体<br>  setBoldItalic     : 设置粗斜体<br>  setFontFamily     : 设置字体系列<br>  setTypeface       : 设置字体<br>  setAlign          : 设置对齐<br>  setClickSpan      : 设置点击事件<br>  setUrl            : 设置超链接<br>  setBlur           : 设置模糊<br>  setShader         : 设置着色器<br>  setShadow         : 设置阴影<br>  setSpans          : 设置样式<br>  append            : 追加样式字符串<br>  appendLine        : 追加一行样式字符串<br>  appendImage       : 追加图片<br>  appendSpace       : 追加空白<br>  create            : 创建样式字符串</p>
</li>
<li><p>SP相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/SPUtils.java" target="_blank" rel="external">SPUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/SPUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  getInstance: 获取SP实例<br>  put        : SP中写入数据<br>  getString  : SP中读取String<br>  getInt     : SP中读取int<br>  getLong    : SP中读取long<br>  getFloat   : SP中读取float<br>  getBoolean : SP中读取boolean<br>  getAll     : SP中获取所有键值对<br>  contains   : SP中是否存在该key<br>  remove     : SP中移除该key<br>  clear      : SP中清除所有数据</p>
</li>
<li><p>字符串相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/StringUtils.java" target="_blank" rel="external">StringUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/StringUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  isEmpty         : 判断字符串是否为null或长度为0<br>  isTrimEmpty     : 判断字符串是否为null或全为空格<br>  isSpace         : 判断字符串是否为null或全为空白字符<br>  equals          : 判断两字符串是否相等<br>  equalsIgnoreCase: 判断两字符串忽略大小写是否相等<br>  null2Length0    : null转为长度为0的字符串<br>  length          : 返回字符串长度<br>  upperFirstLetter: 首字母大写<br>  lowerFirstLetter: 首字母小写<br>  reverse         : 反转字符串<br>  toDBC           : 转化为半角字符<br>  toSBC           : 转化为全角字符</p>
</li>
<li><p>线程池相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ThreadPoolUtils.java" target="_blank" rel="external">ThreadPoolUtils.java</a></p>
<p>  ThreadPoolUtils       : ThreadPoolUtils构造函数<br>  execute               : 在未来某个时间执行给定的命令<br>  execute               : 在未来某个时间执行给定的命令链表<br>  shutDown              : 待以前提交的任务执行完毕后关闭线程池<br>  shutDownNow           : 试图停止所有正在执行的活动任务<br>  isShutDown            : 判断线程池是否已关闭<br>  isTerminated          : 关闭线程池后判断所有任务是否都已完成<br>  awaitTermination      : 请求关闭、发生超时或者当前线程中断<br>  submit                : 提交一个Callable任务用于执行<br>  submit                : 提交一个Runnable任务用于执行<br>  invokeAll, invokeAny  : 执行给定的任务<br>  schedule              : 延迟执行Runnable命令<br>  schedule              : 延迟执行Callable命令<br>  scheduleWithFixedRate : 延迟并循环执行命令<br>  scheduleWithFixedDelay: 延迟并以固定休息时间循环执行命令</p>
</li>
<li><p>时间相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/TimeUtils.java" target="_blank" rel="external">TimeUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/TimeUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  millis2String           : 将时间戳转为时间字符串<br>  string2Millis           : 将时间字符串转为时间戳<br>  string2Date             : 将时间字符串转为Date类型<br>  date2String             : 将Date类型转为时间字符串<br>  date2Millis             : 将Date类型转为时间戳<br>  millis2Date             : 将时间戳转为Date类型<br>  getTimeSpan             : 获取两个时间差（单位：unit）<br>  getFitTimeSpan          : 获取合适型两个时间差<br>  getNowMills             : 获取当前毫秒时间戳<br>  getNowString            : 获取当前时间字符串<br>  getNowDate              : 获取当前Date<br>  getTimeSpanByNow        : 获取与当前时间的差（单位：unit）<br>  getFitTimeSpanByNow     : 获取合适型与当前时间的差<br>  getFriendlyTimeSpanByNow: 获取友好型与当前时间的差<br>  getMillis               : 获取与给定时间等于时间差的时间戳<br>  getString               : 获取与给定时间等于时间差的时间字符串<br>  getDate                 : 获取与给定时间等于时间差的Date<br>  getMillisByNow          : 获取与当前时间等于时间差的时间戳<br>  getStringByNow          : 获取与当前时间等于时间差的时间字符串<br>  getDateByNow            : 获取与当前时间等于时间差的Date<br>  isToday                 : 判断是否今天<br>  isLeapYear              : 判断是否闰年<br>  getChineseWeek          : 获取中式星期<br>  getUSWeek               : 获取美式式星期<br>  getWeekIndex            : 获取星期索引<br>  getWeekOfMonth          : 获取月份中的第几周<br>  getWeekOfYear           : 获取年份中的第几周<br>  getChineseZodiac        : 获取生肖<br>  getZodiac               : 获取星座</p>
</li>
<li><p>吐司相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ToastUtils.java" target="_blank" rel="external">ToastUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/app/src/main/java/com/blankj/androidutilcode/activity/ToastActivity.java" target="_blank" rel="external">Demo</a></p>
<p>  setGravity         : 设置吐司位置<br>  setView            : 设置吐司view<br>  getView            : 获取吐司view<br>  setBgColor         : 设置背景颜色<br>  setBgResource      : 设置背景资源<br>  setMessageColor    : 设置消息颜色<br>  showShortSafe      : 安全地显示短时吐司<br>  showLongSafe       : 安全地显示长时吐司<br>  showShort          : 显示短时吐司<br>  showLong           : 显示长时吐司<br>  showCustomShortSafe: 安全地显示短时自定义吐司<br>  showCustomLongSafe : 安全地显示长时自定义吐司<br>  showCustomShort    : 显示短时自定义吐司<br>  showCustomLong     : 显示长时自定义吐司<br>  cancel             : 取消吐司显示</p>
</li>
<li><p>压缩相关→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/main/java/com/blankj/utilcode/util/ZipUtils.java" target="_blank" rel="external">ZipUtils.java</a>→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/utilcode/src/test/java/com/blankj/utilcode/util/ZipUtilsTest.java" target="_blank" rel="external">Test</a></p>
<p>  zipFiles          : 批量压缩文件<br>  zipFile           : 压缩文件<br>  unzipFiles        : 批量解压文件<br>  unzipFile         : 解压文件<br>  unzipFileByKeyword: 解压带有关键字的文件<br>  getFilesPath      : 获取压缩文件中的文件路径链表<br>  getComments       : 获取压缩文件中的注释链表<br>  getEntries        : 获取压缩文件中的文件对象</p>
</li>
<li><p>更新Log→<a href="https://github.com/Blankj/AndroidUtilCode/blob/master/update_log.md" target="_blank" rel="external">update_log.md</a></p>
</li>
</ul>
<p><strong>About</strong></p>
<ul>
<li><a href="http://www.jianshu.com/u/46702d5c6978" target="_blank" rel="external"><img src="https://img.shields.io/badge/%E7%AE%80%E4%B9%A6-Blankj-34a48e.svg" alt="jianshu"></a> <a href="http://weibo.com/3076228982" target="_blank" rel="external"><img src="https://img.shields.io/badge/weibo-__Blankj-34a48e.svg" alt="weibo"></a>  <a href="http://blankj.com" target="_blank" rel="external"><img src="https://img.shields.io/badge/Blog-Blankj-34a48e.svg" alt="Blog"></a> <a href="https://shang.qq.com/wpa/qunwpa?idkey=62baf2c3ec6b0863155b0c7a10c71bba2608cb0b6532fc18515835e54c69bdd3" target="_blank" rel="external"><img src="https://img.shields.io/badge/QQ0%E7%BE%A4(%E6%BB%A1)-74721490-ff73a3.svg" alt="QQ0Group"></a> <a href="https://shang.qq.com/wpa/qunwpa?idkey=d906789f84484465e2736f7b524366b4c23afeda38733d5c7b10fc3f6e406e9b" target="_blank" rel="external"><img src="https://img.shields.io/badge/QQ1%E7%BE%A4-25206533-ff73a3.svg" alt="QQ1Group"></a></li>
<li>做这份整理是想把它作为Android开发的小字典，当遇到一些琐碎问题时，不用再面向百度或者谷歌查询API的使用，费时费力，这里有的话，大家尽管撸走；同时也希望它能逐日壮大起来，期待大家的Star和完善，当然我也会一直更新发布版本和日志，为了方便大家导入，现已上传jcenter；其中很多代码也是汇四方之精华，谢谢前辈们的提供，当然最终还是要通过单元测试的，如有错误，请及时告之。</li>
</ul>
<p><strong>Download</strong></p>
<p>Gradle:</p>
<pre><code>compile &apos;com.blankj:utilcode:1.7.1&apos;
</code></pre><p><strong>How to use</strong></p>
<pre><code>// init it in the function of onCreate in ur Application
Utils.init(context);
</code></pre><p><strong>Proguard</strong></p>
<pre><code>-keep class com.blankj.utilcode.** { *; }
-keepclassmembers class com.blankj.utilcode.** { *; }
-dontwarn com.blankj.utilcode.**
</code></pre><p><strong>Reference</strong></p>
<p><a href="http://www.jianshu.com/p/72494773aace" target="_blank" rel="external">http://www.jianshu.com/p/72494773aace</a><br><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="external">https://github.com/Blankj/AndroidUtilCode</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Blankj/AndroidUtilCode/master/art/logo.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Blankj
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="工具类" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="第三方库" scheme="http://yoursite.com/tags/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Java注解</title>
    <link href="http://yoursite.com/2017/04/28/Java%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/04/28/Java注解/</id>
    <published>2017-04-28T05:15:10.000Z</published>
    <updated>2017-04-29T03:32:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><h4 id="注解定义"><a href="#注解定义" class="headerlink" title="注解定义"></a>注解定义</h4><blockquote>
<p>注解(Annotation)在<strong>JDK1.5</strong>之后增加的一个新特性，注解的引入意义很大，有很多非常有名的框架，比如Hibernate、Spring等框架中都大量使用注解。注解作为<strong>程序的元数据</strong>嵌入到程序。注解可以被解析工具或编译工具解析，此处注意<strong>注解不同于注释(comment)</strong>。</p>
</blockquote>
<h4 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h4><blockquote>
<p>讲述Java Annotation的原理，以及如何自定义Java注解以及通过反射解析注解</p>
</blockquote>
<p><strong>为什么学习注解？</strong><br><strong>学习注解有什么好处？</strong><br><strong>学完之后能做什么？</strong></p>
<ul>
<li>可以读懂大牛们的代码，特别是和框架相关的代码（如：Spring，MyBatis）</li>
<li>让编程更加简洁，让代码更加清晰</li>
</ul>
<h3 id="注解的分类"><a href="#注解的分类" class="headerlink" title="注解的分类"></a>注解的分类</h3><h4 id="按运行机制分类"><a href="#按运行机制分类" class="headerlink" title="按运行机制分类"></a>按运行机制分类</h4><ul>
<li>源码注解: 注解只在源码.java文件中存在，编译成.class文件后就不存在了</li>
<li>编译时注解: 在源码.java文件和.class文件中都存在（如：@Override，@Deprecated，@Suppvisewarnnings）</li>
<li>运行时注解: 在运行阶段还会起作用，甚至会影响运行逻辑的注解（如：@Autowired等）</li>
</ul>
<blockquote>
<p>对于编译器处理的注解，可以使用APT处理。</p>
</blockquote>
<h4 id="按来源来分类"><a href="#按来源来分类" class="headerlink" title="按来源来分类"></a>按来源来分类</h4><ul>
<li>来自JDK的注解</li>
</ul>
<blockquote>
<p>Java 定义了一套注解，共有 7 个，3 个在 java.lang 包中，剩下 4 个在 java.lang.annotation包中</p>
</blockquote>
<p><strong>作用在代码的注解</strong></p>
<ul>
<li><p><em>@Override</em></p>
<pre><code>@Target(ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
public @interface Override {
}
</code></pre></li>
</ul>
<blockquote>
<p>用途：用于告知编译器，我们需要覆写超类的当前方法。如果某个方法带有该注解但并没有覆写超类相应的方法，则编译器会生成一条错误信息。</p>
<p>注解类型分析：@Override可适用元素为方法，仅仅保留在java源文件中。</p>
</blockquote>
<ul>
<li><p><em>@Deprecated</em></p>
<pre><code>@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})
public @interface Deprecated {
}
</code></pre></li>
</ul>
<blockquote>
<p>用途：用于告知编译器，某一程序元素(比如方法，成员变量)不建议使用时，如果使用该方法，会报编译警告，此时应该使用这个注解。Java在javadoc中推荐使用该注解，一般应该提供为什么该方法不推荐使用以及相应替代方法。</p>
<p>注解类型分析： @Deprecated可适合用于除注解类型声明之外的所有元素，保留时长为运行时VM。</p>
</blockquote>
<ul>
<li><p><em>@SuppressWarnings</em></p>
<pre><code>@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL\_VARIABLE})
@Retention(RetentionPolicy.SOURCE)
public @interface SuppressWarnings {
    String[] value();
}
</code></pre></li>
</ul>
<blockquote>
<p>用途：用于告知编译器忽略特定的警告信息，压制警告。例在泛型中使用原生数据类型。</p>
<p>注解类型分析： @SuppressWarnings可适合用于除注解类型声明和包名之外的所有元素，仅仅保留在java源文件中。</p>
<p>该注解有方法value(）,可支持多个字符串参数，例如：<br>    @SuppressWarnings({“uncheck”,”deprecation”})</p>
<p>前面讲的@Override，@Deprecated都是无需参数的，而@SuppressWarnings(压制警告)是需要带有参数的，可用参数如下：</p>
</blockquote>
<ul>
<li>deprecation: 使用了过时的类或方法时的警告</li>
<li>unchecked:执行了未检查的转换时的警告</li>
<li>fallthrough: 当Switch程序块进入进入下一个case而没有Break时的警告</li>
<li>path: 在类路径、源文件路径等有不存在路径时的警告</li>
<li>serial: 当可序列化的类缺少serialVersionUID定义时的警告</li>
<li>finally: 任意finally子句不能正常完成时的警告</li>
<li><p>all: 以上所有情况的警告</p>
<p>  <strong>三种注解的对比</strong></p>
<blockquote>
<p>Override—METHOD(Target)—SOURCE(Retention)<br>SuppressWarnings—除ANNOTATION_TYPE和PACKAGE外的所有(Target)—SOURCE(Retention)<br>Deprecated—除ANNOTATION_TYPE外的所有(Target)—RUNTIME(Retention)</p>
</blockquote>
</li>
</ul>
<p><strong>作用在其他注解的注解(元注解)</strong></p>
<blockquote>
<p>给注解进行注解的注解（注解的注解称为元注解）, 用来进行自定义注解。</p>
</blockquote>
<ul>
<li><p><em>@Retention </em></p>
<pre><code>@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION\_TYPE)
public @interface Retention {
   RetentionPolicy value();
}   
</code></pre></li>
</ul>
<blockquote>
<p>用途：定义自定义注解的生命周期（由RetentionPolicy封装），表示注解类型的存活时长。标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。</p>
<p>表示该注解类型的注解保留的时长。当注解类型声明中没有@Retention元注解，则默认保留策略为RetentionPolicy.CLASS。关于保留策略(RetentionPolicy)是枚举类型，共定义3种保留策略.</p>
</blockquote>
<pre><code>// 注解保留策略，用于Retention注解类型
public enum RetentionPolicy {
/**
 * Annotations are to be discarded by the compiler.
 */
SOURCE, // 只在Java源码显示，经过编译器后便丢弃相应的注解
/**
 * Annotations are to be recorded in the class file by the compiler
 * but need not be retained by the VM at run time.  This is the default
 * behavior.
 */
CLASS, // 存在Java源文件，以及经编译器后生成的Class字节码文件，但在运行时VM不再保留注释
/**
 * Annotations are to be recorded in the class file by the compiler and
 * retained by the VM at run time, so they may be read reflectively.
 * @see java.lang.reflect.AnnotatedElement
 */
RUNTIME // 存在源文件、编译生成的Class字节码文件，以及保留在运行时VM中，可通过反射性地读取注解
}
</code></pre><ul>
<li><p><em>@Target </em></p>
<pre><code>@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION\_TYPE)
public @interface Target {
    ElementType[] value();
}
</code></pre></li>
</ul>
<blockquote>
<p>用途：用来定义自定义注解的作用域（作用域由ElementType类封装），表示注解类型所适用的程序元素的种类，标记这个注解应该是哪种Java 成员。</p>
<p>表示该注解类型的所使用的程序元素类型。当注解类型声明中没有@Target元注解，则默认为可适用<strong>所有的程序元素</strong>。如果存在指定的@Target元注解，则编译器强制实施相应的使用限制。关于程序元素(ElementType)是枚举类型，共定义8种程序元素。</p>
</blockquote>
<pre><code>// 程序元素类型，用于Target注解类型
public enum ElementType {  
    /** Class, interface (including annotation type), or enum declaration */
    TYPE, //  类/接口声明
    /** Field declaration (includes enum constants) */
    FIELD, // 字段声明（包括枚举常量）
    /** Method declaration */
    METHOD, // 方法声明
    /** Formal parameter declaration */
    PARAMETER, // 参数声明
    /** Constructor declaration */
    CONSTRUCTOR, // 构造方法声明
    /** Local variable declaration */
    LOCAL_VARIABLE, // 局部变量声明
    /** Annotation type declaration */
    ANNOTATION_TYPE, // 注解类型声明
    /** Package declaration */
    PACKAGE, // 包声明
    /**
     * Type parameter declaration
     * @since 1.8
     */
    TYPE_PARAMETER,
    /**
     * Use of a type
     * @since 1.8
     */
    TYPE_USE
}
</code></pre><blockquote>
<p>上面源码@Target的定义中有一行@Target(ElementType.ANNOTATION_TYPE)，意思是指当前注解的元素类型是注解类型。</p>
</blockquote>
<ul>
<li><p>@Documented - 标记这些注解是否包含在用户文档中。</p>
<pre><code>@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION\_TYPE)
public @interface Documented {
}
</code></pre></li>
</ul>
<blockquote>
<p>用途：生成javadoc时会包含注解信息，表示含有该注解类型的元素(带有注释的)会通过javadoc或类似工具进行文档化</p>
<p>表示拥有该注解的元素可通过javadoc此类的工具进行文档化。该类型应用于注解那些影响客户使用带注释(comment)的元素声明的类型。如果类型声明是用Documented来注解的，这种类型的注解被作为被标注的程序成员的公共API。</p>
<p>上面代码@Retention的定义中有一行@Documented，意思是指当前注解的元素会被javadoc工具进行文档化，那么在查看Java API文档时可查看当该注解元素。</p>
</blockquote>
<ul>
<li><p><em>@Inherited</em> </p>
<pre><code>@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.ANNOTATION\_TYPE)
public @interface Inherited {
}
</code></pre></li>
</ul>
<blockquote>
<p>用途：标记这个注解是继承于哪个注解类(默认注解并没有继承于任何子类) ，允许子类继承(接口继承无效),只会继承类上面的注解，表示注解类型能被自动继承。（标识型元注解）</p>
<p>表示该注解类型被自动继承，如果用户在当前类中查询这个元注解类型并且当前类的声明中不包含这个元注解类型，那么也将自动查询当前类的父类是否存在Inherited元注解，这个动作将被重复执行知道这个标注类型被找到，或者是查询到顶层的父类.</p>
</blockquote>
<p><strong>从 Java 7 开始，额外添加了 3 个注解</strong></p>
<ul>
<li><em>@SafeVarargs</em> - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。</li>
<li><em>@FunctionalInterface</em> - Java 8 开始支持，标识一个匿名函数或函数式接口。</li>
<li><em>@Repeatable</em> - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。</li>
</ul>
<h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><blockquote>
<p>当一个接口直接继承_java.lang.annotation.Annotation_接口时，仍是接口，而并非注解。要想自定义注解类型，只能通过<strong>@interface关键字</strong>的方式，其实通过该方式会隐含地继承Annotation接口。</p>
</blockquote>
<p><strong>自定义注解的语法要求</strong></p>
<pre><code>@Target({ElementType.FIELD, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Description {
    String desc();
    String author();
    int age() default 18;
}
</code></pre><p><strong>说明</strong></p>
<ul>
<li>使用<strong>public @interface</strong>关键字定义注解</li>
<li>成员以<strong>无参无异常</strong>的方式声明（如：String desc();）</li>
<li>注解和接口类似，内部可以定义常量和方法</li>
<li>可以给成员指定一个默认的值（如：int age() default 18;）</li>
<li>成员的类型是受限的，合法的类型包括（原始数据类型(*)，Sting(*)，Class，Annotation，Enumeration）,以及前面这些类型的数组类型</li>
<li>如果注解只有一个成员，则成员名必须取名value()，在使用时可以忽略成员名和赋值号“=”</li>
<li>注解类可以没有成员，没有成员的注解成为<strong>标识注解</strong></li>
</ul>
<p><strong>使用自定义注解</strong></p>
<blockquote>
<p>@\&lt;注解名>(\&lt;成员名1>=\&lt;成员值1>, \&lt;成员名2>=\&lt;成员值2>, …)</p>
</blockquote>
<pre><code>@Decription(desc=&quot;I am eyeColor&quot;, author=&quot;Mooc boy&quot;, age=18)
public String eyeColor() {
   return &quot;red&quot;;
}
</code></pre><blockquote>
<p>当注解只有一个成员时的定义，成员名必须取名value()，在使用时可以忽略成员名和赋值号“=”。</p>
</blockquote>
<pre><code>@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Description {
    String value();
}
</code></pre><p><strong>使用方式</strong></p>
<pre><code>@Decription(&quot;I am eyeColor&quot;)
public String eyeColor() {
   return &quot;red&quot;;
}
</code></pre><p><strong>标识注解</strong></p>
<pre><code>@Target({ElementType.TYPE, ElementType.METHOD})
@Retention(RetentionPolicy.RUNTIME)
@Inherited
@Documented
public @interface Description {
}
</code></pre><p><strong>使用方式</strong></p>
<pre><code>@Decription
public String eyeColor() {
   return &quot;red&quot;;
}
</code></pre><h4 id="来自第三方框架的注解（-）"><a href="#来自第三方框架的注解（-）" class="headerlink" title="来自第三方框架的注解（*）"></a>来自第三方框架的注解（*）</h4><p><strong>Spring</strong></p>
<ul>
<li>@Autowired</li>
<li>@Service</li>
<li>@Repository</li>
</ul>
<p><strong>MyBatis</strong></p>
<ul>
<li>@InsertProvider</li>
<li>@UpdateProvider</li>
<li>@Options</li>
</ul>
<blockquote>
<p>后续再学习Spring和Mybatis框架时在给予解释</p>
</blockquote>
<h3 id="自定义注解解析"><a href="#自定义注解解析" class="headerlink" title="自定义注解解析"></a>自定义注解解析</h3><blockquote>
<p>通过反射技术来解析自定义注解，获取类，函数或成员上的<strong>运行时注解</strong>信息, 从而实现<strong>动态控制</strong>程序运行的逻辑。关于反射类位于包java.lang.reflect，其中有一个接口AnnotatedElement，该接口定义了注释相关的几个核心方法，如下：</p>
</blockquote>
<ul>
<li>T  getAnnotation(Class annotationClass);</li>
</ul>
<blockquote>
<p>当存在该元素的指定类型注解，则返回相应注解，否则返回null</p>
</blockquote>
<ul>
<li>Annotation[]  getAnnotations();</li>
</ul>
<blockquote>
<p>返回此元素上存在的所有注解</p>
</blockquote>
<ul>
<li>Annotation []  getDeclaredAnnotations();</li>
</ul>
<blockquote>
<p>返回直接存在于此元素上的所有注解</p>
</blockquote>
<ul>
<li>boolean  isAnnotationPresent(Class\&lt;? extends Annotation> annotationClass);</li>
</ul>
<blockquote>
<p>当存在该元素的指定类型注解，则返回true，否则返回false</p>
</blockquote>
<pre><code>public class ParseAnnotation {
    public static void main(String[] args) {
        // 1. 使用类加载器加载类
        try {
            Class c = Class.forName(&quot;com.sh2zqp.Man&quot;);
            // 2. 找到类上面的注解
            boolean isCExist =
                    c.isAnnotationPresent(Description.class);// 判断是否存在Description这个注解
            if (isCExist) {
                // 3. 拿到Description注解实例
                Description descriptionAnno = (Description) c.getAnnotation(Description.class);
                System.out.println(descriptionAnno.desc());

                // 4. 解析找到方法上的Description注解
                Method[] declaredMethods = c.getDeclaredMethods();
                for (Method m : declaredMethods) {
                    boolean isMExist = m.isAnnotationPresent(Description.class);
                    if (isMExist) {
                        Description description = m.getAnnotation(Description.class);
                        System.out.println(description.desc());
                    }
                }

                // 另一种解析方法
                for (Method m : declaredMethods) {
                    Annotation[] annotations = m.getAnnotations();
                    for (Annotation a : annotations) {
                        if (a instanceof Description) {
                            System.out.println(((Description) a).desc());
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><h3 id="注解的实战"><a href="#注解的实战" class="headerlink" title="注解的实战"></a>注解的实战</h3><h4 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h4><blockquote>
<p>项目取自一个公司的持久层框架，用来替代Hibernate的解决方案，核心代码就是通过注解来实现的。</p>
</blockquote>
<h4 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h4><ul>
<li>有一张用户表，字段有用户ID，用户名，昵称，年龄，性别，所在城市，邮箱，手机号；</li>
<li>方便对每个字段或字段的组合条件进行检索，并打印出SQL语句；</li>
<li>使用方式足够简单。</li>
</ul>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p><strong><a href="https://github.com/sh2zqp/AnnotationTest" target="_blank" rel="external">代码</a></strong></p>
<p><strong>参考资料</strong></p>
<p><a href="http://www.imooc.com/learn/456" target="_blank" rel="external">全面解析Java注解</a><br><a href="http://gityuan.com/2016/01/23/java-annotation/" target="_blank" rel="external">Java注解(Annotation)</a><br><a href="http://docs.oracle.com/javase/7/docs/api/" target="_blank" rel="external">关于注解、反射的内容，可直接查看oracle提供的Java API</a><br><a href="http://www.jianshu.com/p/a08e7e9ed765" target="_blank" rel="external">Java自定义注解</a><br><a href="http://www.importnew.com/10294.html" target="_blank" rel="external">Java中的注解是如何工作的？</a><br><a href="https://zh.wikipedia.org/wiki/Java%E6%B3%A8%E8%A7%A3" target="_blank" rel="external">Java注解</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;h4 id=&quot;注解定义&quot;&gt;&lt;a href=&quot;#注解定义&quot; class=&quot;headerlink&quot; title=&quot;注解定义&quot;&gt;&lt;/a&gt;注解定义&lt;/h
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java反射机制</title>
    <link href="http://yoursite.com/2017/04/27/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2017/04/27/Java反射机制/</id>
    <published>2017-04-27T08:47:05.000Z</published>
    <updated>2017-04-28T09:11:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>通俗地说,反射机制就是可以把一个类,类的成员(函数,属性),当成一个对象来操作,希望读者能理解,也就是说,类,类的成员,我们在运行的时候还可以<strong>动态地去操作</strong>它们.</p>
</blockquote>
<h3 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h3><blockquote>
<p>在面向对象对象的世界中，万事万物皆是对象。Java语言中，静态的成员和普通数据类型不是对象(有其相应的包装类)。</p>
<p>万事万物都可以抽象成<strong>类</strong>，而这些类也是_java.lang.Class_的实例对象。</p>
</blockquote>
<p><strong>测试类</strong></p>
<pre><code>public class ClassTest {
    public static void main(String[] args) {
        // Student类的实例对象
        Student student = new Student(); // student就表示了Student类的实例对象

        /*
         * Student这个类本身也是一个实例对象，是Class类的实例对象
         * 但是不能new出来(私有的无参构造器)，只有Java的虚拟机能创建Class类的实例对象
         */

        // 任意一个类都是Class类的实例对象，其表示(获得)方式有如下三种

        // 1 (任何一个类都有一个隐含的静态成员变量class)
        Class s1 = Student.class;
        // 2 (已知该类的实例对象，通过getClass()方法)
        Class s2 = student.getClass();
        // 3 (Class.forName(&quot;com.sh2zqp.Student&quot;))
        Class s3 = null;
        try {
            s3 = Class.forName(&quot;com.sh2zqp.Student&quot;);
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }

        // s1,s2,s3都表示了Student类的类类型(class type)，也就是Class类的实例对象
        // 它们三者是等价的，一个类只可能有Class类的一种实例对象
        System.out.println(s1);
        System.out.println(s2);
        System.out.println(s3);
        System.out.println(s1 == s2); // true
        System.out.println(s2 == s3); // true

        // 我们可以通过Student类的类类型 s1 or s2 or s3 来创建Student类的实例对象
        try {
            Student s = (Student) s1.newInstance(); // Student需要有无参的构造器
            //Student s = (Student) s2.newInstance();
            //Student s = (Student) s3.newInstance();
            s.play();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}
</code></pre><p><strong>Student</strong></p>
<pre><code>public class Student {

    private int id;
    private String name;

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void play() {
        System.out.println(&quot;play......&quot;);
    }
}
</code></pre><h3 id="Java动态加载类"><a href="#Java动态加载类" class="headerlink" title="Java动态加载类"></a>Java动态加载类</h3><p><strong>Class.forName(“类的全路径”)</strong></p>
<blockquote>
<p>上面的式子不仅可以获得类的类类型，还代表了一种类的加载技术，既是动态加载类。</p>
<p><strong>编译</strong>：把.java文件变成.class文件<br><strong>运行</strong>：由java虚拟机来运行.class文件</p>
</blockquote>
<p><strong>编译时加载的类就是静态加载类</strong><br><strong>运行时加载的类就是动态加载类</strong></p>
<blockquote>
<p>不适用IDE，而使用命令行来编译，运行程序</p>
</blockquote>
<p><strong>javac 编译</strong><br><strong>java 运行</strong></p>
<pre><code>class Office {
    public static void main(String[] args) {
        if (&quot;Word&quot;.equals(args[0])) {
            Word word = new Word();
            word.start();
        }
        if (&quot;Excel&quot;.equals(args[0])) {
            Excel excel = new Excel();
            excel.start();
        }
    }       
}
</code></pre><blockquote>
<p>此时编译此文件</p>
</blockquote>
<pre><code>javac Office.java
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/Reflect01.png" alt=""></p>
<blockquote>
<p>Word和Excel类找不到</p>
<p>新建一个Word类</p>
</blockquote>
<pre><code>class Word {
    public void start() {
        System.out.println(&quot;word...start...&quot;);
    }
}

javac Word.java
</code></pre><blockquote>
<p>编译得到Word.class文件，再次编译Office.java</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/Reflect02.png" alt=""></p>
<blockquote>
<p>和Word相关的报错消失</p>
</blockquote>
<p><strong>new创建对象 是静态加载类，在编译时就需要使用可能需要的类，如果我们目前只有Word类，而没有Excel类，就会一直无法使用该程序，所以我们可以通过动态加载类解决上面问题。</strong></p>
<pre><code>public class Office {
    public static void main(String[] args) {
        try {
        // 动态加载类，在运行时加载
            Class c = Class.forName(args[0]);
            // 通过类类型创建类的实例对象
            OfficeAble office = (OfficeAble) c.newInstance();
            office.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

public interface OfficeAble {
    public void start();
}

public class Word implements OfficeAble {
    @Override
    public void start() {
        System.out.println(&quot;Word...Start...&quot;);
    }
}
</code></pre><blockquote>
<p>动态加载运行，各种功能模块互不影响，对以后想添加功能也比较方便。</p>
</blockquote>
<h3 id="基本数据类型以及一些特殊的类类型"><a href="#基本数据类型以及一些特殊的类类型" class="headerlink" title="基本数据类型以及一些特殊的类类型"></a>基本数据类型以及一些特殊的类类型</h3><pre><code>public class BaseDataTypeClassTest {
    public static void main(String[] args) {
        Class c1 = int.class; // int的类类型（int类的字节码）
        Class c2 = float.class;
        Class c3 = Double.class;
        Class c4 = String.class;
        Class c5 = void.class;

        System.out.println(c1);
        System.out.println(c2);
        System.out.println(c3);
        System.out.println(c4);
        System.out.println(c5);

        System.out.println(c1.getName());
        System.out.println(c1.getSimpleName());
        System.out.println(c3.getName());
        System.out.println(c3.getSimpleName());
        System.out.println(c5.getName());
        System.out.println(c5.getSimpleName());
    }
}
</code></pre><blockquote>
<p>运行结果</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/Reflect03.png" alt=""></p>
<h3 id="Class类的基本API"><a href="#Class类的基本API" class="headerlink" title="Class类的基本API"></a>Class类的基本API</h3><p><strong>Method相关</strong></p>
<pre><code>/**
   * Method类，方法的对象
   * 一个成员方法就是一个Method的实例对象
   * c.getMethods()获取所有的public修饰的函数，包括父类继承来的方法
   * c.getDeclaredMethods()获取所有该类自己声明的方法，不考虑访问权限
   */
  Method[] methods = c.getMethods();
  //Method[] declaredMethods = c.getDeclaredMethods();

  for (Method m : methods) {
      // 方法的返回值类型
      Class returnValueType = m.getReturnType();
      System.out.print(returnValueType.getSimpleName() + &quot; &quot;);
      // 方法名
      System.out.print(m.getName());
      // 方法的参数类型
      Class[] parameterTypes = m.getParameterTypes();
      System.out.print(&quot;(&quot;);
      for (Class cl : parameterTypes) {

      }
      for (int i = 0; i &lt; parameterTypes.length; i++) {
          if (i != (parameterTypes.length-1) ) {
              System.out.print(parameterTypes[i].getSimpleName() + &quot;,&quot;);
          } else {
              System.out.print(parameterTypes[i].getSimpleName());
          }
      }
      System.out.println(&quot;)&quot;);
  }
</code></pre><p><strong>Field相关</strong></p>
<pre><code>// 要获取object对象类的信息，先获取object对象的所属类的类类型
        Class c = object.getClass(); // 2
        /**
         * Field类，成员变量也是对象
         * 一个成员变量就是一个Field的实例对象
         * c.getFields()获取所有的public修饰的成员变量，包括父类继承来的成员变量
         * c.getDeclaredFields()获取所有该类自己声明的成员变量，不考虑访问权限
         */
        Field[] fields = c.getFields();
        Field[] declaredFields = c.getDeclaredFields();
        for (Field f : declaredFields) {
            // 得到成员变量类的类类型的名称
            Class fieldClassType = f.getType();
            System.out.print(fieldClassType.getSimpleName() + &quot; &quot;);
            // 得到成员变量的名称
            System.out.println(f.getName());
        }
</code></pre><p><strong>构造函数相关</strong></p>
<pre><code>// 要获取object对象类的信息，先获取object对象的所属类的类类型
        Class c = object.getClass(); // 2
        /**
         * Constructor类，构造函数也是对象
         * 一个构造函数就是一个Constructor的实例对象
         * c.getConstructors()获取所有的public修饰的构造函数
         * c.getDeclaredFields()获取所有该类的构造函数
         */
        //Constructor[] constructors = c.getConstructors();
        Constructor[] declaredConstructors = c.getDeclaredConstructors();
        for (Constructor constructor : declaredConstructors) {
            // 方法名
            System.out.print(constructor.getName());
            // 方法的参数类型
            Class[] parameterTypes = constructor.getParameterTypes();
            System.out.print(&quot;(&quot;);
            for (int i = 0; i &lt; parameterTypes.length; i++) {
                if (i != (parameterTypes.length-1) ) {
                    System.out.print(parameterTypes[i].getSimpleName() + &quot;,&quot;);
                } else {
                    System.out.print(parameterTypes[i].getSimpleName());
                }
            }
            System.out.println(&quot;)&quot;);
        }
</code></pre><p><strong>其他等等，只要获得该类的类类型即可获得全面的类信息</strong></p>
<h3 id="Class中方法的反射操作"><a href="#Class中方法的反射操作" class="headerlink" title="Class中方法的反射操作"></a>Class中方法的反射操作</h3><ul>
<li>如何获取某个方法(方法的名称和方法的参数列表才能唯一的决定某个方法)</li>
<li><p>方法的反射操作</p>
<p>  method.invoke(对象,参数列表)</p>
<p>  public class MethodInvokeTest {</p>
<pre><code>public static void main(String[] args) {
    Student student = new Student();
    // 获取Student类的print(int , int)方法
    // 1. 要获取一个类的方法，就是获取该类的类信息
    Class c = student.getClass();
    // 2. 获取方法的名称和参数列表来决定该方法是否是我们需要的
    try {
        // 获得public方法
        Method cMethod = c.getMethod(&quot;print&quot;, new Class[] {int.class, int.class});
        //Method cMethod = c.getMethod(&quot;print&quot;, int.class, int.class);
        // 获得自己声明的任意方法(不考虑权限)
        //Method cDeclaredMethod = c.getDeclaredMethod();

        // 方法的反射操作
        student.print(11,22); // student对象操作方法print
        // 方法有返回值返回具体的返回值，无返回值则返回null
        Object o = cMethod.invoke(student, 11, 22); // print方法对象cMethod操作对象student
        //Object o = cMethod.invoke(student, new Object[] {11, 22});
        System.out.println(o); // null

        System.out.println(&quot;=====================&quot;);
        Method cMethod1 = c.getMethod(&quot;print&quot;, String.class, String.class);
        cMethod1.invoke(student, &quot;a&quot;, &quot;b&quot;);

        System.out.println(&quot;=====================&quot;);
        //Method cMethod2 = c.getMethod(&quot;print&quot;);
        Method cMethod2 = c.getMethod(&quot;print&quot;, new Class[] {});
        //cMethod2.invoke(student);
        cMethod2.invoke(student, new Object[] {});

        /**
         * 用Java反射机制来调用private方法
         *
         * AccessibleObject类是Field、Method、和Constructor对象的基类。
         * 它提供了将反射的对象标记为在使用时取消默认Java语言访问控制检查的能力。
         * 对于公共成员、默认(打包)访问成员、受保护成员和私有成员，在分别使用
         * Field、Method和Constructor对象来设置或获得字段、调用方法，
         * 或者创建和初始化类的新实例的时候，会执行访问检查。
         * 当反射对象的accessible标志设为true时，则表示反射的对象在使用时应该取消Java语言访问检查。
         * 反之则检查。由于JDK的安全检查耗时较多，所以通过setAccessible(true)的方式关闭安全检查来提升反射速度。
         */
        System.out.println(&quot;=====================&quot;);
        // //getDeclaredMethod可以获取到所有方法，而getMethod只能获取public
        Method cMethodPrivate = c.getDeclaredMethod(&quot;privateMethod&quot;, new Class[] {});
        cMethodPrivate.setAccessible(true);// //压制Java对访问修饰符的检查
        cMethodPrivate.invoke(student, new Object[] {});

    } catch (Exception e) {
        e.printStackTrace();
    }
}
</code></pre><p>  }</p>
</li>
</ul>
<h3 id="反射在集合泛型中的应用（本质）"><a href="#反射在集合泛型中的应用（本质）" class="headerlink" title="反射在集合泛型中的应用（本质）"></a>反射在集合泛型中的应用（本质）</h3><p><strong>通过Class，Method来认识泛型的本质，什么是泛型(防止输入错误的数据类型)，泛型什么时候有效</strong></p>
<pre><code>public class GenericClassTest {
    public static void main(String[] args) {
        ArrayList list1 = new ArrayList();
        ArrayList&lt;String&gt; list2 = new ArrayList&lt;&gt;();

        list2.add(&quot;aaaa&quot;);
        // list2.add(20); // 错误

        Class c1 = list1.getClass();
        Class c2 = list2.getClass();
        System.out.println(c1);
        System.out.println(c2);
        System.out.println(c1 == c2); // true

        // 反射的操作都是编译后的操作，即变成字节码之后的操作（运行时）
        // c1==c2说明编译之后的集合是去泛型化的
        // Java中的泛型是防止错误输入的，只在编译阶段有效，绕过编译就无效了
        // 验证：通过方法的反射来操作，绕过编译
        try {
            Method c2Method = c2.getMethod(&quot;add&quot;, Object.class);
            c2Method.invoke(list2, 100);
            System.out.println(list2.size());
            System.out.println(list2); // [aaaa, 100],此时不能再用for循环遍历，会有类型转换错误
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
</code></pre><p><strong>反射的应用场景</strong></p>
<ul>
<li>工厂模式：Factory类中用反射的话，添加了一个新的类之后，就不需要再修改工厂类Factory了</li>
<li>数据库JDBC中通过Class.forName(Driver).来获得数据库连接驱动</li>
<li>分析类文件：毕竟能得到类中的方法等等</li>
<li>访问一些不能访问的变量或属性：破解别人代码</li>
</ul>
<p><strong>参考资料</strong></p>
<p><a href="http://www.imooc.com/learn/199" target="_blank" rel="external">反射——Java高级开发必须懂的</a><br><a href="http://www.cnblogs.com/rollenholt/archive/2011/09/02/2163758.html" target="_blank" rel="external">java反射详解</a><br><a href="http://blog.csdn.net/ljphhj/article/details/12858767" target="_blank" rel="external">一个例子让你了解Java反射机制</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通俗地说,反射机制就是可以把一个类,类的成员(函数,属性),当成一个对象来操作,希望读者能理解,也就是说,类,类的成员,我们在运行的时候还可以&lt;strong&gt;动态地去操作&lt;/strong&gt;它们.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="反射机制" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>JUnit测试 By Intellij IDEA15(2016.3)</title>
    <link href="http://yoursite.com/2017/04/27/JUnit%E6%B5%8B%E8%AF%95%20By%20Intellij%20IDEA15(2016.3)/"/>
    <id>http://yoursite.com/2017/04/27/JUnit测试 By Intellij IDEA15(2016.3)/</id>
    <published>2017-04-27T01:40:26.000Z</published>
    <updated>2017-04-27T08:36:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JUnit单元测试的基本使用"><a href="#JUnit单元测试的基本使用" class="headerlink" title="JUnit单元测试的基本使用"></a>JUnit单元测试的基本使用</h2><blockquote>
<p>我们使用Intellij IDEA15来完成日常开发工作，使用JUnit来进行单元测试的工作，对我们所写的代码进行正确性的测试，并为后期的项目维护做好准备，以及提升代码的质量和出错率，Debug的过程一定是痛苦的。</p>
<p>本文中我们所使用的是<a href="http://junit.org/junit4/" target="_blank" rel="external">JUnit4</a>版本，不过目前<a href="http://junit.org/junit5/" target="_blank" rel="external">JUnit5</a>也已经出来了。</p>
</blockquote>
<h3 id="环境搭建以及前期准备"><a href="#环境搭建以及前期准备" class="headerlink" title="环境搭建以及前期准备"></a>环境搭建以及前期准备</h3><ul>
<li>首先，在一个新建的项目中，在项目根目录下新建一个测试文件夹，此处为了易于辨识，我们取做“tests”；</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit01.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit02.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit03.png" alt=""></p>
<ul>
<li>然后，“Command+；”进入到项目结构，选择Modules子选项并把tests文件夹添加为测试目录，此时文件夹的颜色由灰色变为蓝色，点击ok确认即可；</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit04.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit05.png" alt=""></p>
<ul>
<li><p>最后，我们在src目录下的com.sh2zqp.bean包下新建一个类Person，类里面添加一个name属性和一个getName()和一个setName()方法。</p>
<p>  public class Person {</p>
<pre><code>private String name;
public Person(String name) {
    this.name = name;
}
public String getName() {
    return name;
}
public void setName(String name) {
    this.name = name;
}
}
</code></pre></li>
</ul>
<p><strong>注意</strong></p>
<blockquote>
<p>之所以把测试代码和源代码分开是因为一般测试代码是不会公开的，只是我们开发人员自己使用，把它们单独放在tests目录下更易于实现这样的管理。</p>
</blockquote>
<h3 id="生成测试类PersonTest"><a href="#生成测试类PersonTest" class="headerlink" title="生成测试类PersonTest"></a>生成测试类PersonTest</h3><ul>
<li>首先把鼠标定位到Person类上，快捷键Alt(option)+Enter(return)，选择Create Tests选项；</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit06.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit07.png" alt=""></p>
<ul>
<li>然后，进入Create Tests设置页面，选择Testing Libary为JUnit4，我们发现里面有不少的测试库可以使用；</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit08.png" alt=""></p>
<ul>
<li>但是，我们发现JUnit4库并没有被引入项目Module中，此时我们点击fix，选择第一项；，点击ok；</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit09.png" alt=""></p>
<ul>
<li>最后，我们选择Person类中的getName()方法进行测试，点击ok即可，之后我们发现项目的结构如下。</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit10.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit11.png" alt=""></p>
<blockquote>
<p>可以发现测试类PersonTest中的有一个getName的测试方法，方法上面有一个@Test注解</p>
</blockquote>
<h3 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h3><pre><code>@Test
public void getName() throws Exception {
    Person person = new Person(&quot;sh2zqp&quot;);
    assertEquals(&quot;sh2zqp&quot;, person.getName());
}
</code></pre><p><strong>代码说明</strong></p>
<ul>
<li>测试方法上面必须使用<strong>@Test</strong>注解进行修饰;</li>
<li>测试方法必须使用<strong>public void</strong> 进行修饰，<strong>不能带有任何参数</strong>;</li>
<li>测试方法必须抛出throws Exception异常;</li>
<li>新建一个源代码目录<strong>tests</strong>用来存放测试代码;</li>
<li>测试类的包应该与被测试类的<strong>包保持一致</strong>;</li>
<li>测试单元中的每一个方法必须<strong>独立测试</strong>，每个测试方法之间不能有依赖;</li>
<li>测试类使用Test做为类名的后缀（非必要）;</li>
<li>测试方法使用test作为方法名的前缀（非必要）;</li>
</ul>
<h3 id="运行测试代码"><a href="#运行测试代码" class="headerlink" title="运行测试代码"></a>运行测试代码</h3><p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit12.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit13.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit14.png" alt=""></p>
<blockquote>
<p>我们也可以把鼠标方法测试类PersonTest或测试方法getName()上，通过快捷键Alt+Enter来完成测试运行。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit17.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit16.png" alt=""></p>
<blockquote>
<p>测试结果如下：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit15.png" alt=""></p>
<blockquote>
<p>此外，我们通过在页面任意空白处使用Command+N添加新的测试方法，如下：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit18.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit19.png" alt=""></p>
<h3 id="测试错误示范"><a href="#测试错误示范" class="headerlink" title="测试错误示范"></a>测试错误示范</h3><blockquote>
<p>我们为setName()方法添加了测试方法</p>
</blockquote>
<pre><code>@Test
public void setName() throws Exception {
    Person person = new Person(&quot;sh2zqp&quot;);
    person.setName(&quot;sh2zqp1&quot;);
    assertEquals(&quot;sh2zqp&quot;, person.getName());
}
</code></pre><blockquote>
<p>很明显assertEquals(“sh2zqp”, person.getName())中“sh2zqp”并不是person.getName()所期望的值，因为我们已经通过setName()方法更改为“sh2zqp1”。</p>
<p>另外，setName和getName方法混合使用，说明此处的setName已经不是独立的测试单元。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit20.png" alt=""></p>
<p><strong>注意</strong></p>
<ul>
<li>Failure 一般是单元测试使用的断言方法判断失败引起，说明预期结果和程序运行结果不一致;</li>
<li>error 是有代码异常引起的，他产生于测试代码本身中的Bug;</li>
<li>测试用例不是用来证明你是对的，而是用来证明你没有错;</li>
</ul>
<h2 id="JUnit单元测试的深入学习"><a href="#JUnit单元测试的深入学习" class="headerlink" title="JUnit单元测试的深入学习"></a>JUnit单元测试的深入学习</h2><blockquote>
<p>上一部分我们简单的使用了JUnit进行了单元测试，本部分我们进一步来学习。</p>
</blockquote>
<h3 id="JUnit测试流程"><a href="#JUnit测试流程" class="headerlink" title="JUnit测试流程"></a>JUnit测试流程</h3><blockquote>
<p>在PersonTest测试类中加入如下代码：</p>
</blockquote>
<pre><code>@BeforeClass
public static void setUpBeforeClass() throws Exception {
    System.out.println(&quot;BeforeClass&quot;);
}
@AfterClass
public static void setUpAfterClass() throws Exception {
    System.out.println(&quot;AfterClass&quot;);
}
@Before
public void setUp() throws Exception {
    System.out.println(&quot;Before&quot;);
}
@After
public void tearDown() throws Exception {
    System.out.println(&quot;After&quot;);
}

@Test
public void getName() throws Exception {
    System.out.println(&quot;test getName()&quot;);
    Person person = new Person(&quot;sh2zqp1&quot;);
    assertEquals(&quot;sh2zqp1&quot;, person.getName());
}
@Test
public void setName() throws Exception {
    System.out.println(&quot;test setName()&quot;);
    Person person = new Person(&quot;sh2zqp&quot;);
    person.setName(&quot;sh2zqp1&quot;);
    assertEquals(&quot;sh2zqp1&quot;, person.getName());
}
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit21.png" alt=""></p>
<blockquote>
<p>这里我们学习四个新的注解@BeforeClass，@AfterClass，@Before，@After，下面对这几个注解做出说明：</p>
</blockquote>
<ul>
<li><strong>@BeforeClass</strong>:所修饰的方法在所有方法加载前执行，而且他是静态的在类加载后就会执行该方法，在内存中只有一份实例，适合用来加载配置文件;</li>
<li><strong>@AfterClass</strong>:所修饰的方法在所有方法执行完毕之后执行，通常用来进行资源清理，例如关闭数据库连接;</li>
<li><strong>@Before</strong>和<strong>@After</strong>在每个测试方法执行前都会执行一次。</li>
</ul>
<h3 id="JUnit常用注解"><a href="#JUnit常用注解" class="headerlink" title="JUnit常用注解"></a>JUnit常用注解</h3><ul>
<li><strong>@Test</strong>：将一个普通的方法修饰成为一个测试方法<ul>
<li>@Test(exception=xxx.class)在运行时忽略某个异常</li>
<li>@Test(timeout=毫秒数)允许程序运行的时间</li>
</ul>
</li>
</ul>
<blockquote>
<p>@Test可以附带参数，首先在Person类中新增一个divideByPerson()方法，然后在PersonTest类中新增测试方法，具体如下：</p>
</blockquote>
<pre><code>public int divideByPerson(int a, int b) {
        return a/b;
}
    @Test
    public void divideByPerson() throws Exception {
        assertEquals(6, person.divideByPerson(6,0));
    }
</code></pre><blockquote>
<p>测试结果如下：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit22.png" alt=""></p>
<blockquote>
<p>可以看到ArithmeticException算数错误，报了使用<strong>@Test(exception=xxx.class)</strong>，代码如下：</p>
</blockquote>
<pre><code>@Test(expected = ArithmeticException.class)
public void divideByPerson() throws Exception {
    assertEquals(6, person.divideByPerson(6,0));
}
</code></pre><blockquote>
<p>运行结果如下：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit23.png" alt=""></p>
<blockquote>
<p>@Test另外还有一个参数<strong>@Test(timeout=毫秒数)</strong>,其目的给出一个程序运行的最大时间，时间到了会自动停止，一般用于循环执行的代码块，避免出现死循环。</p>
</blockquote>
<ul>
<li><p><strong>@BeforeClass</strong>，<strong>@AfterClass</strong>，<strong>@Before</strong>，<strong>@After</strong>（参见上面的解释）</p>
</li>
<li><p><strong>@Ignore</strong>:所修饰的方法会被测试器忽略，里面可以附加一些提示信息<strong>@Ignore(“……”)</strong></p>
<pre><code>@Ignore(&quot;ignore&quot;)
@Test
public void getName() throws Exception {
    System.out.println(&quot;test getName()&quot;);
    assertEquals(&quot;sh2zqp&quot;, person.getName());
}
</code></pre></li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit25.png" alt=""></p>
<ul>
<li><strong>@RunWith</strong>:更改测试运行器，自定义测试器，需要继承org.junit.runner.Runner，大多数情况下使用默认的测试运行器即可。</li>
<li>assert断言的使用</li>
</ul>
<blockquote>
<p>静态导入<br>    import static org.junit.Assert</p>
</blockquote>
<h3 id="JUnit测试套件的使用"><a href="#JUnit测试套件的使用" class="headerlink" title="JUnit测试套件的使用"></a>JUnit测试套件的使用</h3><blockquote>
<p>测试套件是组织测试类一起运行的<strong>测试类</strong>，是随着项目规模的变大的一种简易测试方法，可以批量运行测试类，把这些测试类集中到一个测试套件中即可。</p>
<p>我们新建的一个测试套件类SuiteTest和三个测试类Test1，Test2，Test3，如下：</p>
</blockquote>
<pre><code>public class Test1 {
    @Test
    public void test() throws Exception {
        System.out.println(&quot;test1......&quot;);
    }
}
public class Test2 {
    @Test
    public void test() throws Exception {
        System.out.println(&quot;test2......&quot;);
    }
}
public class Test3 {
    @Test
    public void test() throws Exception {
        System.out.println(&quot;test3......&quot;);
    }
}

@RunWith(Suite.class)
@Suite.SuiteClasses({Test1.class, Test2.class, Test3.class})
public class SuiteTest {
}
</code></pre><blockquote>
<p>运行结果</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit24.png" alt=""></p>
<p><strong>说明</strong></p>
<ul>
<li>作为测试套件的入口类，类中不能包含任何方法，并用public修饰;</li>
<li>更改测试运行器Suite.class（<strong>@RunWith(Suite.class)</strong>）;</li>
<li>将需要运行的测试类放入<strong>Suite.SuiteClasses({})</strong>的数组中，当然里面也可以放测试套件类。</li>
</ul>
<h3 id="JUnit参数化设置"><a href="#JUnit参数化设置" class="headerlink" title="JUnit参数化设置"></a>JUnit参数化设置</h3><blockquote>
<p>需要测试的仅仅是测试数据，代码结构是不变的，只需要更改测试数据。</p>
</blockquote>
<pre><code>@RunWith(Parameterized.class)
public class ParameterTest {

    String expected = &quot;&quot;;
    String input = &quot;&quot;;

    @Parameterized.Parameters
    public static Collection&lt;Object[]&gt; t() {
        return Arrays.asList(new Object[][] {
                {&quot;sh2zqp1&quot;,&quot;sh2zqp1&quot;},
                {&quot;sh2zqp2&quot;,&quot;sh2zqp2&quot;}
        });
    }

    public ParameterTest(String expected, String input) {
        this.expected = expected;
        this.input = input;

    }

    @Test
    public void testGetName() throws Exception {
        Person person = new Person(input);
        assertEquals(expected, person.getName());
    }
}
</code></pre><p><strong>具体步骤</strong></p>
<ul>
<li>更改默认的测试运行器为@RunWith(Parameterized.class);</li>
<li>声明变量来存放预期值和测试值;</li>
<li>声明一个返回值为Collection的公共静态方法，并用@Parameters修饰;</li>
<li>为测试类声明一个带有参数的公共构造函数，并在其中为他声明变量赋值。</li>
</ul>
<blockquote>
<p>运行结果</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/JUnit26.png" alt=""></p>
<h2 id="JUnit4在Web项目中的使用"><a href="#JUnit4在Web项目中的使用" class="headerlink" title="JUnit4在Web项目中的使用"></a>JUnit4在Web项目中的使用</h2><p><strong>后期添加</strong></p>
<p><strong>参考资料</strong></p>
<p><a href="https://www.youtube.com/watch?v=Bld3644bIAo&amp;t=450s" target="_blank" rel="external">JUnit 4 with IntelliJ: A quick introduction</a><br><a href="http://www.cnblogs.com/huaxingtianxia/p/5563111.html" target="_blank" rel="external">JUnit单元测试–IntelliJ IDEA</a><br><a href="http://www.imooc.com/learn/356" target="_blank" rel="external">JUnit—Java单元测试必备工具</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JUnit单元测试的基本使用&quot;&gt;&lt;a href=&quot;#JUnit单元测试的基本使用&quot; class=&quot;headerlink&quot; title=&quot;JUnit单元测试的基本使用&quot;&gt;&lt;/a&gt;JUnit单元测试的基本使用&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们使用Intel
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="JUnit4" scheme="http://yoursite.com/tags/JUnit4/"/>
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="单元测试" scheme="http://yoursite.com/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
      <category term="Intellij IDEA15" scheme="http://yoursite.com/tags/Intellij-IDEA15/"/>
    
  </entry>
  
  <entry>
    <title>收集的学习网站</title>
    <link href="http://yoursite.com/2017/04/23/%E6%94%B6%E9%9B%86%E7%9A%84%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
    <id>http://yoursite.com/2017/04/23/收集的学习网站/</id>
    <published>2017-04-23T02:02:50.000Z</published>
    <updated>2017-04-23T02:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>不定时更新</strong></p>
<hr>
<ul>
<li>Google Developers: <a href="https://developers.google.cn" target="_blank" rel="external">https://developers.google.cn/</a><ul>
<li>Android官方培训课程中文版: <a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">http://hukai.me/android-training-course-in-chinese/index.html</a></li>
<li>掘金: <a href="https://gold.xitu.io/welcome" target="_blank" rel="external">https://gold.xitu.io/welcome</a></li>
<li>干货集中营: <a href="http://gank.io/" target="_blank" rel="external">http://gank.io/</a></li>
<li>itscoder: <a href="http://itscoder.com/" target="_blank" rel="external">http://itscoder.com/</a></li>
<li>泡在网上的日子: <a href="http://www.jcodecraeer.com/" target="_blank" rel="external">http://www.jcodecraeer.com/</a></li>
<li>开发者头条: <a href="https://toutiao.io/" target="_blank" rel="external">https://toutiao.io/</a></li>
<li>开源中国社区: <a href="http://www.oschina.net/android" target="_blank" rel="external">http://www.oschina.net/android</a></li>
<li>简书: <a href="http://www.jianshu.com/" target="_blank" rel="external">http://www.jianshu.com/</a></li>
<li>技术小黑屋: <a href="http://droidyue.com/" target="_blank" rel="external">http://droidyue.com/</a></li>
<li>AndroidDevTools: <a href="http://www.androiddevtools.cn/" target="_blank" rel="external">http://www.androiddevtools.cn/</a></li>
<li>红黑联盟: <a href="http://www.2cto.com/kf/yidong/Android/news/" target="_blank" rel="external">http://www.2cto.com/kf/yidong/Android/news/</a></li>
<li>极客导航: <a href="http://www.jikedaohang.com/" target="_blank" rel="external">http://www.jikedaohang.com/</a></li>
<li>有赞技术博客: <a href="http://tech.youzan.com/" target="_blank" rel="external">http://tech.youzan.com/</a></li>
<li>codeKK: <a href="http://p.codekk.com/" target="_blank" rel="external">http://p.codekk.com/</a></li>
<li>慕课网: <a href="http://www.imooc.com/" target="_blank" rel="external">http://www.imooc.com/</a></li>
</ul>
</li>
<li>YouMeek: <a href="http://www.youmeek.com/" target="_blank" rel="external">http://www.imooc.com/</a><ul>
<li>极客学院: <a href="http://www.jikexueyuan.com/" target="_blank" rel="external">http://www.jikexueyuan.com/</a></li>
<li>java&amp;android学习网: <a href="http://www.javaand.com/index.html" target="_blank" rel="external">http://www.javaand.com/index.html</a></li>
<li>廖雪峰: <a href="http://www.liaoxuefeng.com/" target="_blank" rel="external">http://www.liaoxuefeng.com/</a></li>
<li>任玉刚: <a href="http://blog.csdn.net/singwhatiwanna" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna</a></li>
<li>郭霖: <a href="http://blog.csdn.net/guolin%5C_blog" target="_blank" rel="external">http://blog.csdn.net/guolin_blog</a></li>
<li>徐宜生: <a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external">http://blog.csdn.net/eclipsexys</a></li>
<li>Drakeet: <a href="https://drakeet.me/" target="_blank" rel="external">https://drakeet.me/</a></li>
<li>stormzhang: <a href="http://stormzhang.com/" target="_blank" rel="external">http://stormzhang.com/</a></li>
<li>匠心写作: <a href="https://gank.io/post/published" target="_blank" rel="external">https://gank.io/post/published</a></li>
<li>吴小龙同学: <a href="http://wuxiaolong.me/" target="_blank" rel="external">http://wuxiaolong.me/</a></li>
<li>胡凯: <a href="http://hukai.me/" target="_blank" rel="external">http://hukai.me/</a></li>
<li>阮一峰: <a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="external">http://www.ruanyifeng.com/blog/</a></li>
<li>Trinea: <a href="http://www.trinea.cn/" target="_blank" rel="external">http://www.trinea.cn/</a></li>
<li>Hongyang: <a href="http://blog.csdn.net/lmj623565791" target="_blank" rel="external">http://blog.csdn.net/lmj623565791</a></li>
</ul>
</li>
<li>hujiaweibujidao: <a href="http://hujiaweibujidao.github.io/" target="_blank" rel="external">http://hujiaweibujidao.github.io/</a><ul>
<li>lypeer: <a href="http://blog.csdn.net/luoyanglizi" target="_blank" rel="external">http://blog.csdn.net/luoyanglizi</a></li>
<li>张涛-开源实验室: <a href="http://kymjs.com/" target="_blank" rel="external">http://kymjs.com/</a></li>
<li>有家客栈: <a href="http://blog.csdn.net/njcit" target="_blank" rel="external">http://blog.csdn.net/njcit</a></li>
<li>zjutkz’s blog: <a href="http://zjutkz.net/" target="_blank" rel="external">http://zjutkz.net/</a></li>
<li>孙群: <a href="http://blog.csdn.net/iispring" target="_blank" rel="external">http://blog.csdn.net/iispring</a></li>
<li>Gityuan: <a href="http://gityuan.com/" target="_blank" rel="external">http://gityuan.com/</a></li>
<li>写代码的猴子: <a href="http://jaeger.itscoder.com/" target="_blank" rel="external">http://jaeger.itscoder.com/</a></li>
<li>Chad.cym: <a href="http://blog.csdn.net/cym492224103" target="_blank" rel="external">http://blog.csdn.net/cym492224103</a></li>
<li>别志华: <a href="http://blog.csdn.net/biezhihua" target="_blank" rel="external">http://blog.csdn.net/biezhihua</a></li>
<li>云在千峰: <a href="http://blog.chengyunfeng.com/" target="_blank" rel="external">http://blog.chengyunfeng.com/</a></li>
<li>LengYue: <a href="https://www.apkdv.com/" target="_blank" rel="external">https://www.apkdv.com/</a></li>
<li>何以诚: <a href="http://blog.csdn.net/u013022222" target="_blank" rel="external">http://blog.csdn.net/u013022222</a></li>
<li>GcsSloop: <a href="http://www.gcssloop.com/" target="_blank" rel="external">http://www.gcssloop.com/</a></li>
<li>Tikitoo: <a href="http://tikitoo.github.io/" target="_blank" rel="external">http://tikitoo.github.io/</a></li>
</ul>
</li>
<li>yayun: <a href="http://blog.csdn.net/yayun0516" target="_blank" rel="external">http://blog.csdn.net/yayun0516</a><ul>
<li>聪聪的个人网站: <a href="https://lufficc.com/" target="_blank" rel="external">https://lufficc.com/</a></li>
<li>lightSky: <a href="http://www.lightskystreet.com/" target="_blank" rel="external">http://www.lightskystreet.com/</a></li>
<li>blankj: <a href="http://blankj.com/" target="_blank" rel="external">http://blankj.com/</a></li>
<li>杰风居: <a href="http://jayfeng.com/" target="_blank" rel="external">http://jayfeng.com/</a></li>
<li>一个本科小生的奋斗史: <a href="http://blog.csdn.net/jason0539" target="_blank" rel="external">http://blog.csdn.net/jason0539</a></li>
<li>JavAndroid: <a href="http://blog.csdn.net/yy1300326388" target="_blank" rel="external">http://blog.csdn.net/yy1300326388</a></li>
<li>Jude95: <a href="http://www.jianshu.com/users/d73c34b951ef/latest%5C_articles" target="_blank" rel="external">http://www.jianshu.com/users/d73c34b951ef/latest_articles</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;不定时更新&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;Google Developers: &lt;a href=&quot;https://developers.google.cn&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https:/
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>为什么chrome浏览器打不开localhost(提示无法显示此网页)录</title>
    <link href="http://yoursite.com/2017/04/18/%E4%B8%BA%E4%BB%80%E4%B9%88chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E4%B8%8D%E5%BC%80localhost(%E6%8F%90%E7%A4%BA%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E6%AD%A4%E7%BD%91%E9%A1%B5)/"/>
    <id>http://yoursite.com/2017/04/18/为什么chrome浏览器打不开localhost(提示无法显示此网页)/</id>
    <published>2017-04-18T12:13:46.000Z</published>
    <updated>2017-04-18T12:25:08.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一、网络设置的问题 这种原因比较多出现在需要手动指定IP、网关、DNS服务器联网方式下，及使用代理服务器上网的。仔细检查计算机的网络设置。 </p>
<p>二、DNS服务器的问题 当IE无法浏览网页时，可先尝试用IP地址来访问，如果可以访问，那么应该是DNS的问题，造成DNS的问题可能是连网时获取DNS出错或DNS服务器本身问题，这时你可以手动指定DNS服务（地址可以是你当地ISP提供的DNS服务器地址，也可以用其它地方可正常使用DNS服务器地址。）不同的ISP有不同的DNS地址。有时候则是路由器或网卡的问题，无法与ISP的DNS服务连接，这种情况的话，可把路由器关一会再开，或者重新设置路由器。 还有一种可能，是本地DNS缓存出现了问题。为了提高网站访问速度，系统会自动将已经访问过并获取IP地址的网站存入本地的DNS缓存里，一旦再对这个网站进行访问，则不再通过DNS服务器而直接从本地DNS缓存取出该网站的IP地址进行访问。所以，如果本地DNS缓存出现了问题，会导致网站无法访问。可以在“运行”中执行ipconfig /flushdns来重建本地DNS缓存。</p>
<p>三、IE浏览器本身的问题 当IE浏览器本身出现故障时，自然会影响到浏览了；或者IE被恶意修改破坏也会导致无法浏览网页。这时可以尝试用“黄山IE修复专家”来修复（建议到安全模式下修复），或者重新IE（如重装IE遇到无法重新的问题，可参考：附一解决无法重装IE） </p>
<p>四、网络防火墙的问题 如果网络防火墙设置不当，如安全等级过高、不小心把IE放进了阻止访问列表、错误的防火墙策略等，可尝试检查策略、降低防火墙安全等级或直接关掉试试是否恢复正常。 </p>
<p>五、网络协议和网卡驱动的问题 IE无法浏览，有可能是网络协议（特别是TCP/IP协议）或网卡驱动损坏导致，可尝试重新网卡驱动和网络协议。 </p>
<p>六、HOSTS文件的问题 HOSTS文件被修改，也会导致浏览的不正常，解决方法当然是清空HOSTS文件里的内容。 </p>
<p>七、系统文件的问题 当与IE有关的系统文件被更换或损坏时，会影响到IE正常的使用，这时可使用SFC命令修复一下，WIN98系统可在“运行”中执行SFC，然后执行扫描；WIN2000/XP/2003则在“运行”中执行sfc /scannow尝试修复。 其中当只有IE无法浏览网页，而可以上时，则往往由于winsock.dll、wsock32.dll或wsock.vxd（VXD只在WIN9X系统下存在）等文件损坏或丢失造成，Winsock是构成TCP/IP协议的重要组成部分，一般要重装TCP/IP协议。但xp开始集成TCP/IP协议，所以不能像98那样简单卸载后重装，可以使用 netsh 命令重置 TCP/IP协议，使其恢复到初次安装操作系统时的状态。具体操作如下： 点击“开始 运行”，在运行对话框中输入“CMD”命令，弹出命令提示符窗口，接着输入“netsh int ip reset c:\resetlog.txt”命令后会回车即可，其中“resetlog.txt”文件是用来记录命令执行结果的日志文件，该参数选项必须指定，这里指定的日志文件的完整路径是“c:\resetlog.txt”。执行此命令后的结果与删除并重新安装 TCP/IP 协议的效果相同。 小提示：netsh命令是一个基于命令行的脚本编写工具，你可以使用此命令配置和监视Windows 系统，此外它还提供了交互式网络外壳程序接口，netsh命令的使用格式请参看帮助文件（在令提示符窗口中输入“netsh/?”即可）。 第二个解决方法是修复以上文件，WIN9X使用SFC重新提取以上文件，WIN2000/XP/2003使用sfc /scannow命令修复文件,当用sfc /scannow无法修复时，可试试网上发布的专门针对这个问题的修复工具WinSockFix，可以在网上搜索下载。 </p>
<p>八、杀毒软件的实时监控问题 这倒不是经常见，但有时的确跟实时监控有关，因为现在杀毒软件的实时监控都添加了对网页内容的监控。举一个实例：KV2005就会在个别的机子上会导致IE无法浏览网页（不少朋友遇到过），其具体表现是只要打开网页监控，一开机上网大约20来分钟后，IE就会无法浏览网页了，这时如果把KV2005的网页监控关掉，就一切恢复正常；经过彻底地重装KV2005也无法解决。虽然并不是安装KV2005的每台机子都会出现这种问题，毕竟每台机子的系统有差异，安装的程序也不一样。但如果出现IE无法浏览网页时，也要注意检查一下杀毒软件。</p>
<p>九、感染了病毒所致 这种情况往往表现在打开IE时，在IE界面的左下框里提示：正在打开网页，但老半天没响应。在任务管理器里查看进程，（进入方法，把鼠标放在任务栏上，按右键—任务管理器—进程）看看CPU的占用率如何，如果是100%，可以肯定，是感染了病毒，这时你想运行其他程序简直就是受罪。这就要查查是哪个进程贪婪地占用了CPU资源．找到后，最好把名称记录下来，然后点击结束，如果不能结束，则要启动到安全模式下把该东东删除，还要进入注册表里，（方法：开始—运行，输入regedit）在注册表对话框里，点编辑—查找，输入那个程序名，找到后，点鼠标右键删除，然后再进行几次的搜索，往往能彻底删除干净。 有很多的病毒，杀毒软件无能为力时，唯一的方法就是手动删除。</p>
<p>十一、无法打开二级链接 还有一种现象也需特别留意：就是能打开网站的首页，但不能打开二级链接，如果是这样，处理的方法是重新注册如下的DLL文件： 在开始—运行里输入： regsvr32 Shdocvw.dll regsvr32 Shell32.dll（注意这个命令，先不用输） regsvr32 Oleaut32.dll regsvr32 Actxprxy.dll regsvr32 Mshtml.dll regsvr32 Urlmon.dll regsvr32 Msjava.dll regsvr32 Browseui.dll 注意：每输入一条，按回车。第二个命令可以先不用输，输完这些命令后重新启动windows，如果发现无效，再重新输入一遍，这次输入第二个命令。</p>
</blockquote>
<p><strong>解决办法</strong></p>
<blockquote>
<p>关闭全局代理<br>换用Safari可以打开</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一、网络设置的问题 这种原因比较多出现在需要手动指定IP、网关、DNS服务器联网方式下，及使用代理服务器上网的。仔细检查计算机的网络设置。 &lt;/p&gt;
&lt;p&gt;二、DNS服务器的问题 当IE无法浏览网页时，可先尝试用IP地址来访问，如果可以访问，那么应
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="问题汇总" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    
      <category term="Tomcat服务器" scheme="http://yoursite.com/tags/Tomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb学习路线</title>
    <link href="http://yoursite.com/2017/04/13/JavaWeb%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://yoursite.com/2017/04/13/JavaWeb学习路线/</id>
    <published>2017-04-13T02:04:36.000Z</published>
    <updated>2017-04-23T02:41:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Java学习这一部分其实也算是今天的重点，这一部分用来回答很多群里的朋友所问过的问题，那就是我你是如何学习Java的，能不能给点建议？今天我是打算来点干货，因此咱们就不说一些学习方法和技巧了，直接来谈每个阶段要学习的内容甚至是一些书籍。这一部分的内容，同样适用于一些希望转行到Java的同学。</p>
<p>在大家看之前，我要先声明两点。1、由于我本人是Java后端开发出身，因此所推荐的学习内容是Java Web和Java后端开发的路线，非Java Web和Java后端开发的同学请适当参考其学习思想即可，切勿照搬。2、下面对于【第一部分】的推荐内容，目的是让你尽快成为一个可以参加工作的Java开发者，更适用于处于待业状态，准备转行Java的同学。</p>
<p>如果你是在校学生，务必要在学好基础（比如计算机系统、算法、编译原理等等）的前提下，再考虑去进行下面的学习。</p>
</blockquote>
<h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><blockquote>
<p>对于尚未做过Java工作的同学，包括一些在校生以及刚准备转行Java的同学。</p>
<p>一、Java基础首先去找一个Java的基础教程学一下，这里可以推荐一个地址，或者你也可以参照这个地址上去找相应的视频。学习Java基础的时候，应该尽量多动手，很多时候，你想当然的事情，等你写出来运行一下，你就会发现不是这么回事儿，不信你就试试。学完以上内容以后，你应该对Java有一个基本的了解了，你可以用Java语言写出一些简单的程序，并且你用的是最简单的编辑器，比如记事本。这个时候，不要急于进入下一部分，留下几天好好写一些程序，尽可能熟悉这些基础内容。</p>
<p>二、Web开发等你写上几天程序以后，你往往会比较迷茫，因为你写的东西似乎看起来毫无用处，比如实现一个简单的计算器，读取一个文件等。这个时候你就应该去学着写一些让你觉得有意思的东西了，所以你应该学习更多的知识。这些内容主要是Web开发相关的内容，包括HTML/CSS/JS（前端页面）、Servlet/JSP（J2EE）以及Mysql（数据库）相关的知识。它们的学习顺序应该是从前到后，因此最先学习的应该是HTML/CSS/JS（前端页面），这部分内容你可以去上面的那个runoob网站上找。</p>
<p>你可以试着自己写一些页面，当然，你可以尽你最大的努力让它变得最漂亮。这部分内容对于后端Java来说，理论上不是特别重要，但至少要达到可以自己写出一些简单页面的水平。接下来，你需要学习的是Servlet/JSP（J2EE）部分，这部分是Java后端开发必须非常精通的部分，因此这部分是这三部分中最需要花精力的，而且这个时候，你要学会使用开发工具，而不能再使用记事本了，可以选择eclipse。当你下载安装好eclipse以后，请视频中的教程一步一步去学习，一定要多动手。关于Servlet/Jsp部分视频的选择，业界比较认可马士兵的视频，因此推荐给大家。</p>
<p>当然了，我本人并没有看过他的视频，所以不好说的太绝对，如果大家自己有更好的选择，可以坚持自己的，不要被我干扰。原本我也是打算出教学视频的，但是由于时间问题，还是决定放弃了。但是如果你看视频的过程中遇到了问题，欢迎来我的交流群提问，或者去斗鱼观看我的直播提出你的问题，直播地址和群号都在我的个人博客左侧。最后一步，你需要学会使用数据库，mysql是个不错的入门选择，而且Java领域里主流的关系型数据库就是mysql。这部分一般在你学习Servlet/Jsp的时候，就会接触到的，其中的JDBC部分就是数据库相关的部分。你不仅要学会使用JDBC操作数据库，还要学会使用数据库客户端工具，比如navicat，sqlyog，二选一即可。</p>
<p>三、开发框架当你学会以上内容以后，这个时候你还不足以参加工作，你还需要继续深造。公司里为了提高开发的效率，会使用一些Java Web框架，因此你还需要学习一些开发框架。目前比较主流的是SSM框架，即spring、springmvc、mybatis。你需要学会这三个框架的搭建，并用它们做出一个简单的增删改查的Web项目。你可以不理解那些配置都是什么含义，以及为什么要这么做，这些留着后面你去了解。</p>
<p>但你一定要可以快速的利用它们三个搭建出一个Web框架，你可以记录下你第一次搭建的过程，相信我，你一定会用到的。还要提一句的是，你在搭建SSM的过程中，可能会经常接触到一个叫maven的工具。这个工具也是你以后工作当中几乎是必须要使用的工具，所以你在搭建SSM的过程中，也可以顺便了解一下maven的知识。在你目前这个阶段，你只需要在网络上了解一下maven基本的使用方法即可，一些高端的用法随着你工作经验的增加，会逐渐接触到的。<br>关于学习SSM框架的地址给大家推荐一个，这里面有视频，大家可以去观看。</p>
<p>四、找工作当你完成开发框架的学习以后，你就该找工作了，在校的找实习，毕业的找全职。与此同时，在找工作的同时，你不应该停下你的学习，准确的说，是你在以后都不能停下学习。上面这些内容你只是囫囵吞枣的学会了使用，你可以逐步尝试着去了解更多的东西，网络是你最重要的老师。
　　</p>
<h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>对于参加工作一年以内的同学。恭喜你，这个时候，你已经拥有了一份Java的工作。这个阶段是你成长极快的阶段，而且你可能会经常加班。但是加班不代表你就可以松懈了，永远记得我说的那句话，从你入行那一刻起，你就要不停的学习。在这一年里，你至少需要看完《Java编程思想》这本书。这本书的内容是帮助你对于Java有一个更加深入的了解，是Java基础的升级版。这本书很厚，当初看这本书，我花了整整三个月。正常速度的话，应该可以在半年左右看完。我这里不要求过高，只要你在一年以内把这本书看完即可。当然了，我所说的看完，是充分吸收，而不是读一遍就完事了，因此有些内容你可能会看不止一遍。总而言之，这个阶段的核心学习思想就是，在工作中实践，并且更加深入的了解Java基础。<br>　　<br>对于参加工作1年到2年的同学。这部分时间段的同学，已经对Java有了一个更加深入的了解。但是对于面向对象的体会可能还不够深刻，编程的时候还停留在完成功能的层次，很少会去考虑设计的问题。于是这个时候，设计模式就来了。我当时看的是《大话设计模式》这本书，并且写了完整版的设计模式博客。因此，我要求大家，最多在你工作一年的时候，必须开始写博客，而设计模式就是你博客的开端。</p>
<p>请记住，我所提的基本都是最低要求，因此不要有任何松懈的心理，否则五年后，你不要去羡慕别人高于你的工资，也不要去羡慕别人进入了某公司。这一年，你必须对于设计模式了如指掌，《大话设计模式》可以作为你的开端。此外，设计模式并不是你这一年唯一的任务，你还需要看一些关于代码编写优化的书。比如《重构 改善既有代码的设计》，《effective java》。总而言之，这个阶段，你的核心任务就是提高你的代码能力，要能写出一手优雅的代码。
　　</p>
<h3 id="第三部分"><a href="#第三部分" class="headerlink" title="第三部分"></a>第三部分</h3><p>对于参加工作2年到3年的同学有的同学在这个时候觉得自己已经很牛逼了，于是忍不住开始慢慢松懈。请记住，你还嫩的多。这个阶段，有一本书是你必须看的，它叫做《深入理解Java虚拟机》。这本书绝对是Java开发者最重要的书，没有之一。在我眼里，这本书的重要性还要高于《Java编程思想》。这本书的内容是帮助你全面的了解Java虚拟机，在这个阶段，你一定已经知道Java是运行在JVM之上的。所以，对于JVM，你没有任何理由不了解它。<br>　　<br>另外，在过去2年的工作当中，你肯定或多或少接触过并发。这个时候，你应该去更加深入的了解并发相关的知识，而这部分内容，我比较推荐《Java并发编程实战》这本书。只要你把这本书啃下来了，并发的部分基本已经了解了十之六七。与此同时，这个阶段你要做的事情还远不止如此。这个时候，你应该对于你所使用的框架应该有了更深入的了解，对于Java的类库也有了更深入的了解。</p>
<p>因此，你需要去看一些JDK中的类的源码，也包括你所使用的框架的源码。这些源码能看懂的前提是，你必须对设计模式非常了解。否则的话，你看源码的过程中，永远会有这样那样的疑问，这段代码为什么要这么写？为什么要定义这个接口，它看起来好像很多余？由此也可以看出，这些学习的过程是环环相扣的，如果你任何一个阶段拉下来了，那么你就真的跟不上了，或者说是一步慢步步慢。而且我很负责的告诉你，我在这个阶段的时候，所学习的东西远多于这里所罗列出来的。<br>　　<br>因此千万不要觉得你已经学的很多了，我所说的这些都只是最低要求，不光是我，很多人在这个时间段所学习的内容都远超本文的范围。如果你不能跟上节奏的话，若干年后，如果不是程序猿市场还不错的话，你很可能不仅仅是工资比别人低，公司没别人好，而是根本就找不到工作。总而言之，这个阶段，你需要做的是深入了解Java底层和Java类库（比如并发那本书就是Java并发包java.concurrent的内容），也就是JVM和JDK的相关内容。而且还要更深入的去了解你所使用的框架，方式比较推荐看源码或者看官方文档。另外，还有一种学习的方式，在2年这个阶段，也应该启用了，那就是造轮子。不要听信那套“不要重复造轮子”的论调，那是公司为了节省时间成本编造出来的。重复造轮子或许对别人没有价值，因为你造的轮子可能早就有了，而且一般情况下你造出来的轮子还没有现存的好。<br>　　<br>但是对别人没有价值，不代表对你自己没有价值。一个造轮子的过程，是一个从无到有的过程。这个过程可以对你进行系统的锻炼，它不仅考察你的编码能力，还考察你的框架设计能力，你需要让你的轮子拥有足够好的扩展性、健壮性。而且在造轮子的过程中，你会遇到各种各样的难题，这些难题往往又是你学习的契机。当你把轮子造好的时候，你一定会发现，其实你自己收获了很多。所以，这个阶段，除了上面提到的了解JVM、JDK和框架源码以外，也请你根据别人优秀的源码，去造一个任何你能够想象出来的轮子。</p>
</blockquote>
<h3 id="第四部分"><a href="#第四部分" class="headerlink" title="第四部分"></a>第四部分</h3><blockquote>
<p>参加工作3年到4年的同学这个阶段的同学，提升已经是很难了，而且这个阶段的学习往往会比较多样化。因为在前3年的过程中，你肯定或多或少接触过一些其它的技术，比如大数据、分布式缓存、分布式消息服务、分布式计算、软负载均衡等等。这些技术，你能精通任何一项，都将是你未来面试时巨大的优势，因此如果你对某一项技术感兴趣的话，<br>　　<br>这个时候可以深入去研究一下。这项技术不一定是你工作所用到的，但一定是相关的。而且在研究一门新技术时，切忌朝三暮四。有的同学今天去整整大数据，搞搞Hadoop、hbase一类的东西。过不了一段时间，就觉得没意思，又去研究分布式缓存，比如redis。然后又过不了一段时间，又去研究分布式计算，比如整整Mapreduce或者storm。结果到最后，搞得自己好像什么都会一样，在简历上大言不惭的写上大数据、分布式缓存、分布式计算都了解，其实任何一个都只是浮于表面。到时候面试官随便一问，就把你给识破了。<br>　　<br>一定要记住，作为一个程序猿，平日里所接触的技术可能会很多，但是想要让一门技术成为你的优势，那么一定是你对这门技术的了解强过绝大多数人才行。因此在这个阶段，你就不能再简单的去学习前3年的内容了，虽然前面的学习如果还不够深入的话依旧要继续，但这个时候你应该更多的考虑建立你的优势，也可以称为差异性。差异性相信不难理解，就是让你自己变得与众不同。你前面三年的学习足够你成为一名基本合格的Java开发者，但你离成为一名优秀的Java开发者还有很大的距离。<br>　　<br>所谓优秀，即能别人所不能。而你前三年所学习的内容，是很多做过几年的Java开发都能够掌握的。那么为了让自己有差异性，你就需要另辟蹊径，找一个方向深入研究下去，以期在将来，你能够成为这个领域的专家，比如分布式计算领域的专家，大数据领域的专家，并发领域的专家等等。此外，你除了建立你的差异性之外，还要去弥补你基础上的不足，直到现在，我都没有提及基础知识。原因是基础是很枯燥无味的，学的太早不仅容易懵逼，而且懵逼的同时还容易产生心理阴影，以至于以后再不想去研究这些基础。但基础又是你深入研究一些领域时所必须掌握的，比如你去研究分布式计算，你不懂算法你玩个毛毛？比如你去做分布式缓存，你对计算机系统的内存不了解，你如何去做缓存？</p>
<p>如果你的基础本来就非常强，那么恭喜你，相信你在之前的工作中已经充分体会到了这些基础对你的帮助。但我相信大部分人的基础都很薄弱，哪怕是科班毕业的人，很多人也不敢说自己当初的基础学的多么强大，比如算法、计算机系统原理、编译原理这些。但是每个人时间都是有限的，而且这些基础的书籍每一本读下来，没个一年半载的，还真拿不下来，因此还是要有所抉择的。虽然艺多不压身，但问题是艺多是有代价的，是需要你付出时间和精力的，而我个人更赞成在同等代价的情况下获取最大的收获。<br>　　<br>首先，我比较推崇的基础书籍有三本，分别是《深入理解计算机系统》，《tcp/ip详解 卷一、二、三》，《数据结构与算法》。其中TCP/IP有三本书，但我们这里把这三本看成是一本大书。这三本分别适合三种人，《深入理解计算机系统》比较适合一直从事Java Web开发和APP后端开发工作的人群。《tcp/ip详解 卷一、二、三》比较适合做网络编程的人群，比如你使用netty去开发的话，那么就要对TCP/IP有更深入的了解。而《数据结构与算法》这本书，则比较适合做计算研究工作的人，比如刚才提到的分布式计算。另外，我要强调的是，这里所说的适合，并不是其它两本对你就没有用。比如你做Java Web和APP后端开发，《tcp/ip详解 卷一、二、三》这本书对你的作用也是很大的。这里只是分出个主次关系而已，你要是时间足够的话，能把三本都精读那当然最好不过了。<br>　　<br>但如果时间有限的话，那么就先挑对你帮助最大的书去读。理论上来讲，这一年你能把这三本其中一本精读下来，就已经非常厉害了。有了基础，有了前面的工作经验，你就可以去开拓属于你的领域了。在这一年里，一定要规划好自己的领域，建立好自己的优势，制造出差异性。如果你对自己的领域不够清晰的话，随着你工作的时间日益增多，你接触的技术会越来越多，这个时候，你很容易被淹死在技术的海洋里，看似接触的技术越来越多，会用的也越来越多，但你毫无优势。有的同学可能会问，“我，我也不知道我的领域是什么啊？怎么办呢？”对于这种人，我只想说，“卧槽，这还问我？要不干脆我替你学习得了，好不好？”</p>
</blockquote>
<h3 id="第五部分"><a href="#第五部分" class="headerlink" title="第五部分"></a>第五部分</h3><blockquote>
<p>参加工作4年到5年的同学经过前面一年的历练，相信你在自己所钻研的领域已经有了自己一定的见解，这个时候，技术上你应该已经遇到瓶颈了。这个时候不要着急提高自己的技术，已经是时候提高你的影响力了，你可以尝试去一些知名的公司去提高你的背景，你可以发表一些文章去影响更多的人。当然，你也可以去Github创建一个属于你的开源项目，去打造自己的产品。<br>　　<br>这次的开源项目不同于之前的造轮子，你这个时候是真的要去尽量尝试造出来真正对别人有价值的轮子。技术学到这个阶段，很容易遇到瓶颈，而且往往达到一定程度后，你再深入下去的收效就真的微乎其微了，除非你是专门搞学术研究的。然而很可惜，大部分程序猿做不到这一步，那是科学家做的事情。这个时候提高影响力不仅仅是因为技术上容易遇到瓶颈，更多的是影响力可以给你创造更多的机会。程序猿在某种程度上和明星很像，一个好的电视剧和电影就可以成就一批明星，程序猿有的时候也是，一个好的项目就可以成就一群程序猿。比如国内几个脍炙人口的项目，像淘宝、支付宝、QQ、百度、微信等等。这每一个项目，都成就了一批程序猿。我敢说，这里面任何一个项目，如果你是它的核心开发，光是这样一个Title，就已经是你非常大的优势。更何况还不止如此，Title说到底也是个名头，更重要的是，这种项目在做的时候，对你的历练一定也是非常给力的。<br>　　<br>而你如果想要参与这样的项目，除了靠运气之外，影响力也是很重要的一个手段。比如你在分布式计算领域有一定的影响力，那么如果有什么好的关于分布式计算的项目，对方就很可能会邀请你。就算人家不邀请你，你自己主动去面试的时候，对方如果知道你在这个领域的影响力，也肯定会起到很大的作用，而这个作用，甚至可能会超过你现在的技术能力。所以，在这个阶段，你最大的任务是提高自己的影响力，为自己未来的十年工作生涯那一天做准备。如果你能够靠你的影响力和以前积累的技术，参与到一个伟大的项目当中，那么你后面的五年也就有着落了。当然了，我现在满打满算，做程序猿也就4年半不到，因此关于4年到5年这一部分，我的见解不一定是对的，就算是对的，也不一定是适合任何人的。<br>　　<br>所以，希望大家自己有的判断力，去决定到底该如何度过这一年。结语本文到此就基本结束了，整篇文章很长，但其实主要就说了两部分内容，一个是社招面试的准备，一个是Java生涯的学习。关于这两部分，我已经给出了自己的见解，但是还是那句话，每个人吸收知识的时候，都要有抽取精华，去除糟粕的能力。我所说的，可能有些是对的，有些是错的，有些是适合你的，有些是不太适合你的，你要自己能够判断。其实你在生活和工作当中也是一样的，你身边的人形形色色，有的人你喜欢，有的人你很讨厌。但其实你喜欢的人也有缺点，你讨厌的人也有优点。你要学会从你讨厌的人身上学会他的优点，千万不要一棒子打死，这只会让你失去很多学习成长的机会。好了，说了这么多了，就到此为止吧，希望本文可以帮助到作为程序猿或即将成为程序猿的你。</p>
</blockquote>
<p><strong>参考资料</strong><br><a href="http://www.cnblogs.com/huaxingtianxia/p/5724093.html" target="_blank" rel="external">一位资深程序员大牛给予Java初学者的学习路线建议</a></p>
<p>博客地址：<a href="http://www.cnblogs.com/huaxingtianxia/" target="_blank" rel="external">华行天下</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Java学习这一部分其实也算是今天的重点，这一部分用来回答很多群里的朋友所问过的问题，那就是我你是如何学习Java的，能不能给点建议？今天我是打算来点干货，因此咱们就不说一些学习方法和技巧了，直接来谈每个阶段要学习的内容甚至是一些书籍。这一部分的内
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Apache与Tomcat服务器的基本使用</title>
    <link href="http://yoursite.com/2017/04/07/Apache%E4%B8%8ETomcat%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/04/07/Apache与Tomcat服务器的基本使用/</id>
    <published>2017-04-07T05:24:40.000Z</published>
    <updated>2017-04-07T05:29:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Apache服务器的使用"><a href="#Apache服务器的使用" class="headerlink" title="Apache服务器的使用"></a>Apache服务器的使用</h3><ul>
<li>开启：sudo apachectl start</li>
<li>停止：sudo apachectl stop</li>
<li>重启：sudo apachectl restart</li>
<li>重启但不中断当前连接 sudo apachectl graceful</li>
</ul>
<p><strong>配置：在/private/etc目录下修改相关文件，如httpd.conf文件</strong></p>
<pre><code>1. 默认情况下使用http://127.0.0.1:80 访问/Library/WebServer/Documents目录下的资源 
2. 在/ScienceHistory/Sites文件夹中放入资源文件，使用http://127.0.0.1:80/\~ScienceHistory/进入上述的/ScienceHistory/Sites文件夹读取资源
</code></pre><h3 id="Tomcat服务器的使用"><a href="#Tomcat服务器的使用" class="headerlink" title="Tomcat服务器的使用"></a>Tomcat服务器的使用</h3><ul>
<li>开启：sudo startup.sh</li>
<li><p>停止：sudo shutdown.sh</p>
<ol>
<li>默认情况下使用<a href="http://127.0.0.1:8080,进入到上述路径/usr/local/apache-tomcat-8.0.30/webapps/ROOT目录下访问资源" target="_blank" rel="external">http://127.0.0.1:8080,进入到上述路径/usr/local/apache-tomcat-8.0.30/webapps/ROOT目录下访问资源</a> </li>
<li>在/usr/local/apache-tomcat-8.0.30/webapps路径下放入javaweb生成的资源,如<a href="http://127.0.0.1:8080/abc/123.mp4" target="_blank" rel="external">http://127.0.0.1:8080/abc/123.mp4</a> 文件等</li>
</ol>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Apache服务器的使用&quot;&gt;&lt;a href=&quot;#Apache服务器的使用&quot; class=&quot;headerlink&quot; title=&quot;Apache服务器的使用&quot;&gt;&lt;/a&gt;Apache服务器的使用&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;开启：sudo apachectl start&lt;
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Apache" scheme="http://yoursite.com/tags/Apache/"/>
    
      <category term="Tomcat" scheme="http://yoursite.com/tags/Tomcat/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android --- Activity转场动画(过渡动画)</title>
    <link href="http://yoursite.com/2017/01/06/Android%20---%20Activity%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB(%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB)/"/>
    <id>http://yoursite.com/2017/01/06/Android --- Activity转场动画(过渡动画)/</id>
    <published>2017-01-06T10:03:30.000Z</published>
    <updated>2017-01-06T10:06:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Google-Search-博文"><a href="#Google-Search-博文" class="headerlink" title="Google Search 博文"></a>Google Search 博文</h3><p><a href="http://www.jianshu.com/p/415a32976cc6" target="_blank" rel="external">Android开发之Activity转场动画</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Google-Search-博文&quot;&gt;&lt;a href=&quot;#Google-Search-博文&quot; class=&quot;headerlink&quot; title=&quot;Google Search 博文&quot;&gt;&lt;/a&gt;Google Search 博文&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http:
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="转场动画" scheme="http://yoursite.com/tags/%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB/"/>
    
      <category term="过渡动画" scheme="http://yoursite.com/tags/%E8%BF%87%E6%B8%A1%E5%8A%A8%E7%94%BB/"/>
    
      <category term="Activity" scheme="http://yoursite.com/tags/Activity/"/>
    
      <category term="Android 5.0+" scheme="http://yoursite.com/tags/Android-5-0/"/>
    
  </entry>
  
  <entry>
    <title>Android地图SDK</title>
    <link href="http://yoursite.com/2017/01/04/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%20-%20Android%E5%9C%B0%E5%9B%BESDK/"/>
    <id>http://yoursite.com/2017/01/04/百度地图 - Android地图SDK/</id>
    <published>2017-01-04T05:01:42.000Z</published>
    <updated>2017-04-07T05:33:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="Android地图SDK-v4-1-1"><a href="#Android地图SDK-v4-1-1" class="headerlink" title="Android地图SDK (v4.1.1)"></a>Android地图SDK (v4.1.1)</h3><blockquote>
<p><strong> Android地图SDK</strong>是一套基于Android 2.3及以上版本设备的应用程序接口。 您可以使用该套 SDK开发适用于Android系统移动设备的地图应用，通过调用<strong>地图SDK</strong>接口，您可以轻松访问百度地图服务和数据，构建功能丰富、交互性强的地图类应用程序。</p>
<p>自v4.0起，适配<strong>Android Wear</strong>，支持Android穿戴设备，新增室内图相关功能。</p>
<p>百度地图Android SDK提供的所有服务是免费的，接口使用无次数限制。您需<strong><a href="http://lbsyun.baidu.com/apiconsole/key" target="_blank" rel="external">申请密钥（key）</a></strong>后， 才可使用百度地图Android SDK。</p>
</blockquote>
<h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><h4 id="1-地图"><a href="#1-地图" class="headerlink" title="1. 地图"></a>1. 地图</h4><blockquote>
<p>提供<strong>地图展示</strong>和<strong>地图操作</strong>功能。</p>
</blockquote>
<ul>
<li>地图展示包括：普通地图（2D，3D）、卫星图和实时交通图；</li>
<li>地图操作：可通过接口或手势控制来实现地图的点击、双击、长按、缩放、旋转、改变视角等操作；</li>
<li>地图展示：开放高清4K地图显示。</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu1.png" alt=""></p>
<h4 id="2-POI检索"><a href="#2-POI检索" class="headerlink" title="2. POI检索"></a>2. POI检索</h4><blockquote>
<p>支持<strong>周边检索</strong>、<strong>区域检索</strong>、<strong>城市内检索</strong>和<strong>Place详情信息检索</strong>。</p>
</blockquote>
<ul>
<li>周边检索：以某一点为中心，指定距离为半径，根据用户输入的关键词进行POI检索；</li>
<li>区域检索：在指定矩形区域内、根据关键词进行POI检索；</li>
<li>城市内检索：在某一城市内，根据用户输入的关键字进行POI检索；</li>
<li>POI详情检索：根据POI的ID信息，检索该兴趣点的详情。</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu2.png" alt=""></p>
<h4 id="3-地理编码"><a href="#3-地理编码" class="headerlink" title="3. 地理编码"></a>3. 地理编码</h4><blockquote>
<p>提供<strong>地理坐标</strong>和<strong>实际地址</strong>之间相互转换的能力。</p>
</blockquote>
<ul>
<li>正向地理编码：实现了将中文地址或地名描述转换为地球表面上相应位置的功能；</li>
<li>反向地理编码：将地球表面的地址坐标转换为标准地址的过程。</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu3.png" alt=""></p>
<h4 id="4-线路规划"><a href="#4-线路规划" class="headerlink" title="4. 线路规划"></a>4. 线路规划</h4><blockquote>
<p>支持<strong>公交信息查询</strong>、<strong>公交换乘查询</strong>、<strong>公交/驾车/骑行/步行线路规划</strong>。</p>
</blockquote>
<ul>
<li>公交信息查询：可对公交详细信息进行查询；</li>
<li>公交换乘查询：根据起、终点，查询策略，进行线路规划方案；</li>
<li>驾车线路规划：提供不同策略，规划驾车路线；（支持设置途经点）</li>
<li>步行路径检索：支持步行路径的规划;</li>
<li>骑行路径检索：支持跨城骑行路径规划。</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu4.png" alt=""></p>
<h4 id="5-地图覆盖物"><a href="#5-地图覆盖物" class="headerlink" title="5. 地图覆盖物"></a>5. 地图覆盖物</h4><blockquote>
<p>百度地图SDK支持<strong>多种地图覆盖物</strong>，帮助您展示更丰富的地图。目前所支持的地图覆盖物有：<strong>定位图层</strong>、<strong>地图标注（Marker）</strong>、<strong>几何图形（点、折线、弧线、多边形等）</strong>、<strong>地形图图层</strong>、<strong>POI检索结果覆盖物</strong>、<strong>线路规划结果覆盖物</strong>、<strong>热力图图层</strong>、<strong>瓦片图层</strong>等。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu5.jpg" alt=""></p>
<h4 id="6-定位"><a href="#6-定位" class="headerlink" title="6. 定位"></a>6. 定位</h4><blockquote>
<p>采用<strong>GPS</strong>、<strong>WIFI</strong>、<strong>基站</strong>、<strong>IP混合定位模式</strong>，请使用<strong>Android定位SDK获取定位信息</strong>，使用<strong>地图SDK定位图层进行位置展示</strong>。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu6.png" alt=""></p>
<h4 id="7-离线地图"><a href="#7-离线地图" class="headerlink" title="7. 离线地图"></a>7. 离线地图</h4><blockquote>
<p>用户可以通过<strong>SDK在线下载离线包接口</strong>，下载离线地图包，使用离线地图可节省用户流量，提供更好的地图展示效果。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu7.png" alt=""></p>
<h4 id="8-调启百度地图"><a href="#8-调启百度地图" class="headerlink" title="8. 调启百度地图"></a>8. 调启百度地图</h4><blockquote>
<p>利用SDK接口，直接在本地打开百度地图客户端或WebApp，实现地图功能。 目前支持调启的功能有：POI周边检索、POI详情页面、步行线路规划、驾车线路规划、公交线路规划、驾车导航、步行导航、骑行导航。 （具体请参考开发指南中，<strong>计算工具</strong>章节内的介绍）</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu8.png" alt=""></p>
<h4 id="9-周边雷达"><a href="#9-周边雷达" class="headerlink" title="9. 周边雷达"></a>9. 周边雷达</h4><blockquote>
<p>周边雷达功能，是面向移动端开发者的一套SDK功能接口。同步支持Android和iOS端。它的本质是一个连接百度LBS开放平台前端SDK产品和后端LBS云的中间服务。开发者利用周边雷达功能，可以便捷的在自己的应用内，帮助用户实现查找周边跟“我”使同样一款App的人，这样一个功能。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu9.png" alt=""></p>
<h4 id="10-LBS云"><a href="#10-LBS云" class="headerlink" title="10. LBS云"></a>10. LBS云</h4><blockquote>
<p>百度地图LBS云是百度地图针对LBS开发者全新推出的平台级服务，不仅适用PC应用开发，同时适用移动设备应用的开发。</p>
<p>使用LBS云，可以实现移动开发者存储海量位置数据的服务器零成本及维护压力，且支持高效检索用户数据，且实现地图展现。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu10.png" alt=""></p>
<h4 id="11-特色功能"><a href="#11-特色功能" class="headerlink" title="11. 特色功能"></a>11. 特色功能</h4><blockquote>
<p>包括：<strong>短串分享</strong>、<strong>Place详情信息检索</strong>、<strong>热力图</strong>等。</p>
</blockquote>
<ul>
<li>短串分享：将POI搜索结果、驾车/公交/骑行/步行路线规划结果 或反地理编码结果生成短串，当其他用户点击短串即可打开手机上的百度地图客户端或者手机浏览器进行查看；</li>
<li>Place详情检索：根据POI的ID信息，检索该POI的详情；</li>
<li>热力图功能：开放热力图绘制能力，帮助开发者构建属于自己的热力图；</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu11.png" alt=""></p>
<h4 id="12-个性化地图"><a href="#12-个性化地图" class="headerlink" title="12. 个性化地图"></a>12. 个性化地图</h4><blockquote>
<p>自v3.7.0起，支持使用个性化地图模板，改变底图颜色和样式。</p>
</blockquote>
<ul>
<li>使用个性化模板，实现地图元素的颜色设置，地图元素包含大地、水系、草地、高速、普通道路、铁路、地铁，poi等，以及poi和道路的文字颜色设置。</li>
<li>通过可见属性，控制显示地图元素。</li>
</ul>
<blockquote>
<p>下个版本，我们将进一步优化此功能，让广大开发者可以通过可视化编辑器方式编辑样式模板。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu12.jpg" alt=""></p>
<h4 id="13-室内图"><a href="#13-室内图" class="headerlink" title="13. 室内图"></a>13. 室内图</h4><blockquote>
<p>自v4.0起，百度地图SDK室内图功能正式上线，辅助开发者实现全新的地理位置服务体验，室内地图与百度地图App同步更新。</p>
</blockquote>
<ul>
<li>支持的公众建筑包含购物商场、机场和火车站等交通枢纽，医院等，覆盖全国约600个大型购物中心，覆盖类型和城市还在持续增加中。</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu13.png" alt=""></p>
<h4 id="14-Android-Wear"><a href="#14-Android-Wear" class="headerlink" title="14. Android Wear"></a>14. Android Wear</h4><blockquote>
<p>自v4.0起，适配Android Wear，支持Android穿戴设备。</p>
</blockquote>
<ul>
<li>适配穿戴设备显示屏，支持地图显示、POI检索、路线规划等全部功能</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu14.png" alt=""></p>
<h3 id="获取密钥"><a href="#获取密钥" class="headerlink" title="获取密钥"></a>获取密钥</h3><p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu15.png" alt=""></p>
<blockquote>
<p>需要创建一个应用，便可以获得该应用的<strong>访问应用（AK）</strong>密钥。</p>
</blockquote>
<h3 id="开发指南"><a href="#开发指南" class="headerlink" title="开发指南"></a>开发指南</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><strong>什么是百度地图Android SDK?</strong></p>
<blockquote>
<p>百度地图 Android SDK是一套基于Android 2.1及以上版本设备的应用程序接口， 您可以通过该接口实现丰富的LBS功能：</p>
</blockquote>
<ul>
<li>地图：提供地图（2D、3D）的展示和缩放、平移、旋转、改变视角等地图操作；</li>
<li>室内图：提供展示<strong>公众建筑物室内地图</strong>的展示功能；</li>
<li>Android Wear：适配Android Wear，支持Android穿戴设备；</li>
<li>POI检索：可根据关键字，对POI数据进行周边、区域和城市内三种检索；</li>
<li>室内POI检索：支持设置城市和当前建筑物的室内POI检索；</li>
<li>地理编码：提供地理坐标和地址之间相互转换的能力；</li>
<li>线路规划：支持公交信息查询、公交换乘查询、驾车线路规划和步行路径检索；</li>
<li>覆盖物：提供多种地图覆盖物（自定义标注、几何图形、文字绘制、地形图图层、热力图图层等），满足开发者的各种需求；</li>
<li>定位：采用多种定位模式，使用定位SDK获取位置信息，使用地图SDK我的位置图层进行位置展示；</li>
<li>离线地图：支持使用离线地图，节省用户流量，同时为用户带来更好的地图体验；</li>
<li>调启百度地图：利用SDK接口，直接在本地打开百度地图客户端或WebApp，实现地图功能;</li>
<li>周边雷达：利用周边雷达功能，开发者可在App内低成本、快速实现查找周边使用相同App的用户位置的功能;</li>
<li>LBS云检索：支持用户检索存储在LBS云内的自有POI数据，并展示；</li>
<li>瓦片图层：支持开发者在地图上添加自有瓦片数据；</li>
<li>特色功能：提供短串分享、Place详情检索、热力图等特色功能，帮助开发者搭建功能更加强大的应用；</li>
</ul>
<p><strong>面向的读者</strong></p>
<blockquote>
<p>百度地图SDK是提供给具有一定Android编程经验和了解面向对象概念的读者使用。此外，读者还应该对<strong>地图的基本知识</strong>有一定的了解。在使用中遇到任何问题，都可以通过<a href="http://bbs.lbsyun.baidu.com/" target="_blank" rel="external">API论坛</a>。</p>
</blockquote>
<p><strong>获取定制的百度地图SDK</strong></p>
<blockquote>
<p>开发者可在百度地图Android SDK的下载页面下载到最新版的地图SDK，下载地址为：<a href="http://developer.baidu.com/map/index.php?title=androidsdk/sdkandev-download" target="_blank" rel="external">http://developer.baidu.com/map/index.php?title=androidsdk/sdkandev-download</a>.</p>
<p>为了给开发者带来更优质的地图服务、满足开发者灵活使用SDK的需求，百度地图SDK自v2.3.0起，采用了<strong>可定制</strong>的形式为用户提供开发包。 百度地图SDK按功能可分为：基础地图、检索功能、LBS云检索、计算工具和周边雷达五个部分，开发者可根据自身的实际需求，任意组合这五种功能，点击下载页面的“自定义下载”， 即可下载相应的开发包来完成自己的应用开发。</p>
</blockquote>
<ul>
<li>基础地图：包括基本矢量地图、卫星图、实时路况图、室内图、适配Android Wear，各种地图覆盖物，瓦片图层，OpenGL绘制能力。此外还包括各种与地图相关的操作和事件监听；</li>
<li>检索功能：包括POI检索（周边、区域、城市内），室内POI检索，Place详情检索，公交信息查询，路线规划（驾车、步行、公交），地理编码/反地理编码，在线建议查询，短串分享等；</li>
<li>LBS云检索：包括LBS云检索（周边、区域、城市内、详情）；</li>
<li>计算工具：包括计算两点之间距离、计算矩形面积、坐标转换、调启百度地图客户端、判断点和圆/多边形位置关系、本地收藏夹等功能；</li>
<li>周边雷达：包含位置信息上传和检索周边相同应用的用户位置信息功能；</li>
</ul>
<blockquote>
<p>注：本套开发指南是针对默认的全功能包编写，开发者在使用定制化的SDK进行开发时，请参考开发指南中相对应的章节获取更多信息。</p>
</blockquote>
<p><strong>兼容性</strong></p>
<blockquote>
<p>支持Android 2.1 及以上系统。</p>
</blockquote>
<h4 id="申请密钥"><a href="#申请密钥" class="headerlink" title="申请密钥"></a>申请密钥</h4><p><strong>简介</strong></p>
<blockquote>
<p>在使用百度地图SDK为您提供的各种LBS能力之前，您需要获取百度地图移动版的<strong>开发密钥</strong>，<strong>该密钥与您的百度账户相关联</strong>。因此，您必须先有百度帐户，才能获得开发密钥。并且，该<strong>密钥与您创建的过程名称有关</strong>，具体流程请参考如下介绍。</p>
<p>Key的申请地址为：<a href="http://lbsyun.baidu.com/apiconsole/key" target="_blank" rel="external">http://lbsyun.baidu.com/apiconsole/key</a></p>
</blockquote>
<p><strong>注意</strong></p>
<ol>
<li><strong>每个Key唯一对应一个APP</strong>，如果您的APP<strong>修改了包名</strong>或者<strong>发布的时候打包的签名文件改变了</strong>，则改变前后的APP被视为两个APP。因此，多个APP【包括一份代码多个包名打包】需申请多个与之对应的Key；</li>
<li>在同一个工程中同时使用百度地图SDK、定位SDK、导航SDK 和全景SDK的全部或者任何组合，可以<strong>共用同一个key</strong>；</li>
<li>如果您在Android SDK开发过程中使用了LBS云服务（如LBS云检索功能），则需要为该服务<strong>单独申请一个“服务端”类型的key</strong>，代码中调用LBS云服务接口时使用此key即可，注意：此key一定要和AndroidManifest.xml中配置API_KEY的key区分开；</li>
<li>Android SDK自v2.1.3版本开始采用了全新的Key验证体系，v2.1.3之前的版本不再维护，如果升级到新版本SDK（v2.1.3及之后的版本）时需要在API控制台重新申请key进行替换。</li>
</ol>
<p><strong>申请步骤</strong></p>
<ol>
<li>登录百度账号</li>
</ol>
<blockquote>
<p>访问API控制台页面，若您未登录百度账号，将会进入百度账号登录页面，如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu16.png" alt=""></p>
<ol>
<li>登陆API控制台</li>
</ol>
<blockquote>
<p>登录会跳转到API控制台服务，具体如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu17.png" alt=""></p>
<ol>
<li>创建应用</li>
</ol>
<blockquote>
<p>点击”创建应用”，进入创建AK页面，输入应用名称，将应用类型改为：“Android SDK”：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu18.png" alt=""><br><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu19.png" alt=""></p>
<ol>
<li>配置应用</li>
</ol>
<blockquote>
<p>在应用类型选为“Android SDK”后，需要配置应用的安全码，如下图所示：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu20.png" alt=""></p>
<ol>
<li>获取安全码</li>
</ol>
<blockquote>
<p>安全码的组成规则为：Android签名证书的sha1值+packagename , 例如：</p>
<p>SHA1：BB:0D:AC:74:D3:21:E1:43:67:71:9B:62:91:AF:A1:66:6E:44:5D:75<br>包名：com.baidumap.demo</p>
<p>Android应用获取包名packagename，AS工程获取位置:</p>
<p>包名需要在文件<strong>build.gradle中查询 applicationId</strong>，并确保 applicationId 与在 AndroidManifest.xml 中定义的包名一致</p>
<p>在文件build.gradle中查询 applicationId，方法如图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu21.png" alt=""></p>
<blockquote>
<p>Android签名证书的sha1值获取方式有两种：</p>
</blockquote>
<ul>
<li><p>第一种方法：使用keytool</p>
<ul>
<li><p>第1步：运行进入控制台</p>
<p>  <img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu22.png" alt=""></p>
</li>
<li><p>第2步：定位到.android文件夹下，输入cd .android</p>
<p>  <img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu23.png" alt=""></p>
</li>
<li><p>第3步：输入keytool -list -v -keystore debug.keystore，会得到三种指纹证书，选取SHA1类型的证书（密钥口令是android），例如：其中keytool为jdk自带工具；keystorefile为Android 签名证书文件</p>
<p>  <img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu24.png" alt=""></p>
</li>
</ul>
</li>
<li><p>第二种方法：在AS中，点击下图signingReport运行Task，即可。</p>
<p>  <img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu25.png" alt=""><br>  <img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu26.png" alt=""></p>
</li>
</ul>
<blockquote>
<p>其中“SHA1”值即为Android签名证书的sha1值</p>
</blockquote>
<ol>
<li>成功创建KEY</li>
</ol>
<blockquote>
<p>在输入安全码后，点击“确定”完成应用的配置工作，您将会得到一个创建的Key，请妥善保管您所申请的Key。到这您就可以使用新Key来完成您的开发工作了。</p>
</blockquote>
<h4 id="配置环境及发布"><a href="#配置环境及发布" class="headerlink" title="配置环境及发布"></a>配置环境及发布</h4><p><strong>开发工具</strong></p>
<blockquote>
<p>Android开发工具很多，主要是Eclipse和Android Studio两种开发工具。下面将主要针对Android Studio介绍一下地图SDK的工程配置方法。Eclipse的工程配置方法参照<a href="http://lbsyun.baidu.com/index.php?title=androidsdk/guide/buildproject" target="_blank" rel="external">官方文档</a>。</p>
</blockquote>
<p><strong>Android Studio工程配置方法</strong></p>
<blockquote>
<p>第一步：在工程<strong>app/libs</strong>目录下放入<strong>baidumapapi_vX_X_X.jar</strong>包，在<strong>src/main/</strong>目录下新建<strong>jniLibs</strong>目录，工程会自动加载src目录下的<strong>so动态库</strong>，放入libBaiduMapSDK_vX_X_X_X.so如下图所示，注意jar和so的前3位版本号必须一致，并且保证使用一次下载的文件夹中的两个文件，不能不同功能组件的jar或so交叉使用。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu27.png" alt=""></p>
<blockquote>
<p>第二步：工程配置还需要把jar包集成到自己的工程中，如图上图所示，放入libs目录下。对于每个jar文件，右键-选择Add As Library，导入到工程中。对应在build.gradle生成工程所依赖的jar文件说明，如图所示：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu28.png" alt=""></p>
<blockquote>
<p>app模块下的build.gradle文件如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu29.png" alt=""></p>
<p><strong>应用混淆</strong></p>
<p>集成地图SDK的应用，在打包混淆的时候，需要注意与地图SDK相关的方法不可被混淆。混淆方法如下：</p>
<pre><code>-keep class com.baidu.** {*;}
-keep class vi.com.** {*;}    
-dontwarn com.baidu.**
</code></pre><blockquote>
<p>保证百度类不能被混淆，否则会出现网络不可用等运行时异常</p>
</blockquote>
<h4 id="Hello-BaiduMap"><a href="#Hello-BaiduMap" class="headerlink" title="Hello BaiduMap"></a>Hello BaiduMap</h4><p><strong>显示百度地图</strong></p>
<blockquote>
<p>百度地图SDK为开发者提供了便捷的显示百度地图数据的接口，通过以下几步操作，即可在您的应用中使用百度地图数据：</p>
</blockquote>
<ul>
<li>创建并配置工程（具体方法参见上部分内容）；</li>
<li><p>在AndroidManifest中添加开发密钥、所需权限等信息；</p>
<ul>
<li><p>在application中添加开发密钥</p>
<application><br>  \<meta-data android:name="com.baidu.lbsapi.API\_KEY" android:value="开发者 key" \=""><br></meta-data></application>
</li>
</ul>
</li>
<li><p>添加所需权限</p>
<p>  \<uses-permission android:name="android.permission.ACCESS\_NETWORK\_STATE" \=""><br>  \<uses-permission android:name="android.permission.INTERNET" \=""><br>  \<uses-permission android:name="com.android.launcher.permission.READ\_SETTINGS" \=""><br>  \<uses-permission android:name="android.permission.WAKE\_LOCK" \=""><br>  \<uses-permission android:name="android.permission.CHANGE\_WIFI\_STATE" \=""><br>  \<uses-permission android:name="android.permission.ACCESS\_WIFI\_STATE" \=""><br>  \<uses-permission android:name="android.permission.GET\_TASKS" \=""><br>  \<uses-permission android:name="android.permission.WRITE\_EXTERNAL\_STORAGE" \=""><br>  \<uses-permission android:name="android.permission.WRITE\_SETTINGS" \=""></uses-permission></uses-permission></uses-permission></uses-permission></uses-permission></uses-permission></uses-permission></uses-permission></uses-permission></p>
</li>
<li><p>在布局xml文件中添加地图控件</p>
<p>  \&lt;com.baidu.mapapi.map.MapView  </p>
<pre><code>android:id=&quot;@+id/bmapView&quot;  
android:layout\_width=&quot;match\_parent&quot;  
android:layout\_height=&quot;match\_parent&quot;  
android:clickable=&quot;true&quot; /\&gt;
</code></pre></li>
<li><p>在应用程序创建时<strong>初始化 SDK引用的Context 全局变量</strong></p>
<p>  public class MainActivity extends Activity {  </p>
<pre><code>@Override  
protected void onCreate(Bundle savedInstanceState) {  
    super.onCreate(savedInstanceState);  
    //在使用SDK各组件之前初始化context信息，传入ApplicationContext  
    //注意该方法要再setContentView方法之前实现  
    SDKInitializer.initialize(getApplicationContext());  
    setContentView(R.layout.activity\_main);  
}  
</code></pre><p>  }</p>
</li>
</ul>
<p><strong>注意：在SDK各功能组件使用之前都需要调用SDKInitializer.initialize(getApplicationContext());，因此我们建议该方法放在Application的初始化方法中</strong></p>
<ul>
<li><p>创建地图Activity，管理地图生命周期</p>
<p>  public class MainActivity extends Activity {  </p>
<pre><code>MapView mMapView = null;  
@Override  
protected void onCreate(Bundle savedInstanceState) {  
    super.onCreate(savedInstanceState);  
    //在使用SDK各组件之前初始化context信息，传入ApplicationContext  
    //注意该方法要再setContentView方法之前实现  
    SDKInitializer.initialize(getApplicationContext());  
    setContentView(R.layout.activity\_main);  
    //获取地图控件引用  
    mMapView = (MapView) findViewById(R.id.bmapView);  
}  
@Override  
protected void onDestroy() {  
    super.onDestroy();  
    //在activity执行onDestroy时执行mMapView.onDestroy()，实现地图生命周期管理  
    mMapView.onDestroy();  
}  
@Override  
protected void onResume() {  
    super.onResume();  
    //在activity执行onResume时执行mMapView. onResume ()，实现地图生命周期管理  
    mMapView.onResume();  
    }  
@Override  
protected void onPause() {  
    super.onPause();  
    //在activity执行onPause时执行mMapView. onPause ()，实现地图生命周期管理  
    mMapView.onPause();  
    }  
}
</code></pre></li>
</ul>
<blockquote>
<p>完成以上步骤后，运行程序，即可在您的应用中显示如下地图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/baiduditu30.jpg" alt=""></p>
<blockquote>
<p>以上的例子为大家介绍了如何构建一个基础的地图页面。地图控件自v2.3.5版本起，<strong>支持多实例</strong>，即开发者可以在一个页面中建立多个地图对象，并且针对这些对象分别操作且不会产生相互干扰。具体使用方法请参考MutiMapViewDemo中的相关介绍。</p>
<p>此外，自v2.3.5版本开始。MapView控件还增加了对Fragment框架的支持。用户可以使用<strong>SupportMapFragment</strong>控件完成相应框架内的开发工作（详见<strong>MapFragmentDemo</strong>）。</p>
</blockquote>
<h4 id="基础地图"><a href="#基础地图" class="headerlink" title="基础地图"></a>基础地图</h4><p><strong>简介</strong></p>
<blockquote>
<p>开发者可利用SDK提供的接口，使用百度为您提供的<strong>基础地图数据</strong>。目前百度地图SDK所提供的<strong>地图等级为3-21级</strong>，所包含的信息有<strong>建筑物、道路、河流、学校、公园等内容</strong>。</p>
<p>V3.7.0起，地图支持缩放至21级，暂不支持卫星图、热力图、交通路况图层的21级显示，打开以上类型图层，地图会自动缩放到20级。</p>
<p>所有叠加或覆盖到地图的内容，我们统称为<strong>地图覆盖物</strong>。如标注、矢量图形元素（包括：折线、多边形和圆等）、定位图标等。覆盖物拥有自己的地理坐标，当您拖动或缩放地图时，它们会相应的移动。</p>
<p>百度地图SDK为广大开发者提供的<strong>基础地图和上面的各种覆盖物元素</strong>，具有一定的层级压盖关系，具体如下（从下至上的顺序）：</p>
</blockquote>
<ul>
<li>1、基础底图（包括底图、底图道路、卫星图、室内图等）；</li>
<li>2、瓦片图层（TileOverlay）；</li>
<li>3、地形图图层（GroundOverlay）；</li>
<li>4、热力图图层（HeatMap）；</li>
<li>5、实时路况图图层（BaiduMap.setTrafficEnabled(true);）；</li>
<li>6、百度城市热力图（BaiduMap.setBaiduHeatMapEnabled(true);）；</li>
<li>7、底图标注（指的是底图上面自带的那些POI元素）；</li>
<li>8、几何图形图层（点、折线、弧线、圆、多边形）；</li>
<li>9、标注图层（Marker），文字绘制图层（Text）；</li>
<li>10、指南针图层（当地图发生旋转和视角变化时，默认出现在左上角的指南针）；</li>
<li>11、定位图层（BaiduMap.setMyLocationEnabled(true);）；</li>
<li>12、弹出窗图层（InfoWindow）；</li>
<li>13、自定义View（MapView.addView(View);）；</li>
</ul>
<p><strong>地图类型</strong></p>
<blockquote>
<p>百度地图Android SDK为您提供了<strong>3种类型的地图资源</strong>（<strong>普通矢量地图、卫星图和空白地图</strong>），开发者可以利用BaiduMap中的mapType()方法来设置地图类型。核心代码如下：</p>
</blockquote>
<pre><code>mMapView = (MapView) findViewById(R.id.bmapView);  
mBaiduMap = mMapView.getMap();  

//普通地图  
mBaiduMap.setMapType(BaiduMap.MAP\_TYPE\_NORMAL);  

//卫星地图  
mBaiduMap.setMapType(BaiduMap.MAP\_TYPE\_SATELLITE);  

//空白地图, 基础地图瓦片将不会被渲染。在地图类型中设置为NONE，将不会使用流量下载基础地图瓦片图层。使用场景：与瓦片图层一起使用，节省流量，提升自定义瓦片图下载速度。
mBaiduMap.setMapType(BaiduMap.MAP\_TYPE\_NONE);
</code></pre><p><strong>实时交通图</strong></p>
<blockquote>
<p>当前，全国范围内已支持多个城市实时路况查询，且会陆续开通其他城市。在地图上打开实时路况的核心代码如下：</p>
</blockquote>
<pre><code>mMapView = (MapView) findViewById(R.id.bmapView);  
mBaiduMap = mMapView.getMap();  
//开启交通图   
mBaiduMap.setTrafficEnabled(true);
</code></pre><p><strong>百度城市热力图</strong></p>
<blockquote>
<p>百度地图SDK继为广大开发者开放<strong>热力图本地绘制能力</strong>之后，再次进一步开放百度自有数据的<strong>城市热力图层</strong>，帮助开发者构建形式更加多样的移动端应用。</p>
<p>百度城市热力图的性质及使用与实时交通图类似，只需要简单的接口调用，即可在地图上展现样式丰富的百度城市热力图。</p>
<p>在地图上开启百度城市热力图的核心代码如下：</p>
</blockquote>
<pre><code>mMapView = (MapView) findViewById(R.id.bmapView);  
mBaiduMap = mMapView.getMap();  
//开启交通图   
mBaiduMap.setBaiduHeatMapEnabled(true);
</code></pre><p><strong>地图控制和手势</strong></p>
<ul>
<li><p>地图控制</p>
<ul>
<li><p>地图Logo</p>
<blockquote>
<p>默认在左下角显示，不可以移除。<br>通过mMapView.setLogoPosition(LogoPosition.logoPostionleftBottom)方法，使用枚举类型控制显示的位置，共支持6个显示位置(左下，中下，右下，左上，中上，右上)。<br>地图Logo不允许遮挡，可通过mBaiduMap.setPadding(paddingLeft, paddingTop, paddingRight, paddingBottom)方法可以设置地图边界区域，来避免UI遮挡。<br>其中参数paddingLeft、paddingTop、paddingRight、paddingBottom参数表示距离屏幕边框的左、上、右、下边距的距离，单位为屏幕坐标的像素密度。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>指南针</p>
<blockquote>
<p>指南针默认为开启状态，可以关闭显示 。</p>
</blockquote>
</li>
<li><p>比例尺</p>
<blockquote>
<p>比例尺默认为开启状态，可以关闭显示。同时支持设置MaxZoomLevel和MinZoomLevel，可通过mMapView.getMapLevel获取当前地图级别下比例尺所表示的距离大小。</p>
</blockquote>
</li>
<li><p>地图手势</p>
<ul>
<li><p>地图平移</p>
<blockquote>
<p>控制是否启用或禁用平移的功能，默认开启。如果启用，则用户可以平移地图</p>
</blockquote>
</li>
</ul>
</li>
<li><p>地图缩放</p>
<blockquote>
<p>控制是否启用或禁用缩放手势，默认开启。如果启用，用户可以双指点击或缩放地图视图。</p>
</blockquote>
</li>
<li><p>地图俯视（3D）</p>
<blockquote>
<p>控制是否启用或禁用俯视（3D）功能，默认开启。如果启用，则用户可使用双指 向下或向上滑动到俯视图。</p>
</blockquote>
</li>
<li><p>地图旋转</p>
<blockquote>
<p>控制是否启用或禁用地图旋转功能，默认开启。如果启用，则用户可使用双指 旋转来旋转地图。</p>
</blockquote>
</li>
<li><p>禁止所有手势</p>
<blockquote>
<p>控制是否一并禁止所有手势，默认关闭。如果启用，所有手势都将被禁用。</p>
</blockquote>
</li>
<li><p>标注覆盖物</p>
<ul>
<li><p>地图标注</p>
<blockquote>
<p>开发者可根据自己实际的业务需求，利用标注覆盖物，在地图指定的位置上添加标注信息。具体实现方法如下：</p>
</blockquote>
<p>//定义Maker坐标点<br>LatLng point = new LatLng(39.963175, 116.400244);<br>//构建Marker图标<br>BitmapDescriptor bitmap = BitmapDescriptorFactory<br>  .fromResource(R.drawable.icon_marka);<br>//构建MarkerOption，用于在地图上添加Marker<br>OverlayOptions option = new MarkerOptions()<br>  .position(point)<br>  .icon(bitmap);<br>//在地图上添加Marker，并显示<br>mBaiduMap.addOverlay(option);</p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>针对已经添加在地图上的标注，可采用如下方式进行手势拖拽：</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;Android地图SDK-v4-1-1&quot;&gt;&lt;a href=&quot;#Android地图SDK-v4-1-1&quot; class=&quot;header
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="百度地图" scheme="http://yoursite.com/tags/%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE/"/>
    
      <category term="SDK" scheme="http://yoursite.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>Git使用详解</title>
    <link href="http://yoursite.com/2016/12/29/Git%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/12/29/Git使用详解/</id>
    <published>2016-12-29T10:37:08.000Z</published>
    <updated>2016-12-30T11:14:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="初识版本控制工具Git"><a href="#初识版本控制工具Git" class="headerlink" title="初识版本控制工具Git"></a>初识版本控制工具Git</h3><blockquote>
<p>Git是一个开源的分布式版本控制工具，由Linux操作系统的作者Linus Torvalds(林纳斯·托瓦兹)进行开发，其初衷是为了更好的管理Linux内核工程项目，而随着时间的发展，目前已被广泛应用于各种大中小型的项目中。</p>
</blockquote>
<p><strong>Git的工作原理图</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/GitProcess.jpg" alt=""></p>
<h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><ul>
<li>Linux系统</li>
</ul>
<blockquote>
<p>由于Linux和Git出自同一位作者，所以在Linux上是进行安装是最简单方便的，如果你是Ubuntu的系统，只需打开shell界面，输入：</p>
</blockquote>
<pre><code>sudo apt-get install git-core
</code></pre><blockquote>
<p>回车输入密码，即可完成Git的安装。</p>
</blockquote>
<ul>
<li>Windows和Mac系统</li>
</ul>
<blockquote>
<p>参考廖雪峰的官网的<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="external">这篇文章</a></p>
</blockquote>
<h4 id="创建代码仓库"><a href="#创建代码仓库" class="headerlink" title="创建代码仓库"></a>创建代码仓库</h4><p><strong>注意</strong></p>
<blockquote>
<p>虽说Git的操作可以在图形界面上进行操作，AS也支持图形化的形式操作Git，但还是建议在在命令行窗口进行相关操作。Git命令是在各种操作系统下通用技能，也是程序员必要的技能修养，图形化是你在Git命令熟练掌握后提升工作效率的工作方法。</p>
</blockquote>
<ul>
<li><p>配置一下你的身份，这样在提交代码的时候Git就可以知道是谁提交的</p>
<p>  git config –global user.name “sh2zqp”<br>  git config –global user.email “sh2zqp@gmail.com”</p>
</li>
<li><p>配置完成后，可以使用同样的命令来查看是否配置成功，只需将后面的名字和邮箱去掉</p>
<p>  git config –global user.name<br>  git config –global user.email </p>
</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_1.png" alt=""></p>
<blockquote>
<p>接着就可以开始创建代码仓库了，仓库(Repository)是用于保存版本管理所需信息的地方，所有本地提交的代码都会被提交到代码仓库中，如果有需要还可以再推送到远程仓库(如Github)中，这里尝试给LitePalDemo项目建立一个代码仓库。</p>
</blockquote>
<ul>
<li>首先进入到LitePalDemo项目的根目录下</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_2.png" alt=""></p>
<ul>
<li><p>然后在这个目录下，运行如下命令，进行代码仓库初始化</p>
<p>  git init</p>
</li>
</ul>
<blockquote>
<p>很简单，一行命令就可以完成创建代码仓库的操作，如下图</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_3.png" alt=""></p>
<blockquote>
<p>仓库创建完成后，会在LitePalDemo项目的根目录下生成一个隐藏的.git文件夹，这个文件夹就是用来记录本地所有的Git操作的，通过ls -al命令来查看，如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_4.png" alt=""></p>
<blockquote>
<p>如果想要删除本地仓库，只需要删除这个.git文件夹就ok了</p>
</blockquote>
<h4 id="提交本地代码"><a href="#提交本地代码" class="headerlink" title="提交本地代码"></a>提交本地代码</h4><blockquote>
<p>代码仓库建立完成之后就可以提交代码了，这里使用add和commit命令就可以了。add: 用于把想要提交的代码先添加进来，其可以接单个文件，单个目录，和 . ，commit: 是真正地去执行提交操作的命令。</p>
</blockquote>
<pre><code>git add build.gradle // 提交单个文件
git add app               // 提交单个目录
git add .                    // 全部提交
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_5.png" alt=""></p>
<blockquote>
<p>现在LitePalDemo项目下的所有文件都已经添加好了，下面就可以提交了</p>
</blockquote>
<pre><code>git commit -m &quot;First commit&quot;
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_6.png" alt=""></p>
<blockquote>
<p>commit命令后一定要通过 -m 来添加上本次提交的描述信息，没有该信息的话，本次提交会被认为是非法的。</p>
</blockquote>
<p><strong>Finished！</strong></p>
<h3 id="版本控制工具Git进阶"><a href="#版本控制工具Git进阶" class="headerlink" title="版本控制工具Git进阶"></a>版本控制工具Git进阶</h3><blockquote>
<p>上节已经完成了代码仓库的创建(git init)，和本地代码的提交(git add . 和git commit -m “First Commit”)，准备工作已经完成。</p>
</blockquote>
<h4 id="忽略文件-gitignore"><a href="#忽略文件-gitignore" class="headerlink" title="忽略文件.gitignore"></a>忽略文件.gitignore</h4><blockquote>
<p>在代码仓库创建完成后，在上节中我们直接通过git add . 和git commit -m “First Commit” 进行了本地代码提交，我们并没有考虑什么文件需要被提交，什么文件需要被忽略而不被提交，并不是所有文件都应该要被加入到版本控制当中。</p>
<p>比如Android项目结构下的build目录是每次编译项目时自动生成的，我们其实是没必要将这部分文件添加到版本控制当中，还有就是一些私密文件我们也是不希望加入到版本控制当中的。那么我们应该如何忽略这些文件呢？</p>
<p>Git提供了一种可配型很强的机制来让用户自己指定某些文件或目录，使它们被排除在版本控制之外，它会检查代码仓库的目录下是否存在一个名为.gitignore的文件，如果存在就去一行一行读取这个文件的内容，并把每一行指定的文件或目录给排除在版本控制之外。</p>
</blockquote>
<p><strong>注意</strong></p>
<blockquote>
<p>.gitignore中指定的文件或目录是可以使用“*”通配符的</p>
<p>AS在创建项目时其实已经自动帮助我们创建了两个.gitignore文件，一个在项目的根目录下，一个在app模块目录下：</p>
</blockquote>
<p><strong>/.gitignore</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_7.png" alt=""></p>
<p><strong>/app/.gitignore</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_8.png" alt=""></p>
<blockquote>
<p>这些内容都是AS自动生成的一些默认配置，通常这部分文件和目录是不需要添加到版本控制当中的。当然我们完全可以自己手动添加文件或目录，比如app模块下的所有测试文件只供我们自己使用，可以不添加到版本控制当中，就可以对/app/.gitignore文件进行修改如下：</p>
</blockquote>
<pre><code>/build
/src/test
/src/androidTest
</code></pre><blockquote>
<p>修改完成两个.gitignore文件后，就可以按照上节讲的两个add和commit命令进行本地代码的提交了</p>
</blockquote>
<pre><code>git add .
git commit -m &quot;First Commit&quot;
</code></pre><h4 id="查看修改内容"><a href="#查看修改内容" class="headerlink" title="查看修改内容"></a>查看修改内容</h4><blockquote>
<p>在进行了第一次代码提交后，后期我们会对自己的项目进行不断的维护与功能扩展，一般是没完成一个小功能就会进行一次代码提交。但如果某项功能牵扯到的代码过于多，有可能写到后面市已经忘记了前面修改了什么内容，遇到这种情况不用慌张，Git全帮我们记着，本部分就会学习如何使用Git来查看上次提交后文件修改的内容。</p>
</blockquote>
<ul>
<li><p>查看文件修改情况，只需要使用status命令就可以了，在项目根目录下输入：</p>
<p>  git status</p>
</li>
</ul>
<blockquote>
<p>如果提交代码后无任何修改</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_9.png" alt=""></p>
<blockquote>
<p>Git会提示我们项目中没有任何可提交的文件，现在对项目做一些修改，在查看</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_10.png" alt=""></p>
<blockquote>
<p>Git提醒我们MainActivity.java这个文件已经发生了更改，那么如何才能看到更改的内容呢？这就要借助diff命令了。</p>
</blockquote>
<pre><code>git diff
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_11.png" alt=""></p>
<blockquote>
<p>如果你只想查看某个指定文件的修改内容，如MainActivity.java，可以用如下命令：</p>
</blockquote>
<pre><code>git diff app/src/main/java/com/sh2zqp/litepaldemo/MainActivity.java
</code></pre><blockquote>
<p>因为项目就只有该文件被修改，效果和上图一样。其中减号代表删除部分，加好代表添加部分。</p>
</blockquote>
<h4 id="撤销未被提交的修改"><a href="#撤销未被提交的修改" class="headerlink" title="撤销未被提交的修改"></a>撤销未被提交的修改</h4><blockquote>
<p>有时候代码写的急，过于草率，以至于原有的功能会受到影响，遇到这种情况不用着急，只要代码还没有被提交，所有修改的内容都是可以撤销的。</p>
<p>还是上面的例子，我们就可以使用checkout命令来撤销未被提交的修改：</p>
</blockquote>
<pre><code>git checkout app/src/main/java/com/sh2zqp/litepaldemo/MainActivity.java
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_12.png" alt=""></p>
<blockquote>
<p>可以看到，当前项目中没有任何可提交的文件，说明撤销成功了。不过这种撤销方式只适用于那些还没有add的文件，如果某个文件已经被add了，这种方式是无效的。</p>
<p>先add，后status查看</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_13.png" alt=""></p>
<blockquote>
<p>现在checkout一下，你会发现依旧如上所示，无法撤销，MainActivity仍处于已添加状态。这种情况，我们需要把已添加的文件取消添加，然后才可以撤回提交，取消添加用reset命令</p>
</blockquote>
<pre><code>git reset HEAD app/src/main/java/com/sh2zqp/litepaldemo/MainActivity.java
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_14.png" alt=""></p>
<pre><code>git status
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_15.png" alt=""></p>
<blockquote>
<p>MainActivity文件就重新变回了未添加状态</p>
</blockquote>
<pre><code>git checkout app/src/main/java/com/sh2zqp/litepaldemo/MainActivity.java
git status
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_16.png" alt=""> </p>
<blockquote>
<p>MainActivity文件修改的内容就被撤销了</p>
</blockquote>
<h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h4><blockquote>
<p>当LitePalDemo项目开发很久之后，我们可能已经记不住上百次的提交操作了，估计你也已经忘了每次提交都修改了什么内容，没关系，Git一直默默的帮你记着，我们使用log命令来进行查看历史的提交信息，用法如下：</p>
</blockquote>
<pre><code>git log
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_17.png" alt=""></p>
<blockquote>
<p>可以看到，我们只进行了2次提交，所看到的信息比较少，每次提交记录包含了提交id，提交人，提交日期以及提交描述这些信息。然后我们再进行一次提交，把书目的价格改为55.55</p>
</blockquote>
<pre><code>git add .
git commit -m &quot;Change price&quot;
git log
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_18.png" alt=""></p>
<blockquote>
<p>当提交记录多的时候，如果我们只想查看其中的一条记录，可以在命令中指定该记录的id，并加上 -1 参数表示我们只想看到一行记录，如下：</p>
</blockquote>
<pre><code>git log b54866932d885b439711707628b742155de028ff -1
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_19.png" alt=""></p>
<blockquote>
<p>如果你想要查看提交记录具体修改了什么内容，可以在命令中加入 -p参数：</p>
</blockquote>
<pre><code>git log b54866932d885b439711707628b742155de028ff -1 -p
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_20.png" alt=""></p>
<blockquote>
<p>减号代表删除部分，加好代表添加部分</p>
</blockquote>
<p><strong>Finished!</strong></p>
<h3 id="版本控制工具的高级用法"><a href="#版本控制工具的高级用法" class="headerlink" title="版本控制工具的高级用法"></a>版本控制工具的高级用法</h3><p><strong>准备工作（项目根目录）</strong></p>
<pre><code>git init
git add .
git commit -m &quot;First Commit&quot;
</code></pre><h4 id="分支的用法"><a href="#分支的用法" class="headerlink" title="分支的用法"></a>分支的用法</h4><blockquote>
<p>分支是版本控制工具中比较高级且重要的概念，它的主要作用就是在现有代码基础上开辟一个分叉口，使得代码可以在主干线和分支干线上同时进行开发，且二者之间相互不影响，分支的工作原理如下：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_21.png" alt=""></p>
<p><strong>为什么需要建立新分支</strong></p>
<blockquote>
<p>正常情况下，我们在主干线上进行开发就可以了，完全不会有问题。不过一旦涉及到版本的情况，如果不建立分支的话，就会让你很头疼。例如，你开发了一款软件，并推出了初始的1.0版本，随着项目的进行，各种不同的新需求会不断的被提出来，我们会继续投入1.1版本的开发，经过一段时间的开发之后，有用户反映原先的1.0版本软件出现严重bug，所以我们需要对bug进行修复，并在此重写发布1.0版本，说起来很容易，你要知道你在1.0版本的基础上开发了1.1版本，在现有的代码基础上进行1.0版本的bug修复，再次发布1.0版本就会具有了还未发布的1.1版本功能，而且也会使得两个版本的代码相互混淆，很不方便。</p>
<p>这个时候，你就需要使用分支了，它使得以上问题得到解决。你只需要在1.0版本发布的时候在主分支上建立一个新的分支，然后在主分支上继续开发1.1版本的相关功能，当有1.0版本有bug出现时，就可以在新建分支上进行1.0版本的bug修复，然后再进行1.0版本软件的再发布，并记得将修改后的1.0版本代码与正在开发的1.1版本代码进行合并，既是将分支合并到主分支上。这样不仅可以轻松地解决1.0版本的bug修复，而且在分支合并到主分支后，也保证了主分支开发的1.1版本代码也已经修复了相关bug，当1.1版本开发完成发布后就不会存在同样的不过bug了。</p>
</blockquote>
<p><strong>所以说，分支很重要</strong></p>
<blockquote>
<p>下面学习Git中如何进行分支操作吧，分支，英文为branch</p>
</blockquote>
<ul>
<li><p>查看当前版本库当中有哪些分支</p>
<p>  git branch</p>
</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_22.png" alt=""></p>
<blockquote>
<p>可以看到只有一个master主分支，下面我们创建一个新的分支：</p>
</blockquote>
<pre><code>git branch version1.0
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_23.png" alt=""></p>
<blockquote>
<p>这样就创建了一个名为version1.0的分支，可以看到master前面有一个“*”号，说明我们目前在master分支上，那么我们如何切换到version1.0分支呢，checkout命令：</p>
</blockquote>
<pre><code>git checkout version1.0
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_24.png" alt=""></p>
<blockquote>
<p>可以看到已经切换到version1.0分支上，在version1.0分支上修改并提交代码不会影响到master分支的代码，反之也成立。所以我们在version1.0分支上修复了一个bug，在master分支上这个bug依旧存在，这时我们就需要进行合并操作，merge命令来完成合并分支操作，如下：</p>
<p>在version1.0分支上修改代码，然后进行如下操作，</p>
</blockquote>
<pre><code>git add .
git commit -m &quot;version1.0 branch change&quot;
git checkout master
git merge version1.0
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_25.png" alt=""></p>
<blockquote>
<p>在合并分支的时候会发现有代码冲突的情况，这个时候就需要你慢慢地找出这些冲突，Git就无能为力了。</p>
<p>当你不需要version1.0分支时，可以用如下命令删除version1.0分支</p>
</blockquote>
<pre><code>git branch -D version1.0
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/git_course_26.png" alt=""></p>
<h4 id="与远程版本库协作"><a href="#与远程版本库协作" class="headerlink" title="与远程版本库协作"></a>与远程版本库协作</h4><blockquote>
<p>如果你是一个人开发，其实使用版本控制工具Git远远无法发挥它真正强大的功能。版本控制工具Git最重要的一个特点就是为了进行团队协同开发的。每个开发者电脑上都有一份代码副本，当某个开发者在自己的电脑上编写完成了某个功能后，就将代码提交到服务器，其他开发者就只需要将服务器上的代码同步到本地，就能保证整个团队所有人的代码都一致。这样，团队的每个开发者就可以各司其职，大家来共同完成一个较为庞大的项目。</p>
<p>那如何使用Git来进行团队开发呢？这就需要一个远程的版本库，团队的每个开发者都从这个远程版本库进行原始代码的获取，然后各自开发，并且以后每次提交的代码都同步到远程版本库就ok了。另外，每个团队开发者要养成经常从远程版本库中获取最新代码的习惯，不然的话，大家的代码就有可能经常出现冲突。</p>
<p>假如，现在有一个远程版本库的Git地址是“<a href="https://github.com/sh2zqp/RunningPermission.git" target="_blank" rel="external">https://github.com/sh2zqp/RunningPermission.git</a>”,就可以使用如下命令来将代码下载到本地（版本库）：</p>
</blockquote>
<pre><code>git clone https://github.com/sh2zqp/RunningPermission.git
</code></pre><blockquote>
<p>之后，你在这份代码的基础上进行修改和提交，那么怎么样才能把本地修改的内容同步到远程版本库上呢？这就要借助push命令了：</p>
</blockquote>
<pre><code>git push origin master
</code></pre><blockquote>
<p>origin部分指定的就是远程版本库的Git地址，master部分指定的是同步到哪一分支上，上述命令就完成了将本地代码同步到<a href="https://github.com/sh2zqp/RunningPermission.git" target="_blank" rel="external">https://github.com/sh2zqp/RunningPermission.git</a>这个远程版本库的master分支上。</p>
<p>知道了将本地的修改同步到远程版本库上的方法，接下来我们看一下如何将远程版本库的修改同步到本地版本库。Git提供了两种命令来完成此功能，fetch和pull，fetch的语法规则与push差不多，如下：</p>
</blockquote>
<pre><code>git fetch origin master
</code></pre><blockquote>
<p>执行这个命令后，就会将远程版本库上的代码同步到本地，不过同步下来的代码并不会合并到任何分支上去，而是会存放在一个origin/master分支上，这时候我们就可以通过diff命令来查看远程版本库上到底修改了哪些东西：</p>
</blockquote>
<pre><code>git diff origin/master
</code></pre><p>之后再调用merge命令将origin/master分支上的修改合并到主分支即可，如下所示：</p>
<pre><code>git merge origin/master
</code></pre><blockquote>
<p>而pull命令则相当于将fetch和merge命令放在一起执行了，它可以从远程版本库上获取最新的代码并且合并到本地，如下：</p>
</blockquote>
<pre><code>git pull origin master
</code></pre><blockquote>
<p>现在感觉对远程版本库比较抽象，下节我们将更加深入的进行了解</p>
</blockquote>
<p><strong>Finished!</strong></p>
<h3 id="将代码托管到Github上"><a href="#将代码托管到Github上" class="headerlink" title="将代码托管到Github上"></a>将代码托管到Github上</h3><blockquote>
<p>经过前面三节的学习，本节我们会将项目托管到GitHub上</p>
<p><a href="https://github.com" target="_blank" rel="external">Github</a>是全球最大的代码托管网站，主要是借助Git来进行版本控制的。任何开源的软件都可以免费的将代码提交到GitHub上，以0陈本来进行代码的托管。</p>
</blockquote>
<ul>
<li>首先你要注册一个GitHub账号</li>
<li>然后再创建一个版本库（自动为我们创建.gitignore,LICENSE,README.md）</li>
<li>在本地用AS创建项目</li>
<li><p>进入本地项目的根目录，根据版本库的Git地址将远程版本库克隆到本地</p>
<p>  git clone 远程版本库Git地址</p>
</li>
<li><p>再进入到克隆下来文件夹目录，将这个目录里面的全部文件复制到本地项目的根目录下</p>
</li>
<li>删除克隆下来的文件夹</li>
<li><p>最后便可以把项目提交到远程代码库</p>
<p>  git add .<br>  git commit -m “first commit”<br>  git push origin master</p>
</li>
<li><p>Github可能需要进行用户名和密码的验证，输入注册时的用户名和密码就ok了</p>
</li>
<li>这样同步完成，远程代码库已经有了本地项目的代码了</li>
</ul>
<blockquote>
<p>详细过程请参考《第一行代码》第二版 （489-494）</p>
</blockquote>
<p><strong>Finished!</strong></p>
<p><strong>Git命令大图谱</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/git%E5%91%BD%E4%BB%A4.jpg" alt=""></p>
<p><strong>参考资料</strong></p>
<p>《第一行代码》第二版   —   郭霖<br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰Git教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;初识版本控制工具Git&quot;&gt;&lt;a href=&quot;#初识版本控制工具Git&quot; class=&quot;headerlink&quot; title=&quot;初识版本控制工具Git&quot;&gt;&lt;/a&gt;初识版本控制工具Git&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Git是一个开源的分布式版本控制工具，由L
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="版本控制工具" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>如何上传自己的Library到JCenter仓库</title>
    <link href="http://yoursite.com/2016/12/29/%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84Library%E5%88%B0JCenter%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2016/12/29/如何上传自己的Library到JCenter仓库/</id>
    <published>2016-12-29T04:31:52.000Z</published>
    <updated>2016-12-29T07:04:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在Android开发过程中一定会用到别人的库，比如squareup公司的OKHttp：</p>
</blockquote>
<pre><code>compile &apos;com.squareup.okhttp3:okhttp:3.4.1&apos;
</code></pre><blockquote>
<p>这样我们版本更新的时候只需要更改一下版本号就行，而不用去下载jar包，给开发带来了极大的便利，但如果我们自己想上传library供其他开发者使用呢？那么此教程会讨论几种不同的方式来一步步发布自己的library到JCenter仓库。</p>
</blockquote>
<h3 id="基于插件novoda-bintray-release的方式"><a href="#基于插件novoda-bintray-release的方式" class="headerlink" title="基于插件novoda/bintray-release的方式"></a>基于插件<a href="https://github.com/novoda/bintray-release" target="_blank" rel="external">novoda/bintray-release</a>的方式</h3><ul>
<li>第一步：新建一个Android Library类型的RPLibrary库，把其作为上传到远程JCenter仓库的本地第三方库</li>
</ul>
<blockquote>
<p>在AS中选择File->New->New Module,然后选择Android Library,新建一个Library。这里以新建RPLibrary为例子.</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_1.png" alt=""></p>
<p><strong> 注意这里的Library的名字需要后面的Package的名字保持一致</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_2.png" alt=""></p>
<blockquote>
<p>现在项目的结构如下图，接下来就是添加必要的<strong>Jcenter的依赖</strong>，为上传做准备。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_3.png" alt=""></p>
<p><strong>如果你已经有了Android Library类型的库则可以忽略此步骤</strong></p>
<ul>
<li>第二步：注册账号</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_4.png" alt=""></p>
<blockquote>
<p>在bintray<a href="https://bintray.com/" target="_blank" rel="external">官网</a>注册账号，注册完成后验证邮箱，然后登陆进入首页把鼠标放到你的账户名上，选择弹出的Edit Profile选项</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_5.png" alt=""></p>
<blockquote>
<p>然后在界面的左侧选择Repositories选项，进入如下界面：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_6.png" alt=""></p>
<blockquote>
<p>接着选择Repositories仓库的maven，双击进入如下界面：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_7.png" alt="">  </p>
<blockquote>
<p>双击右侧的Add New Package新建一个Package，并在左侧填写Package名字（<strong>注意Package需要和你的Library的名字保持一致</strong>）</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_8.png" alt=""></p>
<blockquote>
<p>填写相应的库信息，（<strong>注意Name要和你的Library的名字保持一致</strong>，<strong>Licenses选择Apache-2.0</strong>，<strong>最后三个网址与你的项目在GitHub上的地址有关，相信不难理解（建议这样填写）</strong>），最后双击Create Package新建一个Package</p>
</blockquote>
<ul>
<li>第三步：添加依赖</li>
</ul>
<blockquote>
<p>在整个工程的build.gradle文件中添加classpath ‘com.novoda:bintray-release:0.4.0’,<strong>注意是整个工程的build.gradle</strong>。</p>
</blockquote>
<pre><code>// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &apos;com.android.tools.build:gradle:2.2.0&apos;
        // 基于插件[novoda/bintray-release]的方式
        classpath &apos;com.novoda:bintray-release:0.4.0&apos;
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
.....
</code></pre><blockquote>
<p>接着是在你自己Library（这里是RPLibrary）的build.gradle的文件中配置自己的信息，复制下面的脚本，改成你自己的信息即可</p>
</blockquote>
<pre><code>apply plugin: &apos;com.android.library&apos;
// 基于插件[novoda/bintray-release]的方式
apply plugin: &apos;com.novoda.bintray-release&apos;

// 基于插件[novoda/bintray-release]的方式
publish {
    userOrg = &apos;********&apos; //你的bintray用户名
    groupId = &apos;com.sh2zqp&apos;  //你的唯一的groupId，对应com.squareup.okhttp3:okhttp:3.4.1中的com.squareup.okhttp3
    artifactId = &apos;RPLibrary&apos; //你的library的名字，对应com.squareup.okhttp3:okhttp:3.4.1中的okhttp
    publishVersion = &apos;0.0.2&apos; //版本号
    desc = &apos;Android6.0+ RunningPermission Simple Use Way Library.&apos;
    website = &apos;https://github.com/sh2zqp/&apos; //建议填写github地址，不过不影响，这里做演示填的自己的网址

    bintrayUser = &apos;scinecehistory&apos; //你的bintray用户名
    bintrayKey = &apos;******************************&apos; //在你的bintray账户里面查找
}
</code></pre><p><strong> bintrayKey的获取方式如下图</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_9.png" alt=""></p>
<blockquote>
<p>经过上面的配置，上传JCenter成功后那么别人引用你的library的代码就为</p>
</blockquote>
<pre><code>compile &apos;com.sh2zqp:RPLibrary:0.0.2’
</code></pre><ul>
<li>第五步：上传到bintray的maven仓库</li>
</ul>
<blockquote>
<p>经过上面的配置，现在就可以传了，上传之前记得Sync一下Project,然后打开命令行，输入回车：</p>
</blockquote>
<pre><code>./gradlew clean build bintrayUpload -PdryRun=false
</code></pre><blockquote>
<p>然后等待几分钟，期间会联网下载依赖的库，最后如果没有问题，会显示BUILD SUCCESSFUL信息，然后去官网查看刚才建的Package，会发现多了你刚才上传的版本号。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_10.png" alt=""></p>
<blockquote>
<p>点进去可以看到有三种引用方式</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_12.png" alt=""></p>
<blockquote>
<p>但是到这里还无法让别人通过<strong> compile ‘com.sh2zqp:RPLibrary:0.0.2</strong>引用，目前只是你自己的私人库。但可以通过如下方式来进行引用：</p>
<p>通过gradle脚本上传library到maven仓库，你可以在本地验证以下，需要进行在根目录的build.gradle配置：</p>
</blockquote>
<pre><code>allprojects {
    repositories {
        jcenter()
        maven {
            url &apos;https://dl.bintray.com/sciencehistory/maven/&apos;
        }
    }
}
</code></pre><blockquote>
<p>然后在主工程的build.gradle文件中添加如下依赖：</p>
</blockquote>
<pre><code>compile &apos;com.sh2zqp:RPLibrary:0.0.2&apos;
</code></pre><p><strong>url可以通过如下图获取</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/RPLibrary_jcenter_11.png" alt=""></p>
<ul>
<li>第六步：添加到JCenter仓库</li>
</ul>
<p><img src="https://segmentfault.com/image?src=http://7xp8c8.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160804234627.png&amp;objectId=1190000006186992&amp;token=2c5ed77232a8b4a43b17399b1f37538e" alt=""></p>
<p><img src="https://segmentfault.com/image?src=http://7xp8c8.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160804234750.png&amp;objectId=1190000006186992&amp;token=c5c266f182fa78e5954ffb571eaf5237" alt=""></p>
<blockquote>
<p>在上面的页面中点击Add To JCenter，然后随便填写一下Comments，点击Send，然后工作人员会审核和，你只需等待几个小时，然后会有站内消息提示你已经发布发到Jcenter，这样别人也可以引用你的Library，有没有很自豪的感觉！</p>
</blockquote>
<pre><code>compile &apos;com.sh2zqp:RPLibrary:0.0.2&apos;
</code></pre><ul>
<li>第七步：更新版本号</li>
</ul>
<blockquote>
<p>这个非常简单，当你的Library代码更改后，只需要更改一下上面的配置里面的<strong>publishVersion</strong>，运行./gradlew clean build bintrayUpload -PdryRun=false，就可以更新版本号了。这样，整个过程就结束了。</p>
</blockquote>
<p><strong>常见问题</strong></p>
<blockquote>
<p>如果你的Java doc含有中文导致上传失败，可以尝试在lib的build.gradle添加如下代码：</p>
</blockquote>
<pre><code>allprojects {
    tasks.withType(Javadoc) {
        options{
            encoding &quot;UTF-8&quot;
            charSet &apos;UTF-8&apos;
            links &quot;http://docs.oracle.com/javase/7/docs/api&quot;
        }
    }
}
</code></pre><p><strong><a href="https://github.com/sh2zqp/RunningPermission" target="_blank" rel="external">源码</a></strong></p>
<p><strong>参考资料</strong></p>
<p><a href="https://segmentfault.com/a/1190000006186992" target="_blank" rel="external">一步一步教你上传自己的 Library 到 JCenter</a><br> <a href="http://blog.csdn.net/wwj_748/article/details/51913280" target="_blank" rel="external">Android Library上传到JCenter仓库实践</a><br> <a href="http://blog.csdn.net/fengyuzhengfan/article/details/51407009" target="_blank" rel="external">教你轻松将Android library 发布到JCenter</a><br><a href="http://blog.csdn.net/wangdong20/article/details/50098535" target="_blank" rel="external">AndroidStudio怎么将开源项目发布到jcenter</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0623/3097.html" target="_blank" rel="external">如何使用Android Studio把自己的Android library分享到jCenter和Maven Central</a><br><a href="http://www.jianshu.com/p/0ba8960f80a9" target="_blank" rel="external">将Library上传到Jcenter</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在Android开发过程中一定会用到别人的库，比如squareup公司的OKHttp：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;compile &amp;apos;com.squareup.okhttp3:okhttp:3.4.1&amp;apo
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="AS" scheme="http://yoursite.com/tags/AS/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Library" scheme="http://yoursite.com/tags/Library/"/>
    
      <category term="JCenter" scheme="http://yoursite.com/tags/JCenter/"/>
    
  </entry>
  
  <entry>
    <title>AS如何打jar包和aar包</title>
    <link href="http://yoursite.com/2016/12/28/AS%E5%A6%82%E4%BD%95%E6%89%93jar%E5%8C%85%E5%92%8Caar%E5%8C%85/"/>
    <id>http://yoursite.com/2016/12/28/AS如何打jar包和aar包/</id>
    <published>2016-12-28T09:57:38.000Z</published>
    <updated>2016-12-29T07:09:19.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="生成jar包"><a href="#生成jar包" class="headerlink" title="生成jar包"></a>生成jar包</h3><p><strong>在AS中可以通过修改gradle来处理</strong></p>
<blockquote>
<p>新建一个项目RunningPermissionDemo, 在该项目中新建一个类型为Android Library的Module: RunningPermissionLib, 如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/as_jar_1.png" alt=""></p>
<blockquote>
<p>app为我们的主工程, RunningPermissionLib是我们要将其生成jar包的Library. 在RunningPermissionLib与主工程的中的build.gradle文件中加入如下代码：</p>
</blockquote>
<ul>
<li><p>在主工程app的build.gradle中要加入RunningPermissionLib 这个Module的依赖：</p>
<p>  dependencies {</p>
<pre><code>compile fileTree(include: [&apos;*.jar&apos;], dir: &apos;libs&apos;)
androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, {
    exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;
})
compile &apos;com.android.support:appcompat-v7:24.2.1&apos;
testCompile &apos;junit:junit:4.12&apos;
compile project(&apos;:RunningPermissionLib&apos;)
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>当你编译完工程后其实RunningPermissionLib库的所有Java文件已经生成了包含class 的classes.jar包，如下图所示：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/as_jar_2.png" alt=""></p>
<ul>
<li>在RunningPermissionLib库中编写task进行jar生成</li>
</ul>
<blockquote>
<p>给出一个task方便将改classes.jar 导出到RunningPermissionLib库的build/libs/下，并修改名字为my.jar ( 名字随意)</p>
</blockquote>
<pre><code>//Copy类型
task makeJar(type: Copy) {
    //删除存在的
    delete &apos;build/libs/mysdk.jar&apos;
    //设置拷贝的文件
    from(&apos;build/intermediates/bundles/release/&apos;)
    //打进jar包后的文件目录
    into(&apos;build/libs/&apos;)
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include(&apos;classes.jar&apos;)
    //重命名
    rename (&apos;classes.jar&apos;, &apos;RunningPermission.jar&apos;)
}

makeJar.dependsOn(build)
//在终端执行生成JAR包
// gradlew makeJar
</code></pre><ul>
<li>在AS提供的Terminal中（目录默认为当前工程的）键入： ./gradlew makeJar 回车看到如下所示就OK了</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/as_jar_3.png" alt=""></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/as_jar_4.png" alt=""></p>
<blockquote>
<p>生成的jar包在你的library那个的build下的libs下，然后就可以使用了</p>
</blockquote>
<p><strong>声明：打出来的jar只有源代码的.class 文件，不包含资源文件</strong></p>
<h3 id="生成aar包"><a href="#生成aar包" class="headerlink" title="生成aar包"></a>生成aar包</h3><blockquote>
<p>怎么把资源（图片，布局，string等）打进jar包呢？</p>
</blockquote>
<p><strong>答案</strong> </p>
<blockquote>
<p>既然不包含那我们就把jar包中用到的资源放到你使用该jar的工程里面，然后通过反射即可。 </p>
<p>这里给出反射类：</p>
</blockquote>
<pre><code>public class MResource {
    public static int getIdByName(Context context, String className, String resName) {
        String packageName = context.getPackageName();
        int id = 0;
        try {
            Class r = Class.forName(packageName + &quot;.R&quot;);
            Class[] classes = r.getClasses();
            Class desireClass = null;
            for (Class cls : classes) {
                if (cls.getName().split(&quot;\\$&quot;)[1].equals(className)) {
                    desireClass = cls;
                    break;
                }
            }
            if (desireClass != null) {
                id = desireClass.getField(resName).getInt(desireClass);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return id;
    }
}
</code></pre><blockquote>
<p>其实AS已经为我们提供的aar包，在编译完后就生成了aar了，而且也不用担心资源问题，你自己来可能会漏资源。 </p>
<p>生成的aar在你的library的／build／outputs／aar／</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/as_jar_5.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;生成jar包&quot;&gt;&lt;a href=&quot;#生成jar包&quot; class=&quot;headerlink&quot; title=&quot;生成jar包&quot;&gt;&lt;/a&gt;生成jar包&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;在AS中可以通过修改gradle来处理&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;

    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="jar" scheme="http://yoursite.com/tags/jar/"/>
    
      <category term="arr" scheme="http://yoursite.com/tags/arr/"/>
    
      <category term="AS" scheme="http://yoursite.com/tags/AS/"/>
    
  </entry>
  
  <entry>
    <title>阅读记录</title>
    <link href="http://yoursite.com/2016/12/22/%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2016/12/22/阅读记录/</id>
    <published>2016-12-22T05:28:07.000Z</published>
    <updated>2017-01-07T03:49:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2016-10-31"><a href="#2016-10-31" class="headerlink" title="2016.10.31"></a>2016.10.31</h3><h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/1025/6699.html" target="_blank" rel="external">Android 多线程编程的总结</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/1014/6675.html" target="_blank" rel="external">[译]探索Android 大杀器——Handler</a>[2]<br><a href="http://www.open-open.com/lib/view/open1438065400878.html" target="_blank" rel="external">Android ORM 框架之 greenDAO 使用心得</a><br><a href="http://www.jianshu.com/p/4986100eff90" target="_blank" rel="external">GreenDao3.0简单使用</a><br><a href="http://yifeng.studio/2016/10/27/android-develop-30-things-that-experience-made-me-learn-the-hard-way/" target="_blank" rel="external">[译]开发安卓Apps，我所努力学习到的三十多条宝贵经验</a><a href="http://yifeng.studio/2016/10/27/android-develop-30-things-that-experience-made-me-learn-the-hard-way/" target="_blank" rel="external">5</a></p>
<h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><p><strong>无</strong></p>
<h3 id="2016-11-01"><a href="#2016-11-01" class="headerlink" title="2016.11.01"></a>2016.11.01</h3><h4 id="博客-1"><a href="#博客-1" class="headerlink" title="博客"></a>博客</h4><p><a href="http://blog.csdn.net/iispring/article/details/51661195" target="_blank" rel="external"> Okhttp使用详解</a></p>
<h4 id="书籍-1"><a href="#书籍-1" class="headerlink" title="书籍"></a>书籍</h4><p><strong>无</strong></p>
<h3 id="2016-11-02"><a href="#2016-11-02" class="headerlink" title="2016.11.02"></a>2016.11.02</h3><h4 id="博客-2"><a href="#博客-2" class="headerlink" title="博客"></a>博客</h4><p><a href="http://blog.csdn.net/lmj623565791/article/details/47911083" target="_blank" rel="external"> Android OkHttp完全解析 是时候来了解OkHttp了</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0106/2275.html" target="_blank" rel="external">OkHttp使用教程</a><br><a href="http://blog.csdn.net/iispring/article/details/51615631" target="_blank" rel="external">HTTPS理论基础及其在Android中的最佳实践</a><br><a href="http://limboy.me/tech/2011/02/19/https-workflow.html" target="_blank" rel="external">图解HTTPS</a><br><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="external">数字签名是什么？</a><br><a href="http://www.ruanyifeng.com/blog/2006/12/notes_on_cryptography.html" target="_blank" rel="external">密码学笔记</a><br> <a href="http://blog.csdn.net/lmj623565791/article/details/48129405" target="_blank" rel="external">Android Https相关完全解析 当OkHttp遇到Https</a><br><a href="http://www.jianshu.com/p/74d21a44323c" target="_blank" rel="external">设计模式-装饰者模式</a><br><a href="http://www.jianshu.com/p/f798c8b02348" target="_blank" rel="external">Android项目从零到上线的全过程</a><br><a href="http://www.jianshu.com/p/d9e4ddd1c530" target="_blank" rel="external">一个优秀的Android应用从建项目开始</a><br><a href="http://www.jianshu.com/p/fe9ccdf5d03b" target="_blank" rel="external">细读《失控》：送你一把瑞士军刀</a></p>
<h4 id="书籍-2"><a href="#书籍-2" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>《万历十五年》<br>《被误解的日本人》</p>
</blockquote>
<h3 id="2016-11-05"><a href="#2016-11-05" class="headerlink" title="2016.11.05"></a>2016.11.05</h3><h4 id="博客-3"><a href="#博客-3" class="headerlink" title="博客"></a>博客</h4><p><a href="http://blog.csdn.net/xiaanming/article/details/41084843" target="_blank" rel="external">Android 那些你所不知道的Bitmap对象详解</a><br><a href="http://www.jianshu.com/p/27bf1057f5aa" target="_blank" rel="external">带你学开源项目：OkHttp–自己动手实现OkHttp</a><br><a href="http://www.jianshu.com/p/47e72693a302" target="_blank" rel="external">带你学开源项目：Meizhi Android之RxJava &amp; Retrofit最佳实践</a><br><a href="http://www.jianshu.com/p/3141d4e46240" target="_blank" rel="external">Android网络请求心路历程</a><br><a href="http://blog.oneapm.com/apm-tech/344.html" target="_blank" rel="external">Android 网络请求详解</a><br><a href="http://gold.xitu.io/entry/5769f978d342d300580f4328" target="_blank" rel="external">OkHttpUtils 一个专注于让网络请求更简单的框架</a><a href="https://github.com/jeasonlzy/okhttp-OkGo" target="_blank" rel="external">(github)</a><br><a href="http://www.jianshu.com/p/e4670e9cfce9" target="_blank" rel="external">Java多线程深度探索</a></p>
<h4 id="书籍-3"><a href="#书籍-3" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>无</p>
</blockquote>
<h3 id="2016-11-07"><a href="#2016-11-07" class="headerlink" title="2016.11.07"></a>2016.11.07</h3><h4 id="博客-4"><a href="#博客-4" class="headerlink" title="博客"></a>博客</h4><p><a href="http://blog.csdn.net/jason0539/article/details/44956775" target="_blank" rel="external">23种设计模式汇总整理</a></p>
<h4 id="书籍-4"><a href="#书籍-4" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>《HTTP权威指南》<br>《Head First设计模式》<br>《大话设计模式》</p>
</blockquote>
<h3 id="2016-11-08"><a href="#2016-11-08" class="headerlink" title="2016.11.08"></a>2016.11.08</h3><h4 id="博客-5"><a href="#博客-5" class="headerlink" title="博客"></a>博客</h4><blockquote>
<p>无</p>
</blockquote>
<h4 id="书籍-5"><a href="#书籍-5" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>《大话设计模式》</p>
</blockquote>
<h3 id="2016-11-11"><a href="#2016-11-11" class="headerlink" title="2016.11.11"></a>2016.11.11</h3><h4 id="博客-6"><a href="#博客-6" class="headerlink" title="博客"></a>博客</h4><p><a href="http://blog.csdn.net/lpjishu/article/details/52665446" target="_blank" rel="external">Java泛型详解</a></p>
<h4 id="书籍-6"><a href="#书籍-6" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>《大话设计模式》</p>
</blockquote>
<h3 id="2016-11-13"><a href="#2016-11-13" class="headerlink" title="2016.11.13"></a>2016.11.13</h3><h4 id="博客-7"><a href="#博客-7" class="headerlink" title="博客"></a>博客</h4><p><a href="http://www.gcssloop.com/customview/dispatch-touchevent-theory" target="_blank" rel="external">安卓自定义View进阶-事件分发机制原理</a></p>
<h4 id="书籍-7"><a href="#书籍-7" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>《大话设计模式》</p>
</blockquote>
<h3 id="2016-12-01"><a href="#2016-12-01" class="headerlink" title="2016.12.01"></a>2016.12.01</h3><h4 id="博客-8"><a href="#博客-8" class="headerlink" title="博客"></a>博客</h4><p><a href="http://www.diycode.cc/topics/409" target="_blank" rel="external">手把手教你做个人 app</a><br><a href="http://www.jianshu.com/p/099c2c875524" target="_blank" rel="external">如何开发出一款仿映客直播APP项目实践篇 </a><br><a href="http://gold.xitu.io/post/583c242061ff4b006b59c7fb" target="_blank" rel="external">直接拿去用！每个App都会用到的LoadingLayout</a><br><a href="http://www.jianshu.com/p/d2f5ae6b4927" target="_blank" rel="external">WebView你真的熟悉吗？看了才知道</a></p>
<h4 id="书籍-8"><a href="#书籍-8" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>无</p>
</blockquote>
<h3 id="2016-12-12"><a href="#2016-12-12" class="headerlink" title="2016.12.12"></a>2016.12.12</h3><h4 id="博客-9"><a href="#博客-9" class="headerlink" title="博客"></a>博客</h4><p><a href="http://www.jianshu.com/p/f418bf95db2d" target="_blank" rel="external">掌握CoordinatorLayout</a><br><a href="http://www.jianshu.com/p/8dc11152f178" target="_blank" rel="external">如何给100亿个数字排序?</a><br><a href="http://www.jianshu.com/p/62f85f53ec16" target="_blank" rel="external">哈希分治法 - 统计海量数据中出现次数最多的前10个IP</a><br><a href="https://gold.xitu.io/post/584e7b298d6d81005456eb53" target="_blank" rel="external">Mysql 常用 SQL 语句集锦</a><br><a href="http://blog.csdn.net/u011507982/article/details/51199644" target="_blank" rel="external"> Android 自定义View合集</a><br><a href="https://gold.xitu.io/post/5846aee5ac502e006bb45d7e" target="_blank" rel="external">GitHub 使用</a><br><a href="http://www.jianshu.com/p/5f9b36a047e9" target="_blank" rel="external">Realm Java官方教程翻译(一)：Getting Started</a><br><a href="http://www.jianshu.com/p/99c98a02053e" target="_blank" rel="external">Realm Java官方教程翻译(二)：Getting Help及Models</a><br><a href="http://www.jianshu.com/p/d52a01af3d0a" target="_blank" rel="external">Realm Java官方教程翻译(三)：Relationships</a><br><a href="https://gold.xitu.io/post/58441c48c59e0d0056a30bc2" target="_blank" rel="external">Android 样式 (style) 和主题(theme)</a><br><a href="http://www.jianshu.com/p/5449656d56d2" target="_blank" rel="external">史上最高效的ORM方案——GreenDao3.0详解</a></p>
<h4 id="书籍-9"><a href="#书籍-9" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>《第一行代码》</p>
</blockquote>
<h3 id="2016-12-15"><a href="#2016-12-15" class="headerlink" title="2016.12.15"></a>2016.12.15</h3><h4 id="博客-10"><a href="#博客-10" class="headerlink" title="博客"></a>博客</h4><p><strong>MVP学习资源</strong></p>
<p><a href="http://hujiandong.com/2016/12/13/android-mvp-basic/" target="_blank" rel="external">Android 项目框架–MVP 基础</a><br><a href="http://www.jianshu.com/p/9a6845b26856" target="_blank" rel="external">Android MVP 详解（上）</a><br><a href="http://www.jianshu.com/p/0590f530c617" target="_blank" rel="external">Android MVP 详解（下）</a><br><a href="http://www.infoq.com/cn/articles/android-official-mvp-architecture-sample-project-analysis" target="_blank" rel="external">Android官方MVP架构示例项目解析</a></p>
<h4 id="书籍-10"><a href="#书籍-10" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>无</p>
</blockquote>
<h3 id="2016-12-20"><a href="#2016-12-20" class="headerlink" title="2016.12.20"></a>2016.12.20</h3><h4 id="博客-11"><a href="#博客-11" class="headerlink" title="博客"></a>博客</h4><p><a href="http://www.jianshu.com/p/1d84ba23f4d2" target="_blank" rel="external">Dagger2 入门,以初学者角度</a><br><a href="https://gold.xitu.io/post/5858a8f3b123db00658b1191" target="_blank" rel="external">探索日期滚轮控件的源码</a></p>
<h4 id="书籍-11"><a href="#书籍-11" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>无</p>
</blockquote>
<h3 id="2016-12-22"><a href="#2016-12-22" class="headerlink" title="2016.12.22"></a>2016.12.22</h3><h4 id="博客-12"><a href="#博客-12" class="headerlink" title="博客"></a>博客</h4><p><a href="http://blog.kaush.co/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/" target="_blank" rel="external">用RxJava来实现Otto—RxBus</a></p>
<h4 id="书籍-12"><a href="#书籍-12" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>无</p>
</blockquote>
<h3 id="2017-01-06"><a href="#2017-01-06" class="headerlink" title="2017.01.06"></a>2017.01.06</h3><h4 id="博客-13"><a href="#博客-13" class="headerlink" title="博客"></a>博客</h4><p><a href="http://blog.csdn.net/caiwenfeng_for_23/article/details/8373569" target="_blank" rel="external">tools:context=”.MainActivity的作用</a><br><a href="http://blog.csdn.net/xiabing082/article/details/50563559" target="_blank" rel="external">android基础–tools:context=”.MainActivity”作用</a><br><a href="https://www.kancloud.cn/qibin0506/android-md/117682" target="_blank" rel="external">你所不知道的Activity转场动画</a><br><a href="http://blog.csdn.net/u012702547/article/details/51289789" target="_blank" rel="external">Android5.0之Activity的转场动画</a><br><a href="https://my.oschina.net/vvcumt/blog/388185" target="_blank" rel="external">Android 转场动画 windowAnimation和ActivityAnimation的区别</a></p>
<h4 id="书籍-13"><a href="#书籍-13" class="headerlink" title="书籍"></a>书籍</h4><blockquote>
<p>无</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2016-10-31&quot;&gt;&lt;a href=&quot;#2016-10-31&quot; class=&quot;headerlink&quot; title=&quot;2016.10.31&quot;&gt;&lt;/a&gt;2016.10.31&lt;/h3&gt;&lt;h4 id=&quot;博客&quot;&gt;&lt;a href=&quot;#博客&quot; class=&quot;headerli
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="阅读" scheme="http://yoursite.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>Dagger2 入门详解</title>
    <link href="http://yoursite.com/2016/12/21/Dagger2%20%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/12/21/Dagger2 入门详解/</id>
    <published>2016-12-21T06:12:26.000Z</published>
    <updated>2016-12-21T11:32:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Dagger2"><a href="#什么是Dagger2" class="headerlink" title="什么是Dagger2"></a>什么是Dagger2</h2><blockquote>
<p>Dagger2是Android中<strong>比较热门</strong>的<strong>依赖注入框架</strong>，而Android开发当前非常流行框架就是<strong>MVP模式</strong>了，Dagger2的目标便是将MVP中的V和P 进一步解耦，达到模块化最大的解耦，使得代码更容易维护。</p>
</blockquote>
<p><strong>Google官方主页介绍</strong></p>
<blockquote>
<p>Dagger is a fully static, compile-time dependency injection framework for both Java and Android. It is an adaptation of an earlier version created by Square and now maintained by Google.<br>Dagger aims to address many of the development and performance issues that have plagued reflection-based solutions. More details can be found in this talk(slides) by +Gregory Kick.</p>
</blockquote>
<p><strong>翻译理解</strong></p>
<blockquote>
<p>Dagger是为Android和Java平台提供的一个完全静态的，在编译时进行依赖注入的框架。 早期的版本由Square公司进行改编，现在由Google进行维护。<br>Dagger旨在解决基于反射带来的开发和性能上的问题（因为Dagger并没有用反射来做依赖注入）。更多详细内容可以看一下<a href="https://plus.google.com/+GregoryKick/" target="_blank" rel="external">Gregory Kicktalk</a>这个人的<a href="https://www.youtube.com/watch?v=oK_XtfXPkqw" target="_blank" rel="external">talk</a>。</p>
</blockquote>
<p><strong>通俗理解</strong></p>
<blockquote>
<p>其实就是告诉我们Dagger可以用来进行依赖注入，搞过Spring的人肯定都知道这是啥，SpringMVC里用到了大量依赖注入，下面聊一聊<strong>依赖注入</strong>。</p>
</blockquote>
<h2 id="什么是依赖注入"><a href="#什么是依赖注入" class="headerlink" title="什么是依赖注入"></a>什么是依赖注入</h2><p><strong>维基百科</strong></p>
<blockquote>
<p><strong>控制反转</strong>(Inversion of Control，缩写为<strong>IoC</strong>)，是面向对象编程中的一种<strong>设计原则</strong>，可以用来<strong>降低计算机代码之间的耦合度</strong>。其中最常见的方式叫做依赖注入(Dependency Injection，简称DI)，还有一种方式叫“依赖查找”(Dependency Lookup)。通过控制反转，对象在被创建的时候，由一个调度者调控系统内所有对象的外界实体，将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p>
</blockquote>
<p><strong>通俗理解</strong></p>
<blockquote>
<p>当一个类中需要依赖其他对象时,不需要你亲自为那些需要依赖的对象赋值,为那些对象赋值的操作交给了<strong>IOC框架</strong>(如Dagger2)。例如，我们在做项目时，经常需要在一个对象里去创建另一个对象的示例，这种行为是<strong>产生耦合</strong>的常见形式，对于一个大型项目来说，过多的相互依赖会导致代码难以维护，很容易就会碰到修改一个小需求需要大面积的修改各种代码，特别是代码原来不是自己维护的，麻烦会更大。</p>
</blockquote>
<h2 id="小例子"><a href="#小例子" class="headerlink" title="小例子"></a>小例子</h2><blockquote>
<p>有一家咖啡店CoffeeShop，向顾客提供咖啡，我们非常容易明白咖啡店CoffeeShop是不能自己生产咖啡给顾客的，他们只能通过不同咖啡制作方法来生产咖啡供顾客饮用，此时抽象一个接口CoffeeMaker。</p>
</blockquote>
<h3 id="传统做法"><a href="#传统做法" class="headerlink" title="传统做法"></a>传统做法</h3><ul>
<li><p>业务核心类是CoffeeShop，通过CoffeeMaker负责生产Coffee并进行售卖</p>
<p>  /**</p>
<ul>
<li>这是一个售卖Coffee的例子</li>
<li>CoffeeMaker是对生成Coffee过程的一个封装</li>
<li><p>制作Coffee需要实现CoffeeMaker的produceCoffee方法<br>*/<br>public class CoffeeShop {</p>
<p> private CoffeeMaker mCoffeeMachine;</p>
<p> public CoffeeShop(CoffeeMaker coffeeMachine) {</p>
<pre><code>mCoffeeMachine = new SimpleCoffeeMachine();
</code></pre><p> }</p>
<p> public String provideCoffee() {</p>
<pre><code>return mCoffeeMachine.produceCoffee();
</code></pre><p> }<br>}</p>
</li>
</ul>
</li>
<li><p>Coffee的实际生产接口CoffeeMaker</p>
<p>  public interface CoffeeMaker {</p>
<pre><code>String produceCoffee(); // 实际生成咖啡的方法
</code></pre><p>  }</p>
</li>
<li><p>实际的Coffee生产者，下面是简单的咖啡机SimpleCoffeeMachine</p>
<p>  public class SimpleCoffeeMachine implements CoffeeMaker {</p>
<pre><code>@Override
public String produceCoffee() {
    return &quot;Coffee is made by SimpleCoffeeMachine&quot;;
}
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>刚开始咖啡都是咖啡机做出来的，这家咖啡店很简单，在CoffeeShop中可以看到，CoffeeShop持有了一个CoffeeMaker生产接口，而具体制作Coffee的过程是由实现了CoffeeMaker的自动咖啡机SimpleCoffeeMachine实现的，CoffeeMaker是在构造方法中new 出了一个实现CoffeeMaker接口的SimpleCoffeeMachine。当前的功能很简单，这么写看着也没什么问题。</p>
<p>随着业务的扩展，消费人群改变了，自动咖啡机SimpleCoffeeMachine也完全不能满足现有客户的需求，这个时候我们的CoffeeShop该进行业务升级。</p>
</blockquote>
<ul>
<li><p>雇佣<strong>咖啡师</strong>CoffeeCooker来制作咖啡。</p>
<p>  public class CoffeeCooker {</p>
<pre><code>private String mName; // 咖啡师名字
private String MCoffeeType; // 生产的Coffee类型

public CoffeeCooker(String name, String MCoffeeType) {
    mName = name;
    this.MCoffeeType = MCoffeeType;
}

public String produceCoffee() {
    return mName + &quot;制作了&quot; + MCoffeeType + &quot;的Coffee.&quot;;
}
</code></pre><p>  }</p>
</li>
<li><p>此时要升级SimpleCoffeeMachine了</p>
<p>  public class SimpleCoffeeMachine implements CoffeeMaker {</p>
<p>  //    @Override<br>  //    public String produceCoffee() {<br>  //        return “Coffee is made by SimpleCoffeeMachine”;<br>  //    }</p>
<pre><code>// 升级后
private CoffeeCooker mCoffeeCooker;

public SimpleCoffeeMachine(CoffeeCooker coffeeCooker) {
    mCoffeeCooker = coffeeCooker;
}
@Override
public String produceCoffee() {
    return mCoffeeCooker.produceCoffee();
}
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>基于目前的情况，我们制作咖啡的流程发生了变化，原来的业务随着CoffeeCooker的加入发生了改变，但细心的小伙伴会发现目前还有一个地方受到了影响，那就是我们的CoffeeShop，</p>
</blockquote>
<pre><code>public class CoffeeShop {

    private CoffeeMaker mCoffeeMaker;

//    public CoffeeShop(CoffeeMaker coffeeMachine) {
//        mCoffeeMachine = new SimpleCoffeeMachine();
//    }

    // 升级后
    public CoffeeShop(CoffeeCooker coffeeCooker) {
        mCoffeeMaker = new SimpleCoffeeMachine(coffeeCooker);
    }

    public String provideCoffee() {
        return mCoffeeMaker.produceCoffee();
    }
}
</code></pre><blockquote>
<p>我们的SimpleCoffeeMachine升级了，业务波动影响到了我们的CoffeeShop，这时候不得不对CoffeeShop也进行修改。这时候我们的CoffeeShop就懵逼了，你SimpleCoffeeMachine业务升级就升级呗，为毛我制造CoffeeShop的过程也要变动，非常的不愿意，但迫于老板的压力。最后还是给整改了。很明显，这是一个<strong>不合适的流程</strong>，简单的一个业务的升级，还要我们对整个咖啡店进行修改，那如果业务非常复杂，引用了SimpleCoffeeMachine的可不仅仅是CoffeeShop一个，那是不是每个引用的地方都需要进行修改，业务庞大的情况下，这种修改就是致命的，不仅需要做大量没有意义的体力劳动来修改，还可能导致大片业务代码的变动直接<strong>增加测试的成本</strong>，其他接收这个需求的开发人员直接得跪键盘了，一个S SimpleCoffeeMachine的改动对CoffeeShop产生了直接的影响，肯定有什么地方是不对的。原因就是CoffeeShop里的SimpleCoffeeMachine是<strong>自己new出来的</strong>。这就是一个很不好的地方。这种糟糕的<strong>实例引用的方式</strong>我们称之为<strong>硬初始化（Hard init）</strong>，和<strong>硬编码（Hard coding）</strong>一样，都是糟糕代码滋生的好方法，Hard init不仅增加了<strong>各个模块的耦合</strong>，还让<strong>单元测试</strong>变得<strong>更加困难</strong>了。</p>
</blockquote>
<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote>
<p>那么该用什么方法来尽量地<strong>降低各个模块的耦合</strong>，避免<strong>new对象</strong>带来的问题呢。我们知道，类的初始化可以<strong>描述成new</strong>,get和set，new就是我们上面说的Hard init，容易增加各个模块之间的耦合，而<strong>get，则可以看做是工厂模式</strong>，工厂模式是new的一个<strong>升级版本</strong>，相对硬初始化来说，工厂模式把<strong>对象的创建都集中在工厂</strong>里了，对于需要依赖的类来说，无需再考虑对象的创建工作了，只需要关注如何从工厂里获得，在发生修改时也不会有太多的改动，和以前的方案比起来要好了不少。但工厂模式的对象创建依然非常的不灵活，对象的实现<strong>完全取决于工厂</strong>，会导致原来的<strong>依赖由具体的对象</strong>变为<strong>依赖相应的工厂</strong>，本质上还是有依赖关系的！！！对，工厂模式并没有改变本质的<strong>依赖关系</strong>，而且，对于简单职责的工厂来说，抽出一层工厂似乎并不会太麻烦，但当我们的工厂中提供的类的实现复杂起来时，又回到了最初的问题上，我们是在工厂中new对象还是继续给工厂中的内容再提供一个工厂呢，这种层层嵌套会让我们的代码变得干涩难懂，也会有<strong>设计过度</strong>的嫌疑，工厂模式在解决依赖问题还是有点尴尬。</p>
</blockquote>
<h3 id="手动依赖注入"><a href="#手动依赖注入" class="headerlink" title="手动依赖注入"></a>手动依赖注入</h3><blockquote>
<p>那么最后还有一个<strong>set</strong>，也就是我们的<strong>依赖注入</strong>了，依赖注入的依赖是<strong>从外部传递过来的</strong>，而且在Java平台上很多时候都是通过<strong>反射或者动态编译</strong>来提供<strong>依赖注入</strong>，这样就更加剥离的各个部分的耦合性，也让上述两种方式只能望其项背了。</p>
<p>依赖注入主要有三种途径：</p>
</blockquote>
<pre><code>public class CoffeeShopWithInjection implements InjectMaker {

    private CoffeeMaker mCoffeeMaker;

    // 第1种依赖注入方式: 构造器注入
    public CoffeeShopWithInjection(CoffeeMaker coffeeMaker) {
        mCoffeeMaker = coffeeMaker;
    }

    // 第2种依赖注入方式: Setter注入
    public void setCoffeeMaker(CoffeeMaker coffeeMaker) {
        mCoffeeMaker = coffeeMaker;
    }

    // 第3种依赖注入方式: 接口注入
    @Override
    public void injectMaker(CoffeeMaker coffeeMaker) {
        mCoffeeMaker = coffeeMaker;
    }

    public String produceCoffee() {
        return mCoffeeMaker.produceCoffee();
    }
}
</code></pre><blockquote>
<p>InjectMarker接口内容如下：</p>
</blockquote>
<pre><code>public interface InjectMaker {
    void injectMaker(CoffeeMaker coffeeMaker);
}
</code></pre><blockquote>
<p>依赖注入的最基本的原理比较容易理解，就是不要在需要依赖的类中通过<strong>new</strong>来创建依赖而是<strong>通过方法提供的参数注入进来</strong>，这样我们的需要依赖的类和提供依赖的类的实现方法分隔开了。不过这种<strong>手动提供依赖</strong>也是很繁杂的工作，充满的浓浓的重复体力劳动的气息，如何来尽量减少这些冗余代码的制作呢，答案就是下一部分。</p>
</blockquote>
<h3 id="依赖注入框架-Dagger2"><a href="#依赖注入框架-Dagger2" class="headerlink" title="依赖注入框架(Dagger2)"></a>依赖注入框架(Dagger2)</h3><blockquote>
<p>一般的IOC框架都是通过<strong>反射</strong>来实现的,但Dagger2作为Android端的IOC框架,为了不影响性能,它是通过<strong>apt动态生成代码</strong>来实现的.</p>
</blockquote>
<h4 id="Dagger2主要分为三个模块"><a href="#Dagger2主要分为三个模块" class="headerlink" title="Dagger2主要分为三个模块"></a>Dagger2主要分为三个模块</h4><ul>
<li>依赖提供方Module,负责提供依赖中所需要的对象,实际编码中类似于<strong>工厂类</strong></li>
<li>依赖需求方实例,它声明依赖对象,它在实际编码中对应<strong>业务类</strong>,例如Activity,当你在Activity中需要某个对象时,你只要在其中<strong>声明</strong>就行,声明的方法在下面会讲到</li>
<li>依赖注入组件Component,负责将对象注入到依赖需求方,它在实际编码中是<strong>一个接口</strong>,编译时Dagger2会自动为它生成一个实现类</li>
</ul>
<h4 id="Dagger2的主要工作流程"><a href="#Dagger2的主要工作流程" class="headerlink" title="Dagger2的主要工作流程"></a>Dagger2的主要工作流程</h4><ul>
<li>将依赖需求方实例传入给Component实现类</li>
<li>Component实现类根据依赖需求方实例中<strong>依赖声明</strong>,来确定该实例需要依赖哪些对象</li>
<li>确定依赖对象后,Component会在与自己关联的<strong>Module类</strong>中查找有没有提供<strong>这些依赖对象的方法</strong>,有的话就将Module类中提供的对象<strong>设置到依赖需求方实例中</strong></li>
</ul>
<blockquote>
<p>通俗上来讲就好比你现在需要一件衣服,自己做太麻烦了,你就去商店买,你跟商店老板说明你想要购买的类型后,商店老板就会在自己的衣服供应商中查找有没有你所说的类型,有就将它卖给你.其中<strong>你就对应上面所说的依赖需求方实例</strong>,你只要说明你需要什么,<strong>商店老板则对应Component实现类</strong>,负责满足别人的需求,而<strong>衣服供应商则对应Module类</strong>,他负责生产衣服.也许这里有点绕,但经过下面的Demo,也许能够帮助你理解.</p>
</blockquote>
<h4 id="在项目中引入Dagger2"><a href="#在项目中引入Dagger2" class="headerlink" title="在项目中引入Dagger2"></a>在项目中引入Dagger2</h4><p><strong>在项目下的build.gradle文件中添加apt插件</strong></p>
<pre><code>buildscript {
    ...
    dependencies {
        classpath &apos;com.android.tools.build:gradle:2.2.2&apos;
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        //添加apt插件
        classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;
    }
}
...
</code></pre><p><strong>在app目录的build.gradle文件中添加</strong></p>
<pre><code>apply plugin: &apos;com.android.application&apos;
//应用apt插件,一定要放在下面
apply plugin: &apos;com.neenbedankt.android-apt&apos;
...
dependencies {
    ...
    //引入dagger2
    compile &apos;com.google.dagger:dagger:2.4&apos;
    apt &apos;com.google.dagger:dagger-compiler:2.4&apos;
    //java注解
    provided &apos;org.glassfish:javax.annotation:10.0-b28&apos;
}
</code></pre><h4 id="Module类注入方式"><a href="#Module类注入方式" class="headerlink" title="Module类注入方式"></a>Module类注入方式</h4><p><strong>编写布料类Cloth</strong></p>
<blockquote>
<p>写一个Cloth类用作依赖对象,它包含一个color属性</p>
</blockquote>
<pre><code>public class Cloth {
    private String color;

    public String getColor() {
        return color;
    }

    public void setColor(String color) {
        this.color = color;
    }

    @Override
    public String toString() {
        return color + &quot;布料&quot;;
    }
}
</code></pre><p><strong>书写Module类</strong></p>
<blockquote>
<p>现在的需求是MainActivity中需要使用到Cloth对象,所以我们要为MainActivity书写一个Module类用来提供Cloth对象,相当于创建了一个<strong>提供商</strong></p>
</blockquote>
<pre><code>@Module
public class MainModule {
    @Provides
    public Cloth getCloth() {
        Cloth cloth = new Cloth();
        cloth.setColor(&quot;红色&quot;);
        return cloth;
    }
}
</code></pre><blockquote>
<p>嗯?怎么多了两个注解?这两个注解有什么用呢?<br><strong>注解</strong>是Dagger2中的关键,编写<strong>Module类</strong>时要在该类上声明<strong>@Module</strong>以表明该类是Module类,这样Dagger2才能识别,那<strong>@Provides</strong>又是干嘛的呢?它的作用是声明Module类中<strong>哪些方法是用来提供依赖对象的</strong>,当<strong>Component类</strong>需要<strong>依赖对象</strong>时,他就会根据<strong>返回值的类型</strong>来在<strong>有@Provides注解的方法中选择调用哪个方法</strong>.在一个方法上声明@Provides注解,就相当于创建了<strong>一条生产线</strong>,这条生产线的产物就是方法的<strong>返回值类型</strong>.有了这条生产线,供应商就能<strong>提供这种类型的商品</strong>了,当商店老板（Component类）发现有人（依赖需求方）需要这种类型的商品时,<strong>供应商Module</strong>就可以提供给他了。</p>
</blockquote>
<p><strong>书写Component接口</strong></p>
<pre><code>@Component(modules = MainModule.class)
public interface MainComponent {
    void inject(MainActivity mainActivity);
}
</code></pre><blockquote>
<p>和Module类一样,<strong>Component类</strong>也是需要注解声明的,那个注解就是<strong>@Component</strong>,但是@Component注解的作用可<strong>不是单单用来声明Component类</strong>,他还有更强大的功能,@Component注解有<strong>modules和dependencies</strong>两个属性,这两个属性的类型都是<strong>Class数组</strong>,modules的作用就是<strong>声明该Component含有哪几个Module</strong>,即有几个供应商,当Component需要<strong>某个依赖对象</strong>时,就会通过<strong>这些Module类中对应的方法</strong>获取依赖对象,MainComponent中只包含<strong>MainModule</strong>,所以令modules=MainModule.class,<strong>相当于供应商和商店老板确定合作关系的合同</strong>.而<strong>dependencies属性则是声明Component类的依赖关系</strong>,这个下面再详讲.</p>
<p><strong>接口中那个方法</strong>又是干嘛用的呢?</p>
<p>我们现在只是声明了Component类,但我们要怎么将<strong>Component类和依赖需求方</strong>对象联合起来呢?答案就是通过这个<strong>inject方法</strong>,这个方法可以将依赖需求方对象送到Component类中,Component类就会根据<strong>依赖需求方对象中声明的依赖关系</strong>来<strong>注入依赖需求方对象中所需要的对象</strong>,本Demo中<strong>MainActivity（依赖需求方）</strong>中需要<strong>Cloth对象</strong>,所以我们通过inject方法将MainActivity实例传入到MainComponent中,MainComponent就会从MainModule中的getCloth方法获取Cloth实例,并将该实例赋值给MainActivity中的cloth字段.相当于你去商店的道路,没有这条路,<strong>你就无法去商店和老板说明你所需要的东西</strong>.但是这里需要注意的是,<strong>inject方法的参数不能用子类来接收,例如本Demo中,如果inject的参数是Activity,那么Dagger2就会报错.</strong></p>
</blockquote>
<p><strong>在MainActivity中声明</strong></p>
<pre><code>public class MainActivity extends AppCompatActivity {
    private TextView mTextView;
    @Inject
    Cloth mCloth;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTextView = (TextView) findViewById(R.id.tv);

        MainComponent build = DaggerMainComponent.builder()
                .mainModule(new MainModule())
                .build();
        build.inject(this);

        mTextView.setText(&quot;我现在有&quot; + mCloth);
    }
}
</code></pre><blockquote>
<p>上面代码中有两处关键:</p>
</blockquote>
<ul>
<li><strong>声明依赖对象Cloth</strong>,就是在cloth字段上添加<strong>@Inject</strong>注解,Dagger2中<strong>声明依赖对象</strong>都是通过@Inject注解,但是@Inject注解的字段不能是<strong>private和protected的</strong>. </li>
<li>通过Dagger2自动生成的类来创建<strong>Component的实现类</strong>,创建时需要传入该Component实现类所需要的<strong>Module类实例</strong>,传入方法就是调用Module类类名首字母小写对应的方法.这里我们通过Dagger2自动生成的<strong>DaggerMainComponent</strong>类创建了MainComponent的实例,相当于我们创建了一个实实在在的商店,不再是理论上的商店,但是创建商店一定也要创建真实的供应商嘛,所以创建Component实现类时一定要<strong>传入Module的实例.</strong>(注意编写完Component接口后Dagger2并不会自动创建对应的类,需要我们点击Android Studio中bulid菜单下的Rebulid Poject选项,或者直接书写代码,编译时Dagger2就会帮你自动生成).<br>  再将MainActivity通过inject方法发送到MainComponent中,调用完<strong>inject方法</strong>后,你就会发现,MainActivity中的<strong>mCloth字段已经被赋值</strong>,而且该mCloth对应的就是我们在<strong>MainModule类getCloth方法中创建的Cloth对象.</strong></li>
</ul>
<p><strong>运行结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1818011-f8884b1f3c71e61d.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h4 id="注解依赖对象注入方式"><a href="#注解依赖对象注入方式" class="headerlink" title="注解依赖对象注入方式"></a>注解<strong>依赖对象</strong>注入方式</h4><blockquote>
<p>前面的例子可能给人最大的感受就是麻烦吧?就是为mCloth赋个值,又要写什么Module类,又是要写什么Component接口.其实Dagger2还可以用注解来提供依赖对象.让我们来瞧瞧怎么使用.</p>
</blockquote>
<p><strong>创建依赖类Shoe</strong></p>
<blockquote>
<p>我们又创建一个依赖类Shoe</p>
</blockquote>
<pre><code>public class Shoe {
    @Inject
    public Shoe() {}

    @Override
    public String toString() {
        return &quot;鞋子&quot;;
    }
}
</code></pre><blockquote>
<p>但是这次我们创建的方<strong>式和Cloth不一样了</strong>,我们在<strong>构造函数上声明了@Inject注解</strong>,这个注解有什么用呢?作用可大了,<strong>当Component在所拥有的Module类中找不到依赖需求方需要类型的提供方法时</strong>,Dagger2就会检查该需要类型的<strong>有没有用@Inject声明的构造方法</strong>,<strong>有则用该构造方法创建一个</strong>.</p>
<p>相当于你去商店购买东西,你需要的东西商店的供应商不生产,商店老板就只好帮你去网上看看有没有你需要的东西,有则帮你网购一个.</p>
</blockquote>
<p><strong>在MainActivity中声明Shoe依赖</strong></p>
<blockquote>
<p>我们修改之前的MainActivity,添加一点东西</p>
</blockquote>
<pre><code>public class MainActivity extends AppCompatActivity {
    private TextView mTextView;
    @Inject
    Cloth mCloth;
    @Inject
    Shoe mShoe;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTextView = (TextView) findViewById(R.id.tv);

        MainComponent build = DaggerMainComponent.builder()
                .mainModule(new MainModule())
                .build();
        build.inject(this);

        //mTextView.setText(&quot;我现在有&quot; + mCloth);
        mTextView.setText(&quot;我现在有&quot; + mCloth + &quot;和&quot; + mShoe);
    }
}
</code></pre><p><strong>运行结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1818011-e9598e0d6581d92f.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>注意</strong></p>
<blockquote>
<p>有些读者可能会这样想:为什么不都用这种方法来声明呢?为什么要用Module类?<br>答案是这样的,项目中我们会用到<strong>别人的jar包</strong>,我们无法修改别人的源码,就更别说<strong>在人家的类上添加注解了</strong>,所以我们只能通过Module类来提供.</p>
</blockquote>
<h4 id="复杂一点的使用情况"><a href="#复杂一点的使用情况" class="headerlink" title="复杂一点的使用情况"></a>复杂一点的使用情况</h4><blockquote>
<p>我们创建的这些<strong>依赖类</strong>都<strong>不用依赖于其它依赖类</strong>,但是如果需要依赖于其它依赖类又要怎么弄呢?</p>
</blockquote>
<p><strong>创建依赖类Clothes</strong></p>
<blockquote>
<p>我们又来创建一个<strong>衣服类Clothes</strong>,制作衣服时<strong>需要布料</strong>,所以我们在创建Clothes的实例时需要<strong>用到Cloth实例</strong>(依赖到Cloth类)</p>
</blockquote>
<pre><code>public class Clothes {
    private Cloth cloth;
    public Clothes(Cloth cloth) {
        this.cloth = cloth;
    }
    public Cloth getCloth() {
        return cloth;
    }
    @Override
    public String toString() {
        return cloth.getColor() + &quot;衣服&quot;;
    }
}
</code></pre><p><strong>在Module类中增加提供方法</strong></p>
<blockquote>
<p>现在我们的MainActivity中需要<strong>依赖于Clothes对象</strong>,所以我们在MianModule中<strong>添加提供Clothes对象的方法</strong>,但是<strong>Clothes需要依赖于Cloth对象</strong>,这要怎么办呢?可能最先想到的办法就是这样:</p>
</blockquote>
<pre><code>@Provides
    public Clothes getClothes() {
        Cloth cloth = new Cloth();
        cloth.setColor(&quot;红色&quot;);
        return new Clothes(cloth);
}
</code></pre><blockquote>
<p>直接在方法中创建一个Cloth不就得了,但是你有没有发现,创建Cloth的代码已经在<strong>getCloth方法中有了</strong>,我们能不能用getCloth方法中创建的Cloth实例来创建Clothes实例呢?</p>
<p>Dagger2提供了这样的功能,我们只要在getClothes方法中<strong>添加Cloth参数</strong>,Dagger2就会像帮<strong>依赖需求方找依赖对象一样帮你找到该方法依赖的Cloth实例</strong>,所以我们代码可以这样改:</p>
</blockquote>
<pre><code>@Provides
    public Clothes getClothes(Cloth cloth) {
        return new Clothes(cloth);
}
</code></pre><p><strong>在MainActivity中声明Clothes依赖</strong></p>
<pre><code>public class MainActivity extends AppCompatActivity {
    ...
    @Inject
    Clothes clothes;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...
        tv.setText(&quot;我现在有&quot; + cloth + &quot;和&quot; + shoe + &quot;和&quot; + clothes);
    }
}
</code></pre><p><strong>运行结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1818011-edb92a97c1ae2c15.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<blockquote>
<p>同理,在带有@Inject注解的构造函数要是依赖于其它对象,Dagger2也会帮你自动注入.</p>
</blockquote>
<p><strong> 创建依赖类Shirt</strong></p>
<pre><code>public class Shirt {
    Cloth mCloth;
    @Inject
    public Shirt(Cloth cloth) {
        mCloth = cloth;
    }
    @Override
    public String toString() {
        return mCloth + &quot;T恤&quot;;
    }
}
</code></pre><p><strong>在MainActivity中声明Shirt依赖</strong></p>
<pre><code>public class MainActivity extends AppCompatActivity {
    ...
    @Inject
    Shirt mShirt;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...
        mTextView.setText(&quot;我现在有&quot; + mCloth + &quot;和&quot; + mShoe + &quot;和&quot; + mClothes + &quot;和&quot; + mShirt);
    }
}
</code></pre><p><strong>运行结果</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo1.png" alt=""></p>
<h4 id="依赖总结"><a href="#依赖总结" class="headerlink" title="依赖总结"></a>依赖总结</h4><blockquote>
<p>引用<a href="https://dreamerhome.github.io/2016/07/07/dagger/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">依赖注入神器：Dagger2详解系列</a>中的一段话:<br>我们有<strong>两种方式可以提供依赖</strong>，一个是<strong>注解了@Inject的构造方法</strong>，一个是在<strong>Module里提供的依赖</strong>，那么Dagger2是怎么选择依赖提供的呢，规则是这样的：</p>
</blockquote>
<ul>
<li>步骤1：查找Module中是否存在创建该类的方法</li>
<li>步骤2：若存在创建类方法，查看该方法是否存在参数<ul>
<li>步骤2.1：若存在参数，则按从步骤1开始依次初始化每个参数</li>
<li>步骤2.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</li>
</ul>
</li>
<li>步骤3：若不存在创建类方法，则查找Inject注解的构造函数，看构造函数是否存在参数<ul>
<li>步骤3.1：若存在参数，则从步骤1开始依次初始化每个参数</li>
<li>步骤3.2：若不存在参数，则直接初始化该类实例，一次依赖注入到此结束</li>
</ul>
</li>
</ul>
<p><strong>也就说Dagger2会递归的提供依赖</strong></p>
<h4 id="Named和-Qulifier注解的使用"><a href="#Named和-Qulifier注解的使用" class="headerlink" title="@Named和@Qulifier注解的使用"></a>@Named和@Qulifier注解的使用</h4><p><strong>@Named</strong></p>
<blockquote>
<p>假设我们现在又有了新的需求,MainActivity中需要<strong>两种布料</strong>,分别是红布料和蓝布料,但我们的MainModule类中只能提供红布料,怎么办呢?<br>读者可能会想:在MainModule类中再添加一个提供蓝布料的方法不就行了:</p>
</blockquote>
<pre><code>@Provides
public Cloth getRedCloth() {
    Cloth cloth = new Cloth();
    cloth.setColor(&quot;红色&quot;);
    return cloth;
}
@Provides
public Cloth getBlueCloth() {
    Cloth cloth = new Cloth();
    cloth.setColor(&quot;蓝色&quot;);
    return cloth;
}
</code></pre><blockquote>
<p>可问题就来了,Dagger2<strong>是通过返回值类型来确定的</strong>,当你需要红布料时,它又怎么知道哪个是红布料呢?所以Dagger2为我们提供<strong>@Named</strong>注解,它怎么使用呢?它有一个value值,<strong>用来标识这个方法是给谁用的</strong>.修改我们的代码:</p>
</blockquote>
<pre><code>@Provides
@Named(&quot;red&quot;)
public Cloth getRedCloth() {
    Cloth cloth = new Cloth();
    cloth.setColor(&quot;红色&quot;);
    return cloth;
}
@Provides
@Named(&quot;blue&quot;)
public Cloth getBlueCloth() {
    Cloth cloth = new Cloth();
    cloth.setColor(&quot;蓝色&quot;);
    return cloth;
}
</code></pre><blockquote>
<p>我们在getRedCloth方法上使用<strong>@Named(“red”)表明此方法返回的是红布料</strong>,同理,在<strong>getBlueCloth方法上使用@Named(“blue”)</strong>表明此方法返回的是蓝布料,接下我们只要在MainActivity中的布料字段上<strong>同样使用@Named注解</strong>,就可以<strong>一一配对</strong>了.</p>
</blockquote>
<pre><code>public class MainActivity extends AppCompatActivity {
    ...
    @Inject
    @Named(&quot;red&quot;)
    Cloth redCloth;
    @Inject
    @Named(&quot;blue&quot;)
    Cloth blueCloth;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...
        tv.setText(&quot;我现在有&quot; + mRedCloth + &quot;和&quot; + mBlueCloth );
    }
}
</code></pre><blockquote>
<p>在redCloth上用@Named(“red”)标记后,他就会对应Module中对应的方法.</p>
</blockquote>
<p><strong>运行结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1818011-2fcd4ed5a6a53f9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><strong>@Qulifier</strong></p>
<blockquote>
<p>@Qulifier功能和@Named一样,并且@Named就是继承@Qulifier的,我们要怎么使用@Qulifier注解呢?答案就是自定义一个注解:</p>
</blockquote>
<pre><code>@Qualifier
@Retention(RetentionPolicy.RUNTIME)
public @interface RedCloth {
}
</code></pre><blockquote>
<p>有了这个注解,我们就可以用它在替换掉上面的@Named(“red”),效果是一样的.</p>
</blockquote>
<p><strong>略</strong></p>
<blockquote>
<p>而且这两个注解还能使用在依赖参数上,比如这个:</p>
</blockquote>
<pre><code>@Provides
 public Clothes getClothes(@Named(&quot;blue&quot;) Cloth cloth){
     return new Clothes(cloth);
 }
</code></pre><blockquote>
<p>效果和上面说明的一样,进入这个方法的cloth由上面有@Named(“blue”)的方法提供</p>
</blockquote>
<h4 id="Singleton和-Scope的使用"><a href="#Singleton和-Scope的使用" class="headerlink" title="@Singleton和@Scope的使用"></a>@Singleton和@Scope的使用</h4><p><strong>@Singleton</strong></p>
<blockquote>
<p>假设现在MainActivity中需要依赖Clothes和Cloth,我们在MainModule中提供这两个类的提供方法:</p>
</blockquote>
<pre><code>@Provides
@Named(&quot;blue&quot;)
public Cloth getBlueCloth() {
    Cloth cloth = new Cloth();
    cloth.setColor(&quot;蓝色&quot;);
    return cloth;
}
@Provides
public Clothes getClothes(@Named(&quot;blue&quot;) Cloth cloth) {
    return new Clothes(cloth);
}
</code></pre><blockquote>
<p>接着在MainActivity中声明</p>
</blockquote>
<pre><code>mTextView.setText(&quot;mBlueCloth=mClothes中的mBlueCloth吗?:&quot; + (mBlueCloth == mClothes.getCloth()));
</code></pre><p><strong>运行结果</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo2.png" alt=""></p>
<blockquote>
<p>你会发现,MainActivity中的<strong>Cloth对象</strong>和<strong>Clothes中的Cloth对象</strong>并<strong>不是同一个对象</strong>,注入过程中,对mBlueCloth注入时会调用一次getBlueCloth方法,<strong>创建了一个Cloth对象</strong>;注入mClothes时又会调用一次getBlueCloth方法,这时<strong>又会创建一个Cloth对象</strong>,所以才会出现上面的结果.但是如果需要MainActivity中的mBlueCloth对象和mClothes中的mBlueCloth对象是<strong>同一个对象</strong>又要怎么办呢?Dagger2为我们提供了<strong>@Singleton</strong>注解,和名字一样,这个注解的作用就是<strong>声明单例模式</strong>,我们先看看它怎么使用,下面再讲原理.</p>
</blockquote>
<p><strong>首先,在getRedCloth方法上添加该注解</strong></p>
<pre><code>@Provides
@Named(&quot;blue&quot;)
@Singleton
public Cloth getBlueCloth() {
    Cloth cloth = new Cloth();
    cloth.setColor(&quot;蓝色&quot;);
    return cloth;
}
</code></pre><p><strong>再在MainComponent接口上添加该注解</strong></p>
<pre><code>@Singleton
@Component(modules = MainModule.class)
public interface MainComponent {
    void inject(MainActivity mainActivity);
}
</code></pre><p><strong>运行结果</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo3.png" alt=""></p>
<blockquote>
<p>有没有发现,MainActivity中的Cloth对象和Clothes中的Cloth对象是同一个对象了,是不是很神奇!</p>
</blockquote>
<p><strong>Scope</strong></p>
<blockquote>
<p>@Singleton是怎么实现的呢?我们先看看<strong>@Scope注解</strong>,弄懂它,@Singleton你也就会明白了,下面我们就来分析分析<br>顾名思义,@Scope就是用来<strong>声明作用范围的</strong>.@Scope和@Qulifier一样,需要我们<strong>自定义注解才能使用,</strong>我们先自定义一个注解:</p>
</blockquote>
<pre><code>@Scope
@Retention(RetentionPolicy.RUNTIME)
public @interface PreActivity {
}
</code></pre><blockquote>
<p>这个注解有什么用呢?答案就是<strong>声明作用范围</strong>,当我们将这个注解使用在Module类中的Provide方法上时,就是声明这个Provide方法是在PerActivity作用范围内的,并且当一个Component要引用这个Module时,必须也要声明这个Component是PerActivity作用范围内的,否则就会报错,声明方法也很简单,就是在Component接口上使用这个注解.但是我们声明这个作用范围又有什么用呢?</p>
<p>原来Dagger2有这样一个机制:在同一个作用范围内,Provide方法<strong>提供的依赖对象就会变成单例</strong>,也就是说依赖需求方不管依赖几次Provide方法提供的依赖对象,Dagger2都<strong>只会调用一次这个方法</strong>.就和上面那个例子一样,正常情况下,在注入MainActivity中的mBlueCloth对象时会调用一次getBlueCloth方法,注入mClothes对象时因为依赖Cloth对象,所以又会调用一次getBlueCloth方法,导致这两个Cloth对象并不是同一个实例.但是我们给它<strong>声明作用范围</strong>后,这两次对Cloth的依赖<strong>只会调用一次getBlueCloth方法</strong>,这样这两个Cloth对象就是同一实例了,这样就保证了在给MainActivity注入时,所有声明的<strong>Cloth</strong>依赖都是指向同一个实例.(注意:只有Module类中声明了作用范围的Provide方法才能实现单例,没声明的方法就不是单例的)</p>
<p>查看源码你会发现Singleton其实是<strong>继承@Scope注解的</strong>,所以你知道了Singleton是怎么实现单例模式的吧.</p>
<p>可能有些读者可能会问,Dagger2既然有了Singleton为什么还要我们<strong>自定义PerActivity注解</strong>?这就涉及到<strong>代码可读性</strong>了,当<strong>依赖需求方是Activity</strong>时,我们可以自定义一个PerActivity注解,当<strong>依赖需求方是Fragment时</strong>,我们又可以自定义一个PerFragment注解,这样我们就能清楚的区分依赖对象的提供目标了.</p>
<p>那我们通过<strong>构造函数提供依赖的方式又要怎么声明作用范围</strong>呢?答案就是在<strong>类名上使用注解标明</strong>,<strong>切记不要在构造函数上用注解标明,这样是无效的</strong>.<br>读者可以试试用PerActivity注解代替上面例子中的Singleton注解,你会发现效果是一样的.</p>
<p><strong>注意注意注意</strong>:单例是在<strong>同一个Component实例提供依赖的前提下才有效的</strong>,<strong>不同的Component实例只能通过Component依赖才能实现单例</strong>.也就是说,你虽然在两个Component接口上都添加了PerActivity注解,但是这两个Component提供依赖时是<strong>没有联系</strong>的,他们<strong>只能在各自的范围内实现单例</strong>.(下面会降到)</p>
</blockquote>
<h4 id="组件依赖dependencies的使用"><a href="#组件依赖dependencies的使用" class="headerlink" title="组件依赖dependencies的使用"></a>组件依赖dependencies的使用</h4><blockquote>
<p>在实际开发中,我们经常会使用到工具类,工具类一般在<strong>整个App的生命周期内都是单例的</strong>,我们现在给我们的Demo添加一个工具类ClothHandler:</p>
</blockquote>
<pre><code>public class ClothHandler {
    public Clothes handle(Cloth cloth){
        return new Clothes(cloth);
    }
}
</code></pre><blockquote>
<p>它的功能就是<strong>将cloth加工成clothes,</strong>假设我们现在有<strong>两个Activity</strong>中都要使用该工具类,我们要怎么使用Dagger2帮我们注入呢?</p>
<p>我们先用上面所学的方法试试,先在MainModule中添加提供方法:</p>
</blockquote>
<pre><code>@Module
public class MainModule {
     .....
    @PerActivity
    @Provides
    public ClothHandler getClothHandler(){
        return new ClothHandler();
    }
}
</code></pre><blockquote>
<p>再在MainActivity中声明依赖</p>
</blockquote>
<pre><code>public class MainActivity extends AppCompatActivity {
        .....    
    @Inject
    ClothHandler mClothHandler;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ......
    mTextView.setText(&quot;红布料加工后变成了&quot; + mClothHandler.handle(mRedCloth) + &quot;\nmClothHandler地址:&quot; + mClothHandler);
    }
    //在布局文件中声明的点击方法
    public void onclick(View view) {
        Intent intent = new Intent(this,SecondActivity.class);
        startActivity(intent);
    }
}
</code></pre><blockquote>
<p>同理在书写第二个Activity,并为它书写Module类Component接口</p>
</blockquote>
<pre><code>public class SecondActivity extends AppCompatActivity {
    private TextView tv;
    @Inject
    Cloth mBlueCloth;
    @Inject
    ClothHandler mClothHandler;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);
        tv = (TextView) findViewById(R.id.tv2);
        SecondComponent component = DaggerSecondComponent.builder()
                .secondModule(new SecondModule())
                .build();
        component.inject(this);
        tv.setText(&quot;蓝布料加工后变成了&quot; + mClothHandler.handle(mBlueCloth) + &quot;\nmClothHandler地址:&quot; + mClothHandler);
    }
}

@Module
public class SecondModule {
    @PreActivity
    @Provides
    public Cloth getBlueCloth(){
        Cloth cloth = new Cloth();
        cloth.setColor(&quot;蓝色&quot;);
        return cloth;
    }
    @PreActivity
    @Provides
    public ClothHandler getClothHandler(){
        return new ClothHandler();
    }
}

@Component(modules = SecondModule.class)
@PreActivity
public interface SecondComponent {
    void inject(SecondActivity secondActivity);
}
</code></pre><p><strong>运行结果</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo4.png" alt=""><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo5.png" alt=""></p>
<blockquote>
<p>你会发现,虽然我们成功的将ClothHandler注入到了这两个Activity中,但是你会发现,这两个Activity中的ClothHandler<strong>实例不是一样的</strong>(验证了上面那个结论),并且我们发现这种注入方式要在每一个Module中都要提供getClothHandler方法, 假如有20个Activity都需要用到ClothHandler,那我们都这样写,不就代码重复了吗.并且我们还要实现单例,怎么办呢?Dagger2很贴心的为我们<strong>提供了Component依赖</strong>,就能完美的解决这个问题.</p>
<p>在面向对象的思想中,我们碰到这种情况一般都要<strong>抽取父类,</strong>Dagger2也是用的这种思想,我们先创建一个<strong>BaseModule</strong>,用来提供工具类:</p>
</blockquote>
<pre><code>@Module
public class BaseModule {
    @Singleton //单例
    @Provides
    public ClothHandler getClothHandler(){
        return new ClothHandler();
    }
}
</code></pre><blockquote>
<p>在创建一个BaseComponent接口:</p>
</blockquote>
<pre><code>@Singleton
@Component(modules = BaseModule.class)
public interface BaseComponent {
    ClothHandler getClothHandler();
}
</code></pre><blockquote>
<p>嗯?</p>
<p>这个Component怎么有点不一样,怎<strong>么没有inject方法呢?</strong>上面讲过,我们通过inject方法依赖需求方实例送到Component中,从而帮助依赖需求方实现依赖,但是我们<strong>这个BaseComponent是给其他Component提供依赖的</strong>,所以我们就可以不用inject方法,但是BaseComponent中多了一个<strong>getClothHandler方法,它的返回值是ClothHandler对象</strong>,这个方法有什么用呢?它的作用就是告诉<strong>依赖于BaseComponent的Component</strong>,<strong>BaseComponent能为你们提供ClothHandler对象</strong>,如果没有这个方法,BaseComponent就不能提供ClothHandler对象(这个提供规则和上面的依赖规则相同,可以实现单例).既然有了BaseComponent,那我们就可在其它Component中依赖它了.我们删除MainModule和SecondModule中的getClothHandler方法即可。</p>
<p>接下来在MainComponent和SecondComponent中声明依赖,就要用到@Component中的dependencies属性了:</p>
</blockquote>
<pre><code>@PreActivity
@Component(modules=MainModule.class,dependencies = BaseComponent.class)
public interface MainComponent {
    void inject(MainActivity mainActivity);
}

@PreActivity
@Component(modules = SecondModule.class,dependencies = BaseComponent.class)
public interface SecondComponent {
    void inject(SecondActivity secondActivity);
}
</code></pre><blockquote>
<p>下面我们用Android Studio中build菜单下的Rebuild Object选项后,你会发现创建MainComponent和SecondComponent实例时多了一个baseComponent方法:</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo6.png" alt=""> <img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo7.png" alt=""></p>
<blockquote>
<p>这个方法需要我们传入一个<strong>BaseComponent实例</strong>,原因很简单,MainComponent和SecondComponent既然<strong>依赖BaseComponent</strong>,肯定需要你传入一个<strong>BaseComponent实例</strong>给它,它才能从BaseComponent实例中获取到它需要的对象嘛.但是需要注意的是,如果要MainComponent和SecondComponent依赖到的对象是同一个的话(<strong>也就是单例</strong>),创建它们是<strong>传入的BaseComponent实例也必须是同一个</strong>,上面说过,不同的Component实例是无法提供相同的依赖实例的,因为它们之间是没有联系的.这样的话,我们就需要在MainActivity和SecondActivity中能获取到同一个BaseComponent实例,怎么样能实现呢?很多人一开始都会想到用<strong>静态工厂</strong>,这种方法可行,但是我们一般都会自定义一个<strong>Application类</strong>,用它来提供BaseComponent实例,因为在<strong>整个App生命周期内都只有一个Application实例</strong>,所以其中的BaseComponent实例也不会变.我们自定义一个MyApplication类</p>
</blockquote>
<pre><code>public class MyApplication extends Application {
    private BaseComponent baseComponent;
    @Override
    public void onCreate() {
        super.onCreate();
        baseComponent = DaggerBaseComponent.builder().baseModule(new BaseModule()).build();
    }

    public BaseComponent getBaseComponent() {
        return baseComponent;
    }
}
</code></pre><blockquote>
<p>我们在onCreate方法中创建BaseComponent实例,并对外提供获取方法.<br>这种方式还有一种好处,就是当我们在BaseModule中需要用到Application实例时,我们就可以在创建BaseModule时传入this.</p>
<p>接下来在AndroidManifest.xml中声明我们新建的MyApplication</p>
<p>接下来修改MainActivity和SecondActivity中的代码</p>
</blockquote>
<pre><code>MainComponent build = DaggerMainComponent
                .builder()
                .baseComponent(((MyApplication)getApplication()).getBaseComponent())
                .mainModule(new MainModule())
                .build();

SecondComponent component = DaggerSecondComponent
                .builder()
                .baseComponent(((MyApplication)getApplication()).getBaseComponent())
                .secondModule(new SecondModule())
                .build();
</code></pre><p><strong>运行结果</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo8.png" alt=""><img src="http://o9zgq2ik9.bkt.clouddn.com/dagger2demo9.png" alt=""></p>
<blockquote>
<p>我们成功的将ClothHandler注入到了这两个Activity中,并且还实现了单例.(注意:这里能实现单例跟BaseComponent中声明了@Singleton有很大关系,因为BaseComponent都没有单例的话,外部依赖它的Component就更不可能单例了).</p>
</blockquote>
<h4 id="Component的生命周期"><a href="#Component的生命周期" class="headerlink" title="Component的生命周期"></a>Component的生命周期</h4><blockquote>
<p>一般情况下我们都是在Activity的onCreate方法中创建Component实例,再调用inject方法完成依赖.所以Component依赖可以分为三个过程:</p>
</blockquote>
<ul>
<li><p>创建Component实例</p>
<p>  MainComponent component = DaggerMainComponent</p>
<pre><code>.builder()
.baseComponent(((MyApplication)getApplication()).getBaseComponent())
.mainModule(new MainModule())
.build();
</code></pre></li>
<li><p>调用inject方法</p>
<p>  component.inject(this);</p>
</li>
</ul>
<blockquote>
<p>调用完这个方法整个依赖就完成了.</p>
</blockquote>
<ul>
<li>Component实例被销毁</li>
</ul>
<blockquote>
<p>onCreate()方法调用完成后,Component实例就会因为没有被引用而被垃圾回收器回收.其中传入给Component实例的Module实例也会一同被回收,这也就能说明不同的Component实例之间是没有联系的(Component依赖除外).</p>
</blockquote>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<p>至此,Dagger2<strong>基础</strong>已讲完,对于Dagger2在项目中的使用方法,可以参考github上的开源项目.</p>
<p>最后我们引用一下<a href="http://blog.piasy.com/2016/04/11/Dagger2-Scope-Instance/" target="_blank" rel="external">Dagger2 Scope 注解能保证依赖在 component 生命周期内的单例性吗？</a>中的注意事项:</p>
</blockquote>
<ul>
<li>component 的 inject 函数不要声明基类参数；</li>
<li>Scope 注解必须用在 module 的 provide 方法上，否则并不能达到局部单例的效果；</li>
<li>如果 module 的 provide 方法使用了 scope 注解，那么 component 就必须使用同一个注解，否则编译会失败；</li>
<li>如果 module 的 provide 方法没有使用 scope 注解，那么 component 和 module 是否加注解都无关紧要，可以通过编译，但是没有局部单例效果；</li>
<li>对于直接使用 @Inject 构造函数的依赖，如果把 scope 注解放到它的类上，而不是构造函数上，就能达到局部单例的效果了；</li>
<li>被依赖的Component能提供某个对象时,一定要在接口中声明以该对象为返回值的方法(也就是<strong>暴露接口</strong>).这样依赖它的Component才能获取到这种对象.</li>
</ul>
<blockquote>
<p><a href="https://github.com/sh2zqp/Dagger2Demo" target="_blank" rel="external">源码入口</a></p>
</blockquote>
<p><strong>参考资料</strong></p>
<p><a href="https://google.github.io/dagger/" target="_blank" rel="external">Google官方介绍</a><br><a href="https://dreamerhome.github.io/2016/07/07/dagger/?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="external">依赖注入神器：Dagger2详解系列</a><br><a href="http://www.jianshu.com/p/1d84ba23f4d2" target="_blank" rel="external">Dagger2 入门,以初学者角度</a><br><a href="https://github.com/luxiaoming/dagger2Demo" target="_blank" rel="external">Dagger2图文完全教程</a><br><a href="http://blog.piasy.com/2016/04/11/Dagger2-Scope-Instance/" target="_blank" rel="external">Dagger2 Scope 注解能保证依赖在 component 生命周期内的单例性吗？</a><br><a href="https://github.com/codeestX/GeekNews" target="_blank" rel="external">GeekNews</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是Dagger2&quot;&gt;&lt;a href=&quot;#什么是Dagger2&quot; class=&quot;headerlink&quot; title=&quot;什么是Dagger2&quot;&gt;&lt;/a&gt;什么是Dagger2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Dagger2是Android中&lt;strong&gt;比
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
      <category term="Dagger2" scheme="http://yoursite.com/tags/Dagger2/"/>
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Ioc" scheme="http://yoursite.com/tags/Ioc/"/>
    
      <category term="控制反转" scheme="http://yoursite.com/tags/%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>Android内存优化之OOM</title>
    <link href="http://yoursite.com/2016/11/08/Android%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E4%B9%8BOOM/"/>
    <id>http://yoursite.com/2016/11/08/Android内存优化之OOM/</id>
    <published>2016-11-08T14:34:10.000Z</published>
    <updated>2016-11-08T14:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Android的<strong>内存优化</strong>是<strong>性能优化</strong>中很重要的一部分，而<strong>避免OOM</strong>又是内存优化中比较核心的一点，这是一篇关于内存优化中如何避免OOM的总结性概要文章，内容大多都是和OOM有关的实践总结概要。</p>
</blockquote>
<h3 id="Android的内存管理机制"><a href="#Android的内存管理机制" class="headerlink" title="Android的内存管理机制"></a>Android的内存管理机制</h3><blockquote>
<p>Google在Android的官网上有这样<a href="http://developer.android.com/training/articles/memory.html" target="_blank" rel="external">一篇文章</a>，初步介绍了Android是<strong>如何管理应用的进程与内存分配</strong>。 Android系统的<strong>Dalvik虚拟机</strong>扮演了<strong>常规的内存垃圾自动回收的角色</strong>，Android系统没有为内存提供<strong>交换区</strong>，它使用paging与memory-mapping(mapping)的机制来管理内存，下面简要概述一些Android系统中重要的内存管理基础概念。</p>
</blockquote>
<h4 id="共享内存"><a href="#共享内存" class="headerlink" title="共享内存"></a>共享内存</h4><blockquote>
<p>Android系统通过下面几种方式来实现<strong>共享内存</strong>：</p>
</blockquote>
<ul>
<li>Android应用的<strong>进程</strong>都是从一个叫做<strong>Zygote的进程fork出来的</strong>。Zygote进程在系统启动并且载入通用的framework的代码与资源之后开始启动。为了启动一个<strong>新的程序进程</strong>，系统会fork Zygote进程生成一个新的进程，然后在新的进程中<strong>加载并运行应用程序的代码</strong>。这使得大多数的RAM pages被用来分配给framework的代码，同时使得RAM资源能够在应用的所有进程之间进行共享。</li>
<li>大多数static的数据被mapped到一个进程中。这不仅仅使得同样的数据能够在进程间进行共享，而且使得它能够在需要的时候被paged out。常见的static数据包括Dalvik Code，app resources，so文件等。</li>
<li>大多数情况下，Android通过显式的分配共享内存区域(例如ashram或者galloc)来实现动态RAM区域能够在不同进程之间进行共享的机制。例如，Window Surface在App与Screen Compositor之间使用共享的内存，Cursor Buffers在Content Provider与Clients之间共享内存。</li>
</ul>
<h4 id="分配与回收内存"><a href="#分配与回收内存" class="headerlink" title="分配与回收内存"></a>分配与回收内存</h4><ul>
<li>每一个进程的Dalvik heap都反映了使用内存的占用范围。这就是通常逻辑意义上提到的Dalvik Heap Size，它可以随着需要进行增长，但是增长行为会有一个系统为它设定的上限。</li>
<li>逻辑上讲的Heap Size和实际物理意义上使用的内存大小是不对等的，Proportional Set Size(PSS)记录了应用程序自身占用以及和其他进程进行共享的内存。</li>
<li>Android系统并不会对Heap中空闲内存区域做碎片整理。系统仅仅会在新的内存分配之前判断Heap的尾端剩余空间是否足够，如果空间不够会触发gc操作，从而腾出更多空闲的内存空间。在Android的高级系统版本里面针对Heap空间有一个Generational Heap Memory的模型，最近分配的对象会存放在Young Generation区域，当这个对象在这个区域停留的时间达到一定程度，它会被移动到Old Generation，最后累积一定时间再移动到Permanent Generation区域。系统会根据内存中不同的内存数据类型分别执行不同的gc操作。例如，刚分配到Young Generation区域的对象通常更容易被销毁回收，同时在Young Generation区域的gc操作速度会比Old Generation区域的gc操作速度更快。如下图所示：</li>
</ul>
<p><img src="http://hukai.me/images/memory_mode_generation.png" alt=""></p>
<p><img src="http://hukai.me/images/android_memory_gc_mode.png" alt=""></p>
<blockquote>
<p>每一个Generation的内存区域都有固定的大小，随着新的对象陆续被分配到此区域，当这些对象总的大小快达到这一级别内存区域的阀值时，会<strong>触发GC</strong>的操作，以便腾出空间来存放其他新的对象。如下图所示：</p>
</blockquote>
<p><img src="http://hukai.me/images/gc_threshold.png" alt=""></p>
<blockquote>
<p>通常情况下，GC发生的时候，所有的线程都是会被暂停的。执行GC所占用的时间和它发生在哪一个Generation也有关系，Young Generation中的每次GC操作时间是最短的，Old Generation其次，Permanent Generation最长。执行时间的长短也和当前Generation中的对象数量有关，遍历树结构查找20000个对象比起遍历50个对象自然是要慢很多的。</p>
</blockquote>
<h4 id="限制应用的内存"><a href="#限制应用的内存" class="headerlink" title="限制应用的内存"></a>限制应用的内存</h4><ul>
<li>为了整个Android系统的内存控制需要，Android系统为每一个应用程序都设置了一个硬性的<strong>Dalvik Heap Size</strong>最大限制阈值，这个阈值在不同的设备上会因为RAM大小不同而各有差异。如果你的应用占用内存空间已经接近这个阈值，此时再尝试分配内存的话，很容易引起<strong>OutOfMemoryError</strong>的错误。</li>
<li>ActivityManager.getMemoryClass()可以用来查询当前应用的Heap Size阈值，这个方法会返回一个整数，表明你的应用的Heap Size阈值是多少Mb(megabytes)。</li>
</ul>
<h4 id="应用切换操作"><a href="#应用切换操作" class="headerlink" title="应用切换操作"></a>应用切换操作</h4><ul>
<li>Android系统并不会在用户切换应用的时候做<strong>交换内存的操作</strong>。Android会把那些不包含<strong>Foreground组件</strong>的应用进程放到<strong>LRU Cache</strong>中。例如，当用户开始启动了一个应用，系统会为它创建了一个进程，但是当用户离开这个应用，此进程并<strong>不会立即被销毁</strong>，而是会被放到系统的<strong>Cache</strong>当中，如果用户后来再切换回到这个应用，此进程就能够被马上完整的恢复，从而实现应用的快速切换。</li>
<li>如果你的应用中有一个被缓存的进程，这个进程会占用一定的内存空间，它会对系统的整体性能有影响。因此当系统开始进入<strong>Low Memory的状态</strong>时，它会由系统根据<strong>LRU的规则与应用的优先级</strong>，<strong>内存占用情况</strong>以及其他因素的影响综合评估之后决定是否被杀掉。</li>
<li>对于那些非foreground的进程，Android系统是如何判断Kill掉哪些进程的问题，请参考<a href="http://developer.android.com/guide/components/processes-and-threads.html" target="_blank" rel="external">Processes and Threads</a>。</li>
</ul>
<h3 id="OOM-Out-Of-Memory-内存溢出"><a href="#OOM-Out-Of-Memory-内存溢出" class="headerlink" title="OOM(Out Of Memory)内存溢出"></a>OOM(Out Of Memory)内存溢出</h3><h4 id="什么是OOM"><a href="#什么是OOM" class="headerlink" title="什么是OOM?"></a>什么是OOM?</h4><pre><code>03-21 21:05:28.771: E/dalvikvm-heap(13316): Out of memory on a 10485776-byte allocation.
03-21 21:05:28.779: E/AndroidRuntime(13316): java.lang.OutOfMemoryError
</code></pre><blockquote>
<p>意思是: 我们程序申请需要10485776byte太大了，虚拟机无法满足我们，便Crash掉了。这个现象通常出现在用到<strong><em>很多图片或者很大图片</em></strong>的APP开发中。通俗讲就是当我们的APP需要申请一块内存来装图片的时候，系统觉得我们的APP所使用的内存已经够多了。即使它有1G的空余内存，它不同意给我的APP更多的内存里，然后即使系统马上抛出OOM错误，而程序没有捕捉该错误，故弹框崩溃了。</p>
<p>前面我们提到过使用<strong>getMemoryClass()</strong>的方法可以得到Dalvik Heap的阈值。简要的获取某个应用的内存占用情况可以参考下面的示例（ 关于更多内存查看的知识，可以参考这篇官方教程：<a href="http://developer.android.com/tools/debugging/debugging-memory.html" target="_blank" rel="external">Investigating Your RAM Usage</a> ）</p>
</blockquote>
<h4 id="为什么会有OOM"><a href="#为什么会有OOM" class="headerlink" title="为什么会有OOM?"></a>为什么会有OOM?</h4><blockquote>
<p>Android系统的app的每个进程或者每个虚拟机有个<strong>最大内存限制</strong>，如果申请的内存资源超过这个限制，系统就会抛出OOM错误。跟整个设备的剩余内存没太大关系。比如比较早的android系统的一个虚拟机最多<strong>16M内存</strong>，当一个app启动后，虚拟机不停的申请内存资源来装载图片，当超过内存上限时就出现OOM。Android系统的APP内存限制怎么确定？</p>
</blockquote>
<h4 id="Android的app内存组成"><a href="#Android的app内存组成" class="headerlink" title="Android的app内存组成"></a>Android的app内存组成</h4><blockquote>
<p>app内存由 <strong>dalvik内存 和 native内存</strong> 2部分组成:</p>
</blockquote>
<ul>
<li>dalvik也就是java堆，创建的对象就是就是在这里分配的</li>
<li>native是通过c/c++方式申请的内存，Bitmap就是以这种方式分配的</li>
</ul>
<blockquote>
<p>Android3.0以后，系统都默认通过dalvik分配的，native作为堆来管理。这2部分加起来不能超过android对单个进程，虚拟机的内存限制。</p>
<p>每个手机的内存限制大小是多少？</p>
</blockquote>
<pre><code>ActivityManager activityManager = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
activityManager.getMemoryClass();
</code></pre><blockquote>
<p>以上方法会返回以M为单位的数字，不同的系统平台或设备上的值都不太一样，比如HTC默认24M, Galaxy36M, emulator-2.3 24M，等等。我的moto xt681是42M。上面取到是虚拟机的最大内存资源。</p>
<p>而对于heap堆的大小限制，可以查看/system/build.prop文件</p>
</blockquote>
<pre><code>dalvik.vm.heapstartsize  =  5m
dalvik.vm.heapgrowthlimit = 48m
dalvik.vm.heapsize = 256m
</code></pre><blockquote>
<p>注： heapsize参数表示单个进程heap可用的最大内存，但如果存在以下参数”dalvik.vm.headgrowthlimit =48m”表示单个进程heap内存被限定在48m，即程序运行过程实际只能使用48m内存。</p>
</blockquote>
<h4 id="查看内存使用情况"><a href="#查看内存使用情况" class="headerlink" title="查看内存使用情况"></a>查看内存使用情况</h4><ul>
<li><p>通过命令行查看内存详细占用情况</p>
<p>  adb shell dumpsys meminfo -a com.zqp2sh.oomsample</p>
</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/App-MemoryInfo.png" alt=""></p>
<ul>
<li>通过Android Studio的Memory Monitor查看内存中Dalvik Heap的实时变化</li>
</ul>
<p><img src="http://hukai.me/images/android_perf_oom_studio_mem_monitor.png" alt=""></p>
<h4 id="发生OOM的条件"><a href="#发生OOM的条件" class="headerlink" title="发生OOM的条件"></a>发生OOM的条件</h4><blockquote>
<p>关于Native Heap，Dalvik Heap，Pss等内存管理机制比较复杂，这里不展开描述。简单的说，通过不同的内存分配方式（malloc/mmap/JNIEnv/etc）对不同的对象（bitmap，etc）进行操作会因为Android系统版本的差异而产生不同的行为，对Native Heap与Dalvik Heap以及OOM的判断条件都会有所影响。在2.x的系统上，我们常常可以看到Heap Size的total值明显超过了通过getMemoryClass()获取到的阈值而不会发生OOM的情况，那么针对2.x与4.x的Android系统，到底是如何判断会发生OOM呢？</p>
</blockquote>
<ul>
<li><p>Android 2.x系统 GC LOG中的dalvik allocated + external allocated + 新分配的大小 >= getMemoryClass()值的时候就会发生OOM。 例如，假设有这么一段Dalvik输出的GC LOG：GC_FOR_MALLOC free 2K, 13% free 32586K/37455K, external 8989K/10356K, paused 20ms，那么32586+8989+(新分配23975)=65550>64M时，就会发生OOM。</p>
</li>
<li><p>Android 4.x系统 Android 4.x的系统废除了external的计数器，类似bitmap的分配改到dalvik的java heap中申请，只要allocated + 新分配的内存 >= getMemoryClass()的时候就会发生OOM，如下图所示（虽然图示演示的是art运行环境，但是统计规则还是和dalvik保持一致）</p>
</li>
</ul>
<p><img src="http://hukai.me/images/android_perf_oom_gc_log.png" alt=""></p>
<h3 id="如何避免OOM总结"><a href="#如何避免OOM总结" class="headerlink" title="如何避免OOM总结"></a>如何避免OOM总结</h3><blockquote>
<p>前面介绍了一些基础的<strong>内存管理机制</strong>以及<strong>OOM的基础知识</strong>，那么在实践操作当中，有哪些指导性的规则可以参考呢？归纳下来，可以从四个方面着手，首先是<strong>减小对象的内存占用</strong>，其次是<strong>内存对象的重复利用</strong>，然后是<strong>避免对象的内存泄露</strong>，最后是<strong>内存使用策略优化</strong>。</p>
</blockquote>
<h4 id="减小对象的内存占用"><a href="#减小对象的内存占用" class="headerlink" title="减小对象的内存占用"></a>减小对象的内存占用</h4><blockquote>
<p>避免OOM的第一步就是要尽量<strong>减少新分配出来的对象占用内存的大小</strong>，尽量<strong>使用更加轻量的对象</strong>。</p>
</blockquote>
<ul>
<li>使用更加轻量的数据结构</li>
</ul>
<blockquote>
<p>例如，我们可以考虑使用<strong>ArrayMap/SparseArray</strong>而不是<strong>HashMap</strong>等传统数据结构，下图演示了HashMap的简要工作原理，相比起Android系统专门为移动操作系统编写的ArrayMap容器，在大多数情况下，都显示效率低下，更占内存。通常的HashMap的实现方式更加消耗内存，因为它需要一个额外的实例对象来记录Mapping操作。另外，SparseArray更加高效在于他们避免了对key与value的autobox自动装箱，并且避免了装箱后的解箱。</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_3_arraymap_key_value.png" alt=""></p>
<blockquote>
<p>关于更多ArrayMap/SparseArray的讨论，请参考<a href="http://hukai.me/android-performance-patterns-season-3/" target="_blank" rel="external">此文</a>的前三个段落</p>
</blockquote>
<ul>
<li>避免在Android里面使用Enum</li>
</ul>
<blockquote>
<p>Android官方培训课程提到过“Enums often require more than twice as much memory as static constants. You should strictly avoid using enums on Android.”，具体原理<a href="http://hukai.me/android-performance-patterns-season-3/" target="_blank" rel="external">请参考</a>，所以请避免在Android里面使用到枚举。</p>
</blockquote>
<ul>
<li>减小Bitmap对象的内存占用</li>
</ul>
<blockquote>
<p>Bitmap是一个极容易消耗内存的大胖子，减小创建出来的Bitmap的内存占用是很重要的，通常来说有下面2个措施：</p>
<ul>
<li>inSampleSize：缩放比例，在把图片载入内存之前，我们需要先计算出一个合适的缩放比例，避免不必要的大图载入。</li>
<li>decode format：解码格式，选择ARGB_8888/RBG_565/ARGB_4444/ALPHA_8，存在很大差异。</li>
</ul>
</blockquote>
<ul>
<li>使用更小的图片</li>
</ul>
<blockquote>
<p>在设计给到资源图片的时候，我们需要特别留意这张图片是否存在可以压缩的空间，是否可以使用一张更小的图片。尽量使用更小的图片不仅仅可以减少内存的使用，还可以避免出现大量的InflationException。假设有一张很大的图片被XML文件直接引用，很有可能在初始化视图的时候就会因为内存不足而发生InflationException，这个问题的根本原因其实是发生了OOM。</p>
</blockquote>
<h4 id="内存对象的重复利用"><a href="#内存对象的重复利用" class="headerlink" title="内存对象的重复利用"></a>内存对象的重复利用</h4><blockquote>
<p>大多数对象的复用，最终实施的方案都是利用<strong>对象池技术</strong>，要么是在编写代码的时候显式的在程序里面去创建对象池，然后处理好复用的实现逻辑，要么就是利用系统框架既有的某些复用特性达到减少对象的重复创建，从而减少内存的分配与回收。</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_2_object_pool.png" alt=""></p>
<blockquote>
<p>在Android上面最常用的一个缓存算法是LRU(Least Recently Use)，简要操作原理如下图所示：</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_2_lru_mode.png" alt=""></p>
<ul>
<li>复用系统自带的资源</li>
</ul>
<blockquote>
<p>Android系统本身内置了很多的资源，例如字符串/颜色/图片/动画/样式以及简单布局等等，这些资源都可以在应用程序中直接引用。这样做不仅仅可以减少应用程序的自身负重，减小APK的大小，另外还可以一定程度上减少内存的开销，复用性更好。但是也有必要留意Android系统的版本差异性，对那些不同系统版本上表现存在很大差异，不符合需求的情况，还是需要应用程序自身内置进去。</p>
</blockquote>
<ul>
<li>注意在ListView/GridView等出现大量重复子组件的视图里面对ConvertView的复用</li>
</ul>
<p><img src="http://hukai.me/images/android_perf_oom_listview_recycle.png" alt=""></p>
<ul>
<li>Bitmap对象的复用<ul>
<li>在ListView与GridView等显示大量图片的控件里面需要使用LRU的机制来缓存处理好的Bitmap。<br>  <img src="http://hukai.me/images/android_perf_2_inbitmap_old.png" alt=""> </li>
<li>利用inBitmap的高级特性提高Android系统在Bitmap分配与释放执行效率上的提升(3.0以及4.4以后存在一些使用限制上的差异)。使用inBitmap属性可以告知Bitmap解码器去尝试使用已经存在的内存区域，新解码的bitmap会尝试去使用之前那张bitmap在heap中所占据的pixel data内存区域，而不是去问内存重新申请一块区域来存放bitmap。利用这种特性，即使是上千张的图片，也只会仅仅只需要占用屏幕所能够显示的图片数量的内存大小。<br>  <img src="http://hukai.me/images/android_perf_2_inbitmap_new.png" alt=""></li>
<li>使用inBitmap需要注意几个限制条件：<ul>
<li>在SDK 11 -> 18之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100-100，那么新申请的bitmap必须也为100-100才能够被重用。从SDK 19开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。</li>
<li>新申请的bitmap与旧的bitmap必须有相同的解码格式，例如大家都是8888的，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了。 我们可以创建一个包含多种典型可重用bitmap的对象池，这样后续的bitmap创建都能够找到合适的“模板”去进行重用。如下图所示：<br>  <img src="http://hukai.me/images/android_perf_2_inbitmap_pool.png" alt=""></li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>另外提一点：在2.x的系统上，尽管bitmap是分配在native层，但是还是无法避免被计算到OOM的引用计数器里面。这里提示一下，不少应用会通过反射BitmapFactory.Options里面的inNativeAlloc来达到扩大使用内存的目的，但是如果大家都这么做，对系统整体会造成一定的负面影响，建议谨慎采纳。</p>
</blockquote>
<h4 id="避免在onDraw方法里面执行对象的创建"><a href="#避免在onDraw方法里面执行对象的创建" class="headerlink" title="避免在onDraw方法里面执行对象的创建"></a>避免在onDraw方法里面执行对象的创建</h4><blockquote>
<p>类似onDraw等频繁调用的方法，一定需要注意避免在这里做创建对象的操作，因为他会迅速增加内存的使用，而且很容易引起频繁的gc，甚至是内存抖动。</p>
</blockquote>
<h4 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h4><blockquote>
<p>在有些时候，代码中会需要使用到大量的字符串拼接的操作，这种时候有必要考虑使用StringBuilder来替代频繁的“+”。</p>
</blockquote>
<h3 id="避免对象的内存泄露"><a href="#避免对象的内存泄露" class="headerlink" title="避免对象的内存泄露"></a>避免对象的内存泄露</h3><blockquote>
<p>内存对象的泄漏，会导致一些不再使用的对象无法及时释放，这样一方面占用了宝贵的内存空间，很容易导致后续需要分配内存的时候，空闲空间不足而出现OOM。显然，这还使得每级Generation的内存区域可用空间变小，gc就会更容易被触发，容易出现内存抖动，从而引起性能问题。</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_3_leak.png" alt=""></p>
<blockquote>
<p>最新的LeakCanary开源控件，可以很好的帮助我们发现内存泄露的情况，更多关于LeakCanary的介绍，请看<a href="https://github.com/square/leakcanary" target="_blank" rel="external">这里</a>(<a href="http://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="external">中文</a>)。另外也可以使用传统的MAT工具查找内存泄露，请参考<a href="http://android-developers.blogspot.pt/2011/03/memory-analysis-for-android.html" target="_blank" rel="external">这里</a>（<a href="http://androidperformance.com/2015/04/11/AndroidMemory-Usage-Of-MAT/" target="_blank" rel="external">中文</a>）.</p>
</blockquote>
<h4 id="注意Activity的泄漏"><a href="#注意Activity的泄漏" class="headerlink" title="注意Activity的泄漏"></a>注意Activity的泄漏</h4><blockquote>
<p>通常来说，<strong>Activity的泄漏</strong>是内存泄漏里面最严重的问题，它占用的内存多，影响面广，我们需要特别注意以下两种情况导致的Activity泄漏：</p>
</blockquote>
<ul>
<li><p><strong>内部类引用</strong>导致Activity的泄漏</p>
<blockquote>
<p>最典型的场景是<strong>Handler导致的Activity泄漏</strong>，如果Handler中有延迟的任务或者是等待执行的任务队列过长，都有可能因为Handler继续执行而导致Activity发生泄漏。此时的引用关系链是<strong>Looper -> MessageQueue -> Message -> Handler -> Activity</strong>。为了解决这个问题，可以在UI退出之前，<strong>执行remove Handler消息队列中的消息与runnable对象</strong>。或者是使用<strong>Static + WeakReference的方式</strong>来达到断开Handler与Activity之间存在引用关系的目的。</p>
</blockquote>
</li>
<li><p>Activity Context被传递到其他实例中，这可能导致自身被引用而发生泄漏。</p>
<blockquote>
<p>内部类引起的泄漏不仅仅会发生在Activity上，其他任何内部类出现的地方，都需要特别留意！我们可以考虑尽量使用static类型的内部类，同时使用WeakReference的机制来避免因为互相引用而出现的泄露。</p>
</blockquote>
</li>
</ul>
<h4 id="考虑使用Application-Context而不是Activity-Context"><a href="#考虑使用Application-Context而不是Activity-Context" class="headerlink" title="考虑使用Application Context而不是Activity Context"></a>考虑使用Application Context而不是Activity Context</h4><blockquote>
<p>对于大部分非必须使用Activity Context的情况（Dialog的Context就必须是Activity Context），我们都可以考虑使用Application Context而不是Activity的Context，这样可以避免不经意的Activity泄露。</p>
</blockquote>
<h4 id="注意临时Bitmap对象的及时回收"><a href="#注意临时Bitmap对象的及时回收" class="headerlink" title="注意临时Bitmap对象的及时回收"></a>注意临时Bitmap对象的及时回收</h4><blockquote>
<p>虽然在大多数情况下，我们会对Bitmap增加缓存机制，但是在某些时候，部分Bitmap是需要及时回收的。例如临时创建的某个相对比较大的bitmap对象，在经过变换得到新的bitmap对象之后，应该尽快回收原始的bitmap，这样能够更快释放原始bitmap所占用的空间。</p>
<p>需要特别留意的是Bitmap类里面提供的createBitmap()方法：</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_oom_create_bitmap.png" alt=""></p>
<blockquote>
<p>这个函数返回的bitmap有可能和source bitmap是同一个，在回收的时候，需要特别检查source bitmap与return bitmap的引用是否相同，只有在不等的情况下，才能够执行source bitmap的recycle方法。</p>
</blockquote>
<h4 id="注意监听器的注销"><a href="#注意监听器的注销" class="headerlink" title="注意监听器的注销"></a>注意监听器的注销</h4><blockquote>
<p>在Android程序里面存在很多需要register与unregister的监听器，我们需要确保在合适的时候及时unregister那些监听器。自己手动add的listener，需要记得及时remove这个listener。</p>
</blockquote>
<h4 id="注意缓存容器中的对象泄漏"><a href="#注意缓存容器中的对象泄漏" class="headerlink" title="注意缓存容器中的对象泄漏"></a>注意缓存容器中的对象泄漏</h4><blockquote>
<p>有时候，我们为了提高对象的复用性把某些对象放到缓存容器中，可是如果这些对象没有及时从容器中清除，也是有可能导致内存泄漏的。例如，针对2.3的系统，如果把drawable添加到缓存容器，因为drawable与View的强应用，很容易导致activity发生泄漏。<strong>而从4.0开始，就不存在这个问题</strong>。解决这个问题，需要对2.3系统上的缓存drawable做特殊封装，处理引用解绑的问题，避免泄漏的情况。</p>
</blockquote>
<h4 id="注意WebView的泄漏"><a href="#注意WebView的泄漏" class="headerlink" title="注意WebView的泄漏"></a>注意WebView的泄漏</h4><blockquote>
<p>Android中的WebView存在很大的兼容性问题，不仅仅是Android系统版本的不同对WebView产生很大的差异，另外不同的厂商出货的ROM里面WebView也存在着很大的差异。更严重的是标准的WebView存在内存泄露的问题，看这里WebView causes memory leak - leaks the parent Activity。所以通常根治这个问题的办法是为WebView开启另外一个进程，通过AIDL与主进程进行通信，WebView所在的进程可以根据业务的需要选择合适的时机进行销毁，从而达到内存的完整释放。</p>
</blockquote>
<h4 id="注意Cursor对象是否及时关闭"><a href="#注意Cursor对象是否及时关闭" class="headerlink" title="注意Cursor对象是否及时关闭"></a>注意Cursor对象是否及时关闭</h4><blockquote>
<p>在程序中我们经常会进行查询数据库的操作，但时常会存在不小心使用Cursor之后没有及时关闭的情况。这些Cursor的泄露，反复多次出现的话会对内存管理产生很大的负面影响，我们需要谨记对Cursor对象的及时关闭。</p>
</blockquote>
<h3 id="内存使用策略优化"><a href="#内存使用策略优化" class="headerlink" title="内存使用策略优化"></a>内存使用策略优化</h3><h4 id="谨慎使用large-heap"><a href="#谨慎使用large-heap" class="headerlink" title="谨慎使用large heap"></a>谨慎使用large heap</h4><blockquote>
<p>正如前面提到的，Android设备根据硬件与软件的设置差异而存在不同大小的内存空间，他们为应用程序设置了不同大小的Heap限制阈值。你可以通过调用getMemoryClass()来获取应用的可用Heap大小。在一些特殊的情景下，你可以通过在manifest的application标签下添加largeHeap=true的属性来为应用声明一个更大的heap空间。然后，你可以通过getLargeMemoryClass()来获取到这个更大的heap size阈值。然而，声明得到更大Heap阈值的本意是为了一小部分会消耗大量RAM的应用(例如一个大图片的编辑应用)。不要轻易的因为你需要使用更多的内存而去请求一个大的Heap Size。只有当你清楚的知道哪里会使用大量的内存并且知道为什么这些内存必须被保留时才去使用large heap。因此请谨慎使用large heap属性。使用额外的内存空间会影响系统整体的用户体验，并且会使得每次gc的运行时间更长。在任务切换时，系统的性能会大打折扣。另外, large heap并不一定能够获取到更大的heap。在某些有严格限制的机器上，large heap的大小和通常的heap size是一样的。因此即使你申请了large heap，你还是应该通过执行getMemoryClass()来检查实际获取到的heap大小。</p>
</blockquote>
<h4 id="综合考虑设备内存阈值与其他因素设计合适的缓存大小"><a href="#综合考虑设备内存阈值与其他因素设计合适的缓存大小" class="headerlink" title="综合考虑设备内存阈值与其他因素设计合适的缓存大小"></a>综合考虑设备内存阈值与其他因素设计合适的缓存大小</h4><blockquote>
<p>例如，在设计ListView或者GridView的Bitmap LRU缓存的时候，需要考虑的点有：</p>
<ul>
<li>应用程序剩下了多少可用的内存空间?</li>
<li>有多少图片会被一次呈现到屏幕上？有多少图片需要事先缓存好以便快速滑动时能够立即显示到屏幕？</li>
<li>设备的屏幕大小与密度是多少? 一个xhdpi的设备会比hdpi需要一个更大的Cache来hold住同样数量的图片。</li>
<li>不同的页面针对Bitmap的设计的尺寸与配置是什么，大概会花费多少内存？</li>
<li>页面图片被访问的频率？是否存在其中的一部分比其他的图片具有更高的访问频繁？如果是，也许你想要保存那些最常访问的到内存中，或者为不同组别的位图(按访问频率分组)设置多个LruCache容器。</li>
</ul>
</blockquote>
<h4 id="onLowMemory-与onTrimMemory"><a href="#onLowMemory-与onTrimMemory" class="headerlink" title="onLowMemory()与onTrimMemory()"></a>onLowMemory()与onTrimMemory()</h4><blockquote>
<p>Android用户可以随意在不同的应用之间进行快速切换。为了让background的应用能够迅速的切换到forground，每一个background的应用都会占用一定的内存。Android系统会根据当前的系统的内存使用情况，决定回收部分background的应用内存。如果background的应用从暂停状态直接被恢复到forground，能够获得较快的恢复体验，如果background应用是从Kill的状态进行恢复，相比之下就显得稍微有点慢。</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_3_memory_bg_2_for.png" alt=""></p>
<ul>
<li><p>onLowMemory()：Android系统提供了一些回调来通知当前应用的内存使用情况，通常来说，当所有的background应用都被kill掉的时候，forground应用会收到onLowMemory()的回调。在这种情况下，需要尽快释放当前应用的非必须的内存资源，从而确保系统能够继续稳定运行。</p>
</li>
<li><p>onTrimMemory(int)：Android系统从4.0开始还提供了onTrimMemory()的回调，当系统内存达到某些条件的时候，所有正在运行的应用都会收到这个回调，同时在这个回调里面会传递以下的参数，代表不同的内存使用情况，收到onTrimMemory()回调的时候，需要根据传递的参数类型进行判断，合理的选择释放自身的一些内存占用，一方面可以提高系统的整体运行流畅度，另外也可以避免自己被系统判断为优先需要杀掉的应用。下图介绍了各种不同的回调参数：</p>
<ul>
<li><p>TRIM_MEMORY_UI_HIDDEN：你的应用程序的所有UI界面被隐藏了，即用户点击了Home键或者Back键退出应用，导致应用的UI界面完全不可见。这个时候应该释放一些不可见的时候非必须的资源  </p>
<blockquote>
<p>当程序正在前台运行的时候，可能会接收到从onTrimMemory()中返回的下面的值之一:</p>
</blockquote>
</li>
</ul>
</li>
<li><p>TRIM_MEMORY_RUNNING_MODERATE：你的应用正在运行并且不会被列为可杀死的。但是设备此时正运行于低内存状态下，系统开始触发杀死LRU Cache中的Process的机制。</p>
<ul>
<li>TRIM_MEMORY_RUNNING_LOW：你的应用正在运行且没有被列为可杀死的。但是设备正运行于更低内存的状态下，你应该释放不用的资源用来提升系统性能。</li>
<li><p>TRIM_MEMORY_RUNNING_CRITICAL：你的应用仍在运行，但是系统已经把LRU Cache中的大多数进程都已经杀死，因此你应该立即释放所有非必须的资源。如果系统不能回收到足够的RAM数量，系统将会清除所有的LRU缓存中的进程，并且开始杀死那些之前被认为不应该杀死的进程，例如那个包含了一个运行态Service的进程。</p>
<blockquote>
<p>当应用进程退到后台正在被Cached的时候，可能会接收到从onTrimMemory()中返回的下面的值之一：</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>-TRIM_MEMORY_BACKGROUND: 系统正运行于低内存状态并且你的进程正处于LRU缓存名单中最不容易杀掉的位置。尽管你的应用进程并不是处于被杀掉的高危险状态，系统可能已经开始杀掉LRU缓存中的其他进程了。你应该释放那些容易恢复的资源，以便于你的进程可以保留下来，这样当用户回退到你的应用的时候才能够迅速恢复。</p>
<ul>
<li><p>TRIM_MEMORY_MODERATE: 系统正运行于低内存状态并且你的进程已经已经接近LRU名单的中部位置。如果系统开始变得更加内存紧张，你的进程是有可能被杀死的。</p>
<ul>
<li><p>TRIM_MEMORY_COMPLETE: 系统正运行于低内存的状态并且你的进程正处于LRU名单中最容易被杀掉的位置。你应该释放任何不影响你的应用恢复状态的资源。</p>
<p>  <img src="http://hukai.me/images/android_perf_3_memory_ontrimmemory.png" alt=""></p>
</li>
</ul>
</li>
<li><p>因为onTrimMemory()的回调是在API 14才被加进来的，对于老的版本，你可以使用onLowMemory)回调来进行兼容。onLowMemory相当与TRIM_MEMORY_COMPLETE。</p>
</li>
<li>请注意：当系统开始清除LRU缓存中的进程时，虽然它首先按照LRU的顺序来执行操作，但是它同样会考虑进程的内存使用量以及其他因素。占用越少的进程越容易被留下来。</li>
</ul>
<h4 id="资源文件需要选择合适的文件夹进行存放"><a href="#资源文件需要选择合适的文件夹进行存放" class="headerlink" title="资源文件需要选择合适的文件夹进行存放"></a>资源文件需要选择合适的文件夹进行存放</h4><blockquote>
<p>我们知道hdpi/xhdpi/xxhdpi等等不同dpi的文件夹下的图片在不同的设备上会经过scale的处理。例如我们只在hdpi的目录下放置了一张100*100的图片，那么根据换算关系，xxhdpi的手机去引用那张图片就会被拉伸到200*200。需要注意到在这种情况下，内存占用是会显著提高的。对于不希望被拉伸的图片，需要放到assets或者nodpi的目录下。</p>
</blockquote>
<h4 id="Try-catch某些大内存分配的操作"><a href="#Try-catch某些大内存分配的操作" class="headerlink" title="Try catch某些大内存分配的操作"></a>Try catch某些大内存分配的操作</h4><blockquote>
<p>在某些情况下，我们需要事先评估那些可能发生OOM的代码，对于这些可能发生OOM的代码，加入catch机制，可以考虑在catch里面尝试一次降级的内存分配操作。例如decode bitmap的时候，catch到OOM，可以尝试把采样比例再增加一倍之后，再次尝试decode。</p>
</blockquote>
<h4 id="谨慎使用static对象"><a href="#谨慎使用static对象" class="headerlink" title="谨慎使用static对象"></a>谨慎使用static对象</h4><blockquote>
<p>因为static的生命周期过长，和应用的进程保持一致，使用不当很可能导致对象泄漏，在Android中应该谨慎使用static对象。</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_3_leak_static.png" alt=""></p>
<h4 id="特别留意单例对象中不合理的持有"><a href="#特别留意单例对象中不合理的持有" class="headerlink" title="特别留意单例对象中不合理的持有"></a>特别留意单例对象中不合理的持有</h4><blockquote>
<p>虽然单例模式简单实用，提供了很多便利性，但是因为单例的生命周期和应用保持一致，使用不合理很容易出现持有对象的泄漏。</p>
</blockquote>
<h4 id="珍惜Services资源"><a href="#珍惜Services资源" class="headerlink" title="珍惜Services资源"></a>珍惜Services资源</h4><blockquote>
<p>如果你的应用需要在后台使用service，除非它被触发并执行一个任务，否则其他时候Service都应该是停止状态。另外需要注意当这个service完成任务之后因为停止service失败而引起的内存泄漏。 当你启动一个Service，系统会倾向为了保留这个Service而一直保留Service所在的进程。这使得进程的运行代价很高，因为系统没有办法把Service所占用的RAM空间腾出来让给其他组件，另外Service还不能被Paged out。这减少了系统能够存放到LRU缓存当中的进程数量，它会影响应用之间的切换效率，甚至会导致系统内存使用不稳定，从而无法继续保持住所有目前正在运行的service。 建议使用IntentService，它会在处理完交代给它的任务之后尽快结束自己。更多信息，请阅读Running in a Background Service。</p>
</blockquote>
<h4 id="优化布局层次，减少内存消耗"><a href="#优化布局层次，减少内存消耗" class="headerlink" title="优化布局层次，减少内存消耗"></a>优化布局层次，减少内存消耗</h4><blockquote>
<p>越扁平化的视图布局，占用的内存就越少，效率越高。我们需要尽量保证布局足够扁平化，当使用系统提供的View无法实现足够扁平的时候考虑使用自定义View来达到目的。</p>
</blockquote>
<h4 id="谨慎使用“抽象”编程"><a href="#谨慎使用“抽象”编程" class="headerlink" title="谨慎使用“抽象”编程"></a>谨慎使用“抽象”编程</h4><blockquote>
<p>很多时候，开发者会使用抽象类作为”好的编程实践”，因为抽象能够提升代码的灵活性与可维护性。然而，抽象会导致一个显著的额外内存开销：他们需要同等量的代码用于可执行，那些代码会被mapping到内存中，因此如果你的抽象没有显著的提升效率，应该尽量避免他们。</p>
</blockquote>
<h4 id="使用nano-protobufs序列化数据"><a href="#使用nano-protobufs序列化数据" class="headerlink" title="使用nano protobufs序列化数据"></a>使用nano protobufs序列化数据</h4><blockquote>
<p>Protocol buffers是由Google为序列化结构数据而设计的，一种语言无关，平台无关，具有良好的扩展性。类似XML，却比XML更加轻量，快速，简单。如果你需要为你的数据实现序列化与协议化，建议使用nano protobufs。关于更多细节，请参考protobuf readme的”Nano version”章节。</p>
</blockquote>
<h4 id="谨慎使用依赖注入框架"><a href="#谨慎使用依赖注入框架" class="headerlink" title="谨慎使用依赖注入框架"></a>谨慎使用依赖注入框架</h4><blockquote>
<p>使用类似Guice或者RoboGuice等框架注入代码，在某种程度上可以简化你的代码。下面是使用RoboGuice前后的对比图：</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_oom_roboguice_1.png" alt=""></p>
<p><img src="http://hukai.me/images/android_perf_oom_roboguice_2.png" alt=""></p>
<blockquote>
<p>使用RoboGuice之后，代码是简化了不少。然而，那些注入框架会通过扫描你的代码执行许多初始化的操作，这会导致你的代码需要大量的内存空间来mapping代码，而且mapped pages会长时间的被保留在内存中。除非真的很有必要，建议谨慎使用这种技术。</p>
</blockquote>
<h4 id="谨慎使用多进程"><a href="#谨慎使用多进程" class="headerlink" title="谨慎使用多进程"></a>谨慎使用多进程</h4><blockquote>
<p>使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术。</p>
<p>一个典型的例子是创建一个可以长时间后台播放的Music Player。如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。</p>
</blockquote>
<h4 id="使用ProGuard来剔除不需要的代码"><a href="#使用ProGuard来剔除不需要的代码" class="headerlink" title="使用ProGuard来剔除不需要的代码"></a>使用ProGuard来剔除不需要的代码</h4><blockquote>
<p>ProGuard能够通过移除不需要的代码，重命名类，域与方法等等对代码进行压缩，优化与混淆。使用ProGuard可以使得你的代码更加紧凑，这样能够减少mapping代码所需要的内存空间。</p>
</blockquote>
<h4 id="谨慎使用第三方libraries"><a href="#谨慎使用第三方libraries" class="headerlink" title="谨慎使用第三方libraries"></a>谨慎使用第三方libraries</h4><blockquote>
<p>很多开源的library代码都不是为移动网络环境而编写的，如果运用在移动设备上，并不一定适合。即使是针对Android而设计的library，也需要特别谨慎，特别是在你不知道引入的library具体做了什么事情的时候。例如，其中一个library使用的是nano protobufs, 而另外一个使用的是micro protobufs。这样一来，在你的应用里面就有2种protobuf的实现方式。这样类似的冲突还可能发生在输出日志，加载图片，缓存等等模块里面。另外不要为了1个或者2个功能而导入整个library，如果没有一个合适的库与你的需求相吻合，你应该考虑自己去实现，而不是导入一个大而全的解决方案。</p>
</blockquote>
<h4 id="考虑不同的实现方式来优化内存占用"><a href="#考虑不同的实现方式来优化内存占用" class="headerlink" title="考虑不同的实现方式来优化内存占用"></a>考虑不同的实现方式来优化内存占用</h4><blockquote>
<p>在某些情况下，设计的某个方案能够快速实现需求，但是这个方案却可能在内存占用上表现的效率不够好。例如：</p>
</blockquote>
<p><img src="http://hukai.me/images/android_perf_2_waer_animation.png" alt=""></p>
<blockquote>
<p>对于上面这样一个时钟表盘的实现，最简单的就是使用很多张包含指针的表盘图片，使用帧动画实现指针的旋转。但是如果把指针扣出来，单独进行旋转绘制，显然比载入N多张图片占用的内存要少很多。当然这样做，代码复杂度上会有所增加，这里就需要在优化内存占用与实现简易度之间进行权衡了。</p>
</blockquote>
<h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><ul>
<li>设计风格很大程度上会影响到程序的内存与性能，相对来说，如果大量使用类似Material Design的风格，不仅安装包可以变小，还可以减少内存的占用，渲染性能与加载性能都会有一定的提升。</li>
<li>内存优化并不就是说程序占用的内存越少就越好，如果因为想要保持更低的内存占用，而频繁触发执行gc操作，在某种程度上反而会导致应用性能整体有所下降，这里需要综合考虑做一定的权衡。</li>
<li>Android的内存优化涉及的知识面还有很多：内存管理的细节，垃圾回收的工作原理，如何查找内存泄漏等等都可以展开讲很多。OOM是内存优化当中比较突出的一点，尽量减少OOM的概率对内存优化有着很大的意义。</li>
</ul>
<p><strong>参考资料</strong><br><a href="http://hukai.me/android-performance-oom/" target="_blank" rel="external">http://hukai.me/android-performance-oom/</a><br><a href="http://hukai.me/android-performance-oom/" target="_blank" rel="external">Android内存优化之OOM</a><br><a href="https://my.oschina.net/caikezhan/blog/168955" target="_blank" rel="external">Android Out Of Memory(OOM) 的详细研究</a><br><a href="https://segmentfault.com/a/1190000005180612" target="_blank" rel="external">一次解决OOM的经历</a><br><a href="http://www.yinqisen.cn/blog-316.html#static" target="_blank" rel="external">Android 内存优化，如何避免OOM</a><br><a href="http://mzh3344258.blog.51cto.com/1823534/804237" target="_blank" rel="external">Android 内存溢出解决方案（OOM） 整理总结</a><br><a href="http://www.runoob.com/w3cnote/android-oom.html" target="_blank" rel="external">Android应用中OOM问题剖析和解决方案</a><br><a href="http://www.jianshu.com/p/f5d8d3066b36" target="_blank" rel="external">Android避免OOM（内存优化）</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9316683" target="_blank" rel="external">Android高效加载大图、多图解决方案，有效避免程序OOM</a><br><a href="http://www.jianshu.com/p/c49f778e7acf" target="_blank" rel="external">使用Android studio分析内存泄露</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android的&lt;strong&gt;内存优化&lt;/strong&gt;是&lt;strong&gt;性能优化&lt;/strong&gt;中很重要的一部分，而&lt;strong&gt;避免OOM&lt;/strong&gt;又是内存优化中比较核心的一点，这是一篇关于内存优化中如何避免OOM的总结性概要文章
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="OOM" scheme="http://yoursite.com/tags/OOM/"/>
    
      <category term="内存优化" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>AndroidStudio打包～生成jks密钥～签名apk～多渠道打包</title>
    <link href="http://yoursite.com/2016/10/29/AndroidStudio%E7%94%9F%E6%88%90jks%E5%AF%86%E9%92%A5%EF%BD%9E%E7%AD%BE%E5%90%8Dapk%EF%BD%9E%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    <id>http://yoursite.com/2016/10/29/AndroidStudio生成jks密钥～签名apk～多渠道打包/</id>
    <published>2016-10-29T13:05:55.000Z</published>
    <updated>2016-11-01T01:34:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="生成jks签名"><a href="#生成jks签名" class="headerlink" title="生成jks签名"></a>生成jks签名</h3><p><img src="http://o9zgq2ik9.bkt.clouddn.com/release1.png" alt=""></p>
<blockquote>
<p>1.选择Build > Generate Signed APK</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release2.png" alt=""></p>
<blockquote>
<p>2.选择项目app > Next</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release3.png" alt=""></p>
<blockquote>
<p>如果以前没有生成过 .jks密钥 文件，选择Create new，否则选择Choose existing</p>
<p>3.我们选择Create new新创建一个 .jks密钥 文件</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release4.png" alt=""></p>
<blockquote>
<p>4.选择签名文件的路径，把这些信息填完点击OK</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release5.png" alt=""></p>
<blockquote>
<p>5.选择Next继续完成下一步</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release6.png" alt=""></p>
<blockquote>
<p>Build Type 选择 release，由于我们还没有为项目添加任何第三方的打包渠道，所以此时No Flavors可以选择。</p>
<p>6.选择Finish，签名生成</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release7.png" alt=""></p>
<blockquote>
<p><strong>注意</strong>：在第3步，我们选择了Create new去生成一个新的 .jks 密钥文件，之后我们在对项目进行打包签名时则可以直接选择Choose existing即可。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release8.png" alt=""></p>
<blockquote>
<p>选择已经存在的.jks密钥文件，点击OK即可，后面步骤如前所描述。</p>
</blockquote>
<h3 id="多渠道打包"><a href="#多渠道打包" class="headerlink" title="多渠道打包"></a>多渠道打包</h3><blockquote>
<p>国内Android App市场很多，每次发版几十个<strong>渠道包</strong>。Android Gradle给我们提供了<strong>productFlavors</strong>，让我们可以很方便地对生成的APK包进行定制。</p>
<p>1.在AndroidManifest.xml文件中<strong>添加渠道表示标签</strong></p>
</blockquote>
<pre><code>&lt;application
        android:allowBackup=&quot;true&quot;
        android:icon=&quot;@mipmap/ic_launcher&quot;
        android:label=&quot;@string/app_name&quot;
        android:supportsRtl=&quot;true&quot;
        android:theme=&quot;@style/AppTheme&quot;&gt;
        &lt;activity android:name=&quot;.WebViewActivity&quot;&gt;
            &lt;intent-filter&gt;
                &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;
                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;
            &lt;/intent-filter&gt;
        &lt;/activity&gt;

        &lt;!-- UMeng 配置--&gt;
        &lt;meta-data android:value=&quot;${UMENG_CHANNEL_VALUE}&quot; android:name=&quot;UMENG_CHANNEL&quot;/&gt;

&lt;/application&gt;
</code></pre><blockquote>
<p>2.在build.gradle(Module: app)文件中添加多渠道</p>
</blockquote>
<pre><code>apply plugin: &apos;com.android.application&apos;

android {
    compileSdkVersion 24
    buildToolsVersion &quot;24.0.2&quot;
    defaultConfig {
        applicationId &quot;com.zqp2sh.webviewwraph5&quot;
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName &quot;1.0&quot;
        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;
    }
buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile(&apos;proguard-android.txt&apos;), &apos;proguard-rules.pro&apos;
        }
}

// 添加多渠道
productFlavors {
        xiaomi {}
        qihu360 {}
        baidu {}
        wandoujia {}
}
productFlavors.all {
        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
    }
}

dependencies {
    compile fileTree(dir: &apos;libs&apos;, include: [&apos;*.jar&apos;])
    androidTestCompile(&apos;com.android.support.test.espresso:espresso-core:2.2.2&apos;, {
        exclude group: &apos;com.android.support&apos;, module: &apos;support-annotations&apos;
    })
    compile &apos;com.android.support:appcompat-v7:24.2.1&apos;
    testCompile &apos;junit:junit:4.12&apos;
    compile &apos;com.android.support:design:24.2.1&apos;
}
</code></pre><blockquote>
<p>添加完之后我们在点击一下Gradle 的构建按钮重新构建一下 </p>
</blockquote>
<p><strong>回顾</strong></p>
<blockquote>
<p>此时我们在进行.jks密钥文件生成时，就会发现此时的Flavors会出现4个渠道选项，我们可以任意选择，如下：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release.22.png" alt=""></p>
<blockquote>
<p>选中之后，点击Finish即可进行签名打包，生成响应的apk：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release.23.png" alt=""></p>
<blockquote>
<p>3.测试</p>
<p>通过Java代码获取到<strong>meta标签</strong>中的value来测试是否成功实现了多渠道打包：</p>
</blockquote>
<pre><code>@Override
protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,
//                WindowManager.LayoutParams.FLAG_FULLSCREEN);
        setContentView(R.layout.activity_webview);

        getWindow().setBackgroundDrawableResource(android.R.color.transparent);

        init();
        initWebView();

        String umeng_channel = getApplicationMetaValue(&quot;UMENG_CHANNEL&quot;);
        Log.d(&quot;Science&quot;, umeng_channel);
}

/**
*  测试多渠道打包
*/
private String  getApplicationMetaValue(String name) {
        String value= &quot;&quot;;
        try {
            ApplicationInfo appInfo =getPackageManager()
                    .getApplicationInfo(getPackageName(),
                            PackageManager.GET_META_DATA);
            value = appInfo.metaData.getString(name);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
        return value;
}
</code></pre><blockquote>
<p>测试代码添加完毕之后，我们现在点击AS左下角的Gradle，我们此时就可以看到我们刚才添加的xiaomi、qihu360、baidu、wandoujia都出现了，如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release9.png" alt=""><img src="http://o9zgq2ik9.bkt.clouddn.com/release10.png" alt=""></p>
<blockquote>
<p>此时我们双击［installBaiduDebug］, apk成功的安装到你的手机上了，手机不会自动给你打开app，需要手动打开，然后就可以在控制台看到日志如下：</p>
</blockquote>
<pre><code>10-29 22:55:04.154 12335-12335/com.zqp2sh.webviewwraph5 D/Science: baidu
</code></pre><blockquote>
<p>进入图示目录可以看到生成的响应apk，此时还没有签名：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release11.png" alt=""></p>
<blockquote>
<p><strong>注意：保持有手机与AS相连接</strong></p>
<p>然后我们在双击［installXiaomiDebug］，然后看看</p>
</blockquote>
<pre><code>&apos;&apos;10-29 22:55:04.154 12335-12335/com.zqp2sh.webviewwraph5 D/Science: xiaomi
</code></pre><blockquote>
<p>进入图示目录可以看到生成的响应apk，此时还没有签名：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release12.png" alt=""></p>
<blockquote>
<p>其他的渠道也是一样的操作方式，不在一一说明。</p>
<p>小结: 这里我们在AndroidManifest.xml文件中添加了<strong>meta标签</strong>、在build.gradle(Module: app)中添加了渠道产品对应的<strong>渠道名称</strong> ，最后我们<strong>测试多渠道打包</strong>，这里还最重要的一点就是: 没有让大家去运行什么命令，全部是让大家点击来实现的，其实点击就是在<strong>运行命令</strong>：</p>
</blockquote>
<pre><code>./gradew installXiaomiDebug 
</code></pre><h3 id="一键完成打包-全部产品-并签名"><a href="#一键完成打包-全部产品-并签名" class="headerlink" title="一键完成打包(全部产品)并签名"></a>一键完成打包(全部产品)并签名</h3><blockquote>
<p>正如标题所示，我们如果要<strong>打包所有的产品</strong>，肯定不能像刚才一样一个一个来打，那么现在来使用另外一个按钮(命令)<strong>assemble</strong>，如下：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release13.png" alt=""></p>
<blockquote>
<p>然后切换项目到Project视图，找到app>build>outputs>apk,结果如下我们看到所有版本的apk都有了，有debug版的，debug没有签名的，release没有签名的。</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release14.png" alt=""></p>
<blockquote>
<p>如果我们现在只想打包所有的release版本怎么办呢？看下面的图，如果想打release版就双击(assembleRelease),如果想打所有的debug版本就双击(assembleDebug)</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release15.png" alt=""></p>
<blockquote>
<p>现在我们就可以通过不同的按钮打包不同类型的apk了。</p>
</blockquote>
<p><strong>常用的打包命令</strong></p>
<pre><code>./gradlew assembleDebug 编译并打Debug包
./gradlew assembleRelease 编译并打Release的包
./gradlew installRelease Release模式打包并安装
./gradlew uninstallRelease 卸载Release模式包
 .....
</code></pre><p><strong>问题: 所有的apk生成了，但是没有签名是发布不了的，怎么办？</strong></p>
<blockquote>
<p>1.点击项目架构按钮，如下，或使快捷键：Command + ;</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release16.png" alt=""></p>
<blockquote>
<p>2.然后点击app>Signing > + ，然后填写上签名信息，最后点击OK</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release17.png" alt=""></p>
<blockquote>
<p>我们做的上述操作其实就是在build.gradle(Module: app)文件中添加如下信息：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release18.png" alt=""></p>
<blockquote>
<p>此时我们把apk下面的apk文件删掉，然后双击assembleRelease，结果发现还是没有签名，你在逗我？</p>
<p><strong>注意：</strong> 我们目前为止只是<strong>配置了签名信息</strong>，但是并没有给产品(apk)指定，我们只需要在build.gradle(Module: app)文件中添加如下的代码就 ok了，我们来试试看。</p>
</blockquote>
<pre><code>//指定签名为release
signingConfig signingConfigs.release
</code></pre><p><img src="http://o9zgq2ik9.bkt.clouddn.com/release19.png" alt=""></p>
<blockquote>
<p>现在删掉apk文件夹下所有的apk，然后选择assembleRelease, 然后点击run按钮，如下图，这里的run会记录我们最近使用的run脚本名称.</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release20.png" alt=""></p>
<blockquote>
<p>现在我们来看看apk目录下的安装包是否签名：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/release21.png" alt=""></p>
<p><strong>补充</strong></p>
<blockquote>
<p>安装apk的命令(包名一样版本号一样，所以只能存在一个，在进行多个渠道apk安装测试时，一台手机上只能安装一个)</p>
</blockquote>
<pre><code>adb install apk路径/app-渠道名-release.apk
</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>我们在第一部分生成了.jks密钥文件，以便于后续部分的使用，然后进行多渠道打包：在<strong>manifast文件</strong>中添加了<strong>meta渠道标签</strong>，然后修改了<strong>gradle的文件</strong>添加了<strong>不同的渠道产品</strong>，最后我们在代码中读取了meta标签的value并且在进行了日志打印。最后我们又添加了签名配置，指定了给release版本的签名，签名的名称是release，并最终搞定了一键多渠道打包签名。</p>
</blockquote>
<p><strong>参考资料</strong><br><a href="http://blog.csdn.net/yy1300326388/article/details/48344411" target="_blank" rel="external">http://blog.csdn.net/yy1300326388/article/details/48344411</a><br><a href="http://blog.csdn.net/yy1300326388/article/details/48296221" target="_blank" rel="external">http://blog.csdn.net/yy1300326388/article/details/48296221</a><br><a href="http://wuxiaolong.me/2016/04/01/gradle4android3/" target="_blank" rel="external">http://wuxiaolong.me/2016/04/01/gradle4android3/</a><br><a href="http://www.rocidea.com/roc-23118.aspx" target="_blank" rel="external">http://www.rocidea.com/roc-23118.aspx</a><br><a href="http://mouxuejie.com/blog/2016-08-06/build-and-multichannel-package-practice/" target="_blank" rel="external">http://mouxuejie.com/blog/2016-08-06/build-and-multichannel-package-practice/</a><br><a href="http://www.jianshu.com/p/bb681879a291" target="_blank" rel="external">http://www.jianshu.com/p/bb681879a291</a><br><a href="http://blog.qiji.tech/archives/1050" target="_blank" rel="external">http://blog.qiji.tech/archives/1050</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;生成jks签名&quot;&gt;&lt;a href=&quot;#生成jks签名&quot; class=&quot;headerlink&quot; title=&quot;生成jks签名&quot;&gt;&lt;/a&gt;生成jks签名&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o9zgq2ik9.bkt.clouddn.com/re
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="AS" scheme="http://yoursite.com/tags/AS/"/>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="AndroidStudio" scheme="http://yoursite.com/tags/AndroidStudio/"/>
    
      <category term="jks密钥生成" scheme="http://yoursite.com/tags/jks%E5%AF%86%E9%92%A5%E7%94%9F%E6%88%90/"/>
    
      <category term="apk签名" scheme="http://yoursite.com/tags/apk%E7%AD%BE%E5%90%8D/"/>
    
      <category term="多渠道打包" scheme="http://yoursite.com/tags/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    
      <category term="打包" scheme="http://yoursite.com/tags/%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Android中的图片加载框架</title>
    <link href="http://yoursite.com/2016/10/28/Android%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/10/28/Android中的图片加载框架/</id>
    <published>2016-10-28T12:47:28.000Z</published>
    <updated>2016-10-29T03:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>引子</strong></p>
<blockquote>
<p>对于很多App来说，都会有<strong>图片加载</strong>的需求，毕竟有图片的App才能显得更加多姿多彩。要实现图片加载，其基础的原理并不麻烦，大概有这么几点：</p>
</blockquote>
<ul>
<li><p>图片应该是<strong>异步加载</strong>的，从网络上下载图片会是一个比较耗时的过程，如果是在UI主线程里进行，那么ANR肯定无法避免了。任何耗时操作都在<strong>异步线程</strong>里进行</p>
</li>
<li><p>图片从网上下载完之后，需要<strong>在本地进行Bitmap的处理</strong>，最重要的就是<strong>图片的压缩</strong>。这一步是比较难办的，压缩的力度太大，图片的显示效果就会比较差；压缩的不够，那么图片就会占用大量内存，动辄就搞出<strong>OOM</strong></p>
</li>
<li><p>最好实现一个自己的<strong>缓存策略</strong>，即把图片下载到本地内存和磁盘中，需要保存下来并有一定的策略，这样下次再加载同样的图片的时候，就可以直接在本地加载而不需要去网络下载了，大大提升了加载速度并节省了流量，当然这一步也是比较麻烦的</p>
</li>
</ul>
<blockquote>
<p>实现了以上3点，你就可以做出一个<strong>基本的图片加载库</strong>了，当然，可能会比较粗糙。实际上呢，网上有大量的图片加载库，而且是<strong>开源的</strong>，最重要的在于，这些库都有<strong>各自的缓存策略</strong>，而且经过了大量开发者的实践考验，都很可靠。其中，比较有名的有：Universal-Image-Loader、Picasso、Glide和Fresco，今天的工作就是对它们进行比较。</p>
</blockquote>
<p><strong>四大图片缓存框架基本信息</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/image-cache-compare-before.jpeg" alt=""></p>
<p><strong>基本概念</strong></p>
<blockquote>
<p>在正式对比前，先了解几个图片缓存框架通用的概念：</p>
</blockquote>
<ul>
<li>RequestManager：请求生成和管理模块</li>
<li>Engine：引擎部分，负责创建任务(获取数据)，并调度执行</li>
<li><p>GetDataInterface：数据获取接口，负责从各个数据源获取数据</p>
<blockquote>
<p>比如 MemoryCache 从内存缓存获取数据、DiskCache 从本地缓存获取数据，下载器从网络获取数据等。</p>
</blockquote>
</li>
<li><p>Displayer：资源(图片)显示器，用于显示或操作资源。</p>
<blockquote>
<p>比如 ImageView，这几个图片缓存都不仅仅支持 ImageView，同时支持其他 View 以及虚拟的 Displayer 概念。</p>
</blockquote>
</li>
<li><p>Processor 资源(图片)处理器</p>
<blockquote>
<p>负责处理资源，比如旋转、压缩、截取等。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>以上概念的称呼在不同图片缓存框架中可能不同，比如 Displayer 在 ImageLoader 中叫做 <strong>ImageAware</strong>，在 Picasso 和 Glide 中叫做 <strong>Target</strong>。</p>
</blockquote>
<p><strong>共同的优点</strong></p>
<ul>
<li><p>使用简单 </p>
<blockquote>
<p>一句代码就可以实现图片获取和显示</p>
</blockquote>
</li>
<li><p>可配置度高，自适应程度高</p>
<blockquote>
<p>图片缓存的下载器(重试机制)、解码器、显示器、处理器、内存缓存、本地缓存、线程池、缓存算法等大都可轻松配置。<br>自适应程度高，根据系统性能初始化缓存配置、系统信息变更后动态调整策略。比如根据 CPU 核数确定最大并发数，根据可用内存确定内存缓存大小，网络状态变化时调整最大并发数等。</p>
</blockquote>
</li>
<li><p>多级缓存</p>
<blockquote>
<p>至少两级缓存，提高加载速率</p>
</blockquote>
</li>
<li><p>支持多种数据源</p>
<blockquote>
<p>网络、本地、资源、Assets等</p>
</blockquote>
</li>
<li><p>支持多种displayer</p>
<blockquote>
<p>不仅支持ImageView 还支持其他的View以及虚拟的 Displayer 概念等</p>
</blockquote>
</li>
<li><p>其他小的共同点包括支持动画、支持 transform 处理、获取 EXIF 信息等</p>
</li>
</ul>
<hr>
<h3 id="Universal-Image-Loader-UIL"><a href="#Universal-Image-Loader-UIL" class="headerlink" title="Universal Image Loader(UIL)"></a>Universal Image Loader(UIL)</h3><p><strong> <a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="external">Github</a></strong></p>
<blockquote>
<p>很早开源的图片缓存，在早期被很多应用使用，作者前阵子（2015/11/27）宣布不再维护这个项目了，换言之，以后它不会更新了——虽然有可能被其他开发者接手，但考虑到现在图片加载库十分丰富，有这个兴致的人怕是不多。如果你要开发新项目，可以不考虑UIL了，但如果是一个比较老而又庞大的项目并且使用了UIL，那么倒也不必太着急替换它，至少目前它还是能很好的完成图片加载任务的，<strong>不推荐使用</strong>。</p>
</blockquote>
<p><strong>总体设计及流程</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/overall-design-imageloader.jpg" alt=""></p>
<blockquote>
<p>上面是 ImageLoader 的总体设计图。整个库分为 ImageLoaderEngine，Cache 及 ImageDownloader，ImageDecoder，BitmapDisplayer，BitmapProcessor 五大模块，其中 Cache 分为 MemoryCache 和 DiskCache 两部分。</p>
<p>简单的讲就是 ImageLoader 收到加载及显示图片的任务，并将它交给 ImageLoaderEngine，ImageLoaderEngine 分发任务到具体线程池去执行，任务通过 Cache 及 ImageDownloader 获取图片，中间可能经过 BitmapProcessor 和 ImageDecoder 处理，最终转换为Bitmap 交给 BitmapDisplayer 在 ImageAware 中显示。</p>
</blockquote>
<p><strong>添加库文件</strong></p>
<pre><code>universal-image-loader-1.9.5.jar
</code></pre><p><strong>基本使用</strong></p>
<pre><code>// 单例模式 在application中创建配置图片的参数，直接使用
ImageLoader imageloader = Imageloader.getInstance();
imageloder.displayerImage(imagerUrl[position],holder.image,
options,loadingListener)
</code></pre><p><a href="http://blog.csdn.net/huangbiao86/article/details/22781701" target="_blank" rel="external">使用参考</a></p>
<p><strong>特点</strong></p>
<ul>
<li><p>支持下载进度监听</p>
<blockquote>
<p>如果你有特殊需求，则可以在图片开始下载前、刚开始下载等<strong>各个时间段</strong>来做一些额外的事情，非常方便</p>
</blockquote>
</li>
<li><p>可以在View滚动中暂停图片加载</p>
<blockquote>
<p>通过pauseOnScrollListener接口可以在view滚动中暂停图片加载，有利于提升界面的流畅度</p>
</blockquote>
</li>
<li><p>默认实现多种内存缓存算法(多种缓存策略)</p>
<blockquote>
<p>这几个图片缓存框架都可以配置<strong>缓存算法</strong>，不过 ImageLoader 默认实现了较多缓存算法，如 最大尺寸先删除、使用最少先删除、最近最少使用、先进先删除、时间最长先删除等。</p>
</blockquote>
</li>
<li><p>支持本地缓存文件名规则定义</p>
</li>
</ul>
<hr>
<h3 id="Picasso"><a href="#Picasso" class="headerlink" title="Picasso"></a>Picasso</h3><p><strong> <a href="https://github.com/square/picasso" target="_blank" rel="external">Github</a></strong> &amp; <strong> <a href="http://square.github.io/picasso/" target="_blank" rel="external">官网</a></strong></p>
<blockquote>
<p>Square 开源的项目，总体来看它比较小巧，但也有着一些自己的特色，最重要的是他的主导者是 JakeWharton，所以广为人知。Picasso使用起来比较简单，不过对于新项目来说，<strong>也不是很推荐</strong>，原因就在于，<strong>Glide比它更优秀</strong>，而且使用起来几乎是一样的。</p>
</blockquote>
<p><strong>总体设计及流程</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/overall-design-picasso.jpg" alt=""></p>
<blockquote>
<p>上面是 Picasso 的总体设计图。整个库分为 Dispatcher，RequestHandler 及 Downloader，PicassoDrawable 等模块。</p>
<p>Dispatcher 负责分发和处理 Action，包括提交、暂停、继续、取消、网络状态变化、重试等等。</p>
<p>简单的讲就是 Picasso 收到加载及显示图片的任务，创建 Request 并将它交给 Dispatcher，Dispatcher 分发任务到具体 RequestHandler，任务通过 MemoryCache 及 Handler(数据获取接口) 获取图片，图片获取成功后通过 PicassoDrawable 显示到 Target 中。</p>
<p>需要注意的是上面 <strong>Data 的 File system </strong>部分，Picasso 没有自定义本地缓存的接口，默认使用 http 的本地缓存，API 9 以上使用 okhttp，以下使用 Urlconnection，所以如果需要自定义本地缓存就需要重定义 Downloader。</p>
</blockquote>
<p><strong>添加依赖</strong></p>
<pre><code>compile &apos;com.square.picasso:picasso:2.5.1&apos;
</code></pre><p><strong>基本使用</strong></p>
<pre><code>Picasso.with(context)
   .load(&quot;图片url&quot;)
   .into(显示控件);
</code></pre><p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/0731/1639.html" target="_blank" rel="external">参考</a></p>
<p><strong>特点</strong></p>
<ul>
<li><p>自带统计监控功能</p>
<blockquote>
<p>支持图片缓存使用的监控，包括缓存命中率，已使用内存大小，节省的流量等</p>
</blockquote>
</li>
<li><p>支持优先级处理</p>
<blockquote>
<p>每次任务调度前会选择优先级高的任务，比如app页面的Banner的优先级高于Icon时很使用。</p>
</blockquote>
</li>
<li><p>支持延迟到图片尺寸计算完成加载</p>
</li>
<li><p>支持飞行模式，并发线程根据网络类型而改变 </p>
<blockquote>
<p>手机切换到飞行模式或网络类型变换时会自动调整线程池最大并发数，比如 wifi 最大并发为 4， 4g 为 3，3g 为 2。这里 Picasso 根据网络类型来决定最大并发数，而不是 CPU 核数。这里Picasso 根据网络类型来决定最大并发数，而不是cpu核数。</p>
</blockquote>
</li>
<li><p>“无”本地缓存(本身没有什么缓存策略，而是依赖所用的网络库的缓存策略)</p>
<blockquote>
<p>无”本地缓存，不是说没有本地缓存，而是 Picasso 自己没有实现，交给了 Square 的另外一个网络库 okhttp 去实现，这样的好处是可以通过请求 Response Header 中的 Cache-Control 及 Expired 控制图片的过期时间。</p>
</blockquote>
</li>
<li><p>在adapter中需要取消已经不在视野范围的ImageView图片资源的加载，否则会导致图片错位，Picasso已经解决了这个问题。</p>
</li>
<li><p>使用复杂的图片压缩转换来尽可能的减少内存消耗</p>
</li>
<li><p>自带内存和磁盘二级缓存功能，存储的结构采用了LinkedHashMap, 底层的缓存功能使用的是LruCache类，缓存路径默认是放在应用目录的／cache／picasso-cache／</p>
</li>
<li><p>如果加载发生错误会重复三次请求，三次都失败才会显示erro Place holder</p>
<pre><code>Picasso.with(context)
   .load(url)
   .placeholder(R.drawable.user_placeholder)
   .error(R.drawable.user_placeholder_error)
   .into(imageView);
</code></pre></li>
<li><p>使用简单，源码简单易懂。Picasso 代码虽然只在一个包下，没有严格的包区分，但代码简单、逻辑清晰</p>
</li>
<li><p>Picasso的方式则因为需要在显示之前重新调整大小而导致一些延迟，Glide加载显示更快。</p>
</li>
<li><p>ARGB_8888</p>
</li>
<li><p>包大小：1.2MB</p>
</li>
</ul>
<hr>
<h3 id="Glide"><a href="#Glide" class="headerlink" title="Glide"></a>Glide</h3><p><strong> <a href="https://github.com/bumptech/glide" target="_blank" rel="external">Github</a></strong></p>
<blockquote>
<p>来自于Google员工bumptech的开源项目，被Google官方所推荐，专注于流畅的滚动，甚至在许多Android的原生应用中都采用了Glide来加载图片，可见其受推崇的程度，所以，<strong>推荐使用</strong>。</p>
</blockquote>
<p><strong>总体设计及流程</strong></p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/overall-design-glide.jpg" alt=""></p>
<blockquote>
<p>上面是 Glide 的总体设计图。整个库分为 RequestManager(请求管理器)，Engine(数据获取引擎)、 Fetcher(数据获取器)、MemoryCache(内存缓存)、DiskLRUCache、Transformation(图片处理)、Encoder(本地缓存存储)、Registry(图片类型及解析器配置)、Target(目标) 等模块。</p>
<p>简单的讲就是 Glide 收到加载及显示资源的任务，创建 Request 并将它交给RequestManager，Request 启动 Engine 去数据源获取资源(通过 Fetcher )，获取到后 Transformation 处理后交给 Target。</p>
<p>Glide 依赖于 DiskLRUCache、GifDecoder 等开源库去完成本地缓存和 Gif 图片解码工作。</p>
</blockquote>
<p><strong>添加依赖</strong></p>
<pre><code>compile &apos;com.github.bumptech.glide:glide:3.5.2&apos;
</code></pre><p><strong>基本使用</strong></p>
<pre><code>Glide.with(context)
   .load(&quot;图片url&quot;)
   .into(显示控件);
</code></pre><blockquote>
<p>Picasso和Glide的基本使用方法是很相似的，从某种程度上说，Glide可以看作是Picasso的改进版。</p>
</blockquote>
<p><a href="http://blog.csdn.net/fancylovejava/article/details/44747759" target="_blank" rel="external">详细使用方法</a></p>
<p><strong>特点</strong></p>
<ul>
<li><p>支持优先级处理(与Picasso类似)</p>
</li>
<li><p>Glide更易用，因为其with方法不但可以接受context，还可以接受Activity和Fragment，Context会自动的从它们中获取。同时将Activity／Fragment作为with的参数的好处是：图片加载会和Activity／Fragment的生命周期保持一致，比如Paused状态在暂停加载，在Resumed状态的时候又会自动重新开始加载，所以，建议传递参数Activity和Fragment给Glide，而不是Context</p>
</li>
<li><p>支持trimMemory（OnTrimMemory是Android 4.0之后提供的API，系统会根据<strong>不同的内存状态来回调</strong>。根据不同的内存状态，来响应不同的内存释放策略。）Glide对每个Context都保持一个RequestManager ,通过FragmentTransaction保持和activity/fragment生命周期一致，并且有相应的trimMemory接口可以实现</p>
</li>
<li><p>内存友好  </p>
<ul>
<li><p>Glide的内存缓存有个active的设计</p>
<blockquote>
<p>从内存缓存中取数据时，不像一般的实现用get，而是remove，再把这个缓存数据放到一个value为软引用的activeResurces map中，并计数引用数，在图片加载完成后进行判断，如果引用数为空，则回收掉。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>内存缓存更小的图片</p>
<blockquote>
<p>Glide以url, view_width，view_height,屏幕分辨率等作为联合的Key，将处理后的图片缓存在内存缓存中，而不是原始图片以节省大小。</p>
</blockquote>
</li>
<li><p>图片默认使用 RGB_565 而不是ARGB_888，内存占用比Picasso小一半，清晰度差，但是图片更小，也可以配置888</p>
</li>
<li><p>Picasso和Glide在磁盘缓存策略上有很大不同。Picasso缓存的是全尺寸的，而Glide缓存的是跟ImageView尺寸相同的。Glide的这种方式优点是<strong>加载显示快</strong>。而Picasso的方式则因为需要在显示之前<strong>重新调整大小</strong>而导致一些延迟</p>
<blockquote>
<p>比如加载的图片是1920*1080的大小，而在你的App中，显示该图片的ImageView大小只有1280*720，那么Glide就会很聪明的自动缓存1280*720大小的图片。</p>
</blockquote>
</li>
<li><p>图片缓存 -> 媒体缓存</p>
<blockquote>
<p>Glide 不仅是一个图片缓存，它支持 Gif、WebP、缩略图。甚至是 Video，所以更该当做一个媒体缓存，而Picasso不能。但是Glide 动画会消费太多的内存，因此<strong>谨慎使用</strong>。</p>
</blockquote>
</li>
<li><p>默认使用HttpUrlConnection下载图片，可以配置为OkHttp或者Volley进行下载，也可以<strong>自定义下载方式</strong>。实际image-loader，Picasso都支持OkHttp，Volley</p>
</li>
<li><p>默认使用手机内置存储进行磁盘缓存，可以配置为外部存储，可以配置缓存大小，图片池大小</p>
</li>
<li><p>默认使用两个线程池来分别执行读取缓存和下载任务，都可以自定义</p>
</li>
<li><p>Glide 可以通过 signature 或不使用本地缓存支持 url 过期</p>
</li>
<li><p>在页面不可见时停止网络请求，停止对图片的解析操作</p>
</li>
<li><p>专注于流畅的滚动，当列表在滑动的时候，调用pauseRequests()取消请求，滑动停止时，调用resumeRequests()恢复请求。</p>
</li>
<li><p>Glide 功能强大，但代码量大、流转复杂。在较深掌握的情况下才推荐使用，免得出了问题难以下手解决</p>
</li>
<li><p>使用Glide，你可以配置图片显示的动画，而Picasso只有一种动画：fading in</p>
</li>
<li><p>可以使用thumbnail()产生一个你所加载图片的thumbnail</p>
</li>
<li><p>Glide还可以将任何的本地视频解码成一张静态图片</p>
</li>
<li><p>将 ImageView 还原到真实大小时，Glide 加载的图片没有 Picasso 那么平滑</p>
</li>
<li><p>包大小：1.3MB</p>
</li>
</ul>
<p><strong>自定义缓存大小</strong></p>
<blockquote>
<p>想要提高Glide的图片效果，可以创建一个新的 GlideModule 将 Bitmap 格式转换到 ARGB-8888。同时在 AndroidManifest.xml 中将 GlideModule 定义为 meta-data，如下：</p>
</blockquote>
<ul>
<li><p>首先创建一个GlideModule子类实现GlideModule接口</p>
<pre><code>public class MyGlideModule implements GlideModule {
@Override
public void applyOptions(Context context, GlideBuilder builder) {
     // Apply options to the builder here
}
@Override
public void registerComponents(Context contxt, Glide glide) {
    // register ModuleLoaders here
}
}
</code></pre></li>
<li><p>创建一个混淆文件, 针对于该GlideModule类的:</p>
</li>
</ul>
<blockquote>
<p>文件夹名: proguard.cfg</p>
</blockquote>
<pre><code>-keepnames class com.mypackage.MyGlideModule
# or more generally:
#-keep public class * implements com.bumptech.glide.module.GlideModule
</code></pre><ul>
<li><p>添加如下标签到AndroidManifest.xml文件中, 以便Glide可以找到你配置的GlideModule类</p>
<pre><code>&lt;meta-data
       android:name=&quot;com.mypackage.MyGlideModule&quot;
       android:value=&quot;GlideModule&quot; /&gt;
</code></pre></li>
</ul>
<blockquote>
<p>修改了 Bitmap 格式后，Glide 将花费两倍于上次的内存，但是仍远远小于 Picasso 的内存开销，原因在于 Picasso 是加载了全尺寸的图片到内存，然后让 GPU 来实时重绘大小。而 Glide 加载的大小和 ImageView 的大小是一致的，当然，Picasso 也是可以指定加载图片大小的，但是问题在于你需要<strong>主动计算 ImageView 的大小</strong>，或者说你的 ImageView 大小是具体的值（而不是 wrap_content ）</p>
<p>在加载图片这个问题上 Glide 完胜 Picasso，因为 Glide 可以自动计算出任意情况下的 ImageView 大小。</p>
</blockquote>
<p><strong>磁盘缓存Disk Cache</strong></p>
<blockquote>
<p>默认缓存在手机内置存储</p>
</blockquote>
<pre><code>builder.setDiskCache(new InternalCacheDiskCacheFactory(context,yourSizeInBytes));
</code></pre><blockquote>
<p>缓存到外置的SD卡</p>
</blockquote>
<pre><code>builder.setDiskCache(new ExternalCacheDiskCacheFactory(context, cacheDirectoty, yourSizeInBytes));
</code></pre><p><strong>内存缓存Memory Cache</strong></p>
<pre><code>builder.setMemoryCache(new LruResourceCache(yourSizeInBytes));
</code></pre><blockquote>
<p>Bitmap pool</p>
</blockquote>
<pre><code>builder.setBitmapPool(new LruBitmapPool(yourSizeInBytes));
</code></pre><blockquote>
<p>Bitmap Format</p>
</blockquote>
<pre><code>builder.setDecodeFormat(DecodeFormat.ALWAYS_ARGB_8888);
</code></pre><blockquote>
<p>Picasso 和 Glide 在磁盘缓存策略上有很大的不同。Picasso 缓存的是全尺寸的，而 Glide 缓存的是跟 ImageView 尺寸相同的。我们可以将 ImageView 调整成不同大小，但不管大小如何 Picasso 只缓存一个全尺寸的。Glide 则不同，它会为每种大小的 ImageView 缓存 一次。尽管一张图片已经缓存了一次，但是假如你要在另外一个地方再次以不同尺寸显示，需要重新下载，调整成新尺寸的大小，然后将这个尺寸的也缓存起来。具体说来就是：假如在第一个页面有一个 200×200 的 ImageView，在第二个页面有一个 100×100 的 ImageView，这两个 ImageView 本来是要显示同一张图片，却需要下载两次。不过，你可以通过代码改变这种行为，让Glide既缓存全尺寸又缓存其他尺寸，这样就使得下次在任何 ImageView 中加载图片的时候，全尺寸的图片将从缓存中取出，重新调整大小，然后缓存。<br>Glide 的这种方式优点是加载显示非常快。而 Picasso 的方式则因为需要在显示之前重新调整大小而导致一些延迟。不过 Glide 比 Picasso 需要更大的空间来缓存。</p>
</blockquote>
<hr>
<h3 id="Fresco"><a href="#Fresco" class="headerlink" title="Fresco"></a>Fresco</h3><p><strong> <a href="https://github.com/facebook/fresco" target="_blank" rel="external">Github</a></strong> &amp; <strong> <a href="http://fresco-cn.org/docs/index.html" target="_blank" rel="external">官网</a></strong></p>
<blockquote>
<p>这个可以称为是Android平台上目前最为强大的图片加载库了，来源于地球人都知道的Facebook公司。</p>
</blockquote>
<p><strong>添加依赖</strong></p>
<pre><code>compile &apos;com.facebook.fresco:fresco:0.6.0+&apos;
</code></pre><p><strong>用法</strong></p>
<ul>
<li><p>application 中 初始化</p>
<p>  Fresco.initialize(context);</p>
</li>
<li><p>布局文件中 加入命名空间</p>
<p>  \&lt;LinearLayout  </p>
<pre><code>xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;     xmlns:fresco=&quot;http://schemas.android.com/apk/res-auto&quot;\&gt;
</code></pre></li>
<li><p>加入SimpleDraweeView</p>
<p>  \&lt;com.facebook.drawee.view.SimpleDraweeView </p>
<pre><code>android:id=&quot;@+id/my_image_view&quot; 
android:layout_width=&quot;20dp&quot; 
android:layout_height=&quot;20dp&quot; 
fresco:placeholderImage=&quot;@drawable/my_drawable&quot; /&gt;
</code></pre><p>  Uri uri = Uri.parse(“<a href="https://XXXX" target="_blank" rel="external">https://XXXX</a>“);<br>  SimpleDraweeView draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view);<br>  draweeView.setImageURI(uri);</p>
</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li><p>Fresco 中设计有一个叫做 image pipeline 的模块。它负责从网络，从本地文件系统，本地资源加载图片。为了最大限度节省空间和CPU时间，它含有3级缓存设计（<strong>2级内存，1级文件</strong>）。</p>
</li>
<li><p>Fresco 中设计有一个叫做 Drawees 模块，方便地显示loading图，当图片不再显示在屏幕上时，及时地释放内存和空间占用。</p>
</li>
<li><p>Fresco 支持 Android2.3(API level 9) 及其以上系统。</p>
</li>
<li><p>内存管理(内存方面的表现更是无敌)</p>
<blockquote>
<p>解压后的图片，即Android中的<strong>Bitmap</strong>，占用大量的内存。大的内存占用势必引发<strong>更加频繁的GC</strong>。在5.0以下，GC将会显著地引发<strong>界面卡顿</strong>。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>在5.0以下系统，使用了Native缓存，Fresco将图片放到一个特别的内存区域。当然，在图片不显示的时候，占用的内存会自动被释放。这会使得APP更加流畅，减少因图片内存占用而引发的OOM。</p>
<p>为什么说是5.0以下，因为在5.0以后系统默认就是存储在Ashmem区了。</p>
<p>Android中的每个App的Java堆内存大小都是被严格控制的，每个对象都是使用Java的new在堆内存实例化，这是内存中相对安全的一块区域，内存有垃圾回收机制，App不在内存时，系统会自动回收内存。当内存进行垃圾回收机制时，还把Android应用完全终止了，也是使用App最常见的卡顿或假死的原因之一。</p>
<p>Ashmem Android 在操作Ashmem堆时,会把该堆中存有数据的内存区域从Ashmem对中抽取出来,而不是把它释放掉，这是一种<strong>弱内存释放模式</strong>; 被抽取出来的这部分内存只有当系统真正需要更多的内存那时候才会被释放，当Android把被抽取出来的这部分内存放回Ashmem堆,只是被抽取的内存空间没有被释放，之前的数据就被回复到相应的位置。</p>
<p>由于将图片放在Ashmem（匿名共享内存）中，大大降低了App的内存占用（因为Ashmem没有被统计到App的内存使用里），再加上各种优化，使得Fresco基本上告别了OOM。</p>
<p>Fresco 在低端机器上表现一样出色，你再也不用因图片内存占用而思前想后，但是源代码基于C/C++，阅读困难度提升。</p>
</blockquote>
<ul>
<li><p>图片的渐进式呈现(类似WebView)</p>
<blockquote>
<p><strong>渐进式的JPEG图片</strong>格式已经流行数年了，渐进式图片格式<strong>先呈现大致的图片轮廓</strong>，然后随着图片下载的继续，<strong>呈现逐渐清晰的图片</strong>，这对于移动设备，尤其是<strong>慢网络有极大的利好</strong>，可带来更好的用户体验。</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>Android 本身的图片库不支持此格式，但是Fresco支持。使用时，和往常一样，仅仅需要提供<strong>一个图片的URI</strong>即可，剩下的事情，Fresco会处理.</p>
</blockquote>
<ul>
<li><p>Gif图和WebP格式</p>
<blockquote>
<p>是的，支持加载Gif图(与Glide一样)，支持WebP格式</p>
</blockquote>
</li>
<li><p>图像的呈现</p>
<blockquote>
<p>Fresco 的 Drawees 设计，带来一些有用的特性：</p>
</blockquote>
</li>
<li><p>自定义居中焦点(对人脸等图片显示非常有帮助)</p>
<ul>
<li>圆角图，当然圆圈也行。</li>
<li>下载失败之后，点击重现下载</li>
<li>自定义占位图，自定义overlay, 或者进度条</li>
<li>指定用户按压时的overlay</li>
</ul>
</li>
<li><p>图像的加载</p>
<blockquote>
<p>Fresco 的 image pipeline 设计，允许用户在多方面控制图片的加载：</p>
</blockquote>
</li>
<li><p>为同一个图片指定不同的远程路径，或者使用已经存在本地缓存中的图片</p>
<ul>
<li>先显示一个低解析度的图片，等高清图下载完之后再显示高清图</li>
<li>加载完成回调通知</li>
<li>对于本地图，如有EXIF缩略图，在大图加载完成之前，可先显示缩略图</li>
<li>缩放或者旋转图片</li>
<li>处理已下载的图片</li>
<li><p>WebP 支持</p>
<blockquote>
<p>Fresco的图片直接显示为<strong>ARGB8888</strong>这种最高质量的级别，即使是在这种高质量的情况下依然保证了<strong>比其他库更少的内存占用</strong>，不得不佩服Facebook的实力。而且类似于进度监听、缓存策略等，也是应有尽有，总之作为一个图片加载库，Fresco在功能和性能方面已经趋于完美了。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>能够根据View的展示状态控制网络请求和图片解析的状态（在页面不可见时停止对图片的网络请求和解析操作，在页面可见时恢复操作）</p>
</li>
<li><p>对外提供清除缓存的方法</p>
</li>
<li><p>体积较大，集成后增大apk体积</p>
</li>
<li><p>需要使用特定的view，需要xml支持</p>
</li>
<li><p>包大小：4MB</p>
</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://o9zgq2ik9.bkt.clouddn.com/image-cache-compare-after.jpeg" alt=""></p>
<blockquote>
<p>总体上来说，ImageLoader 的功能以及代理容易理解长度都一般。</p>
<p>Picasso与Glide有着近乎相同的 API 的使用风格，但 Glide 在缓存策略和加载 gif 方面略胜一筹。</p>
<p>Glide 和 Picasso 都是非常完美的库。Glide 加载图像以及磁盘缓存的方式都要优于 Picasso，速度更快，并且 Glide 更有利于减少 OutOfMemoryError 的发生，GIF 动画是 Glide 的杀手锏。不过Picasso 的图片质量更高。如果使用 Glide，建议将 Bitmap 格式换成 ARGB_8888、让 Glide 缓存同时缓存全尺寸和改变尺寸两种</p>
<p>Picasso 代码虽然只在一个包下，没有严格的包区分，但代码简单、逻辑清晰，一两个小时就能叫深入的了解完。</p>
<p>Glide 功能强大，但代码量大、流转复杂。在较深掌握的情况下才推荐使用，免得出了问题难以下手解决。</p>
<p>Picasso 所能实现的功能 Glide 都能做到，只是所需设置不同。两者的区别是 Picasso 比 Glide 体积小很多且图像质量比 Glide 高，但Glide 的速度比 Picasso 更快，Glide 的长处是处理大型的图片流，如 gif、video，如果要制作视频类应用，Glide 当为首选。</p>
<p>Fresco 可以说是综合了之前图片加载库的优点，其在5.0以下的内存优化非常好，但它的不足是<strong>体积太大</strong>，按体积进行比较：<strong>Fresco>Glide>Picasso</strong>，所以 Fresco 在图片较多的应用中更能凸显其价值，如果应用没有太多图片需求，不推荐使用 Fresco。</p>
<p>项目比较老，代码量较大，又没什么时间去大改，那么继续维持当前的选择是比较稳妥的办法。如果是新上马的项目，那么UIL由于不再维护、<strong>Picasso基本被Glide全方位超越</strong>，我<strong>推荐使用Glide或Fresco</strong>。如果你的App里，图片特别多，而且都是很大、质量很高的图片，而且你不太在乎App的体积（这可能吗？），那么Fresco就是很好的选择了，而<strong>Glide相比较Fresco要轻量一些</strong>，而且是Google官方推荐，所以在多数时候，会是开发者的首选。话说回来，如果你非常在意App的体积，不肯让App多增加多余的1KB，那么，也许自己实现一个图片加载库也是不错的选择哦，而且能很好的锻炼自己的能力。</p>
</blockquote>
<p><strong>参考资料</strong><br><a href="http://www.aichengxu.com/view/10139294" target="_blank" rel="external">http://www.aichengxu.com/view/10139294</a><br><a href="http://www.trinea.cn/android/android-image-cache-compare/" target="_blank" rel="external">http://www.trinea.cn/android/android-image-cache-compare/</a><br><a href="http://www.jianshu.com/p/ada9b90fa9e6" target="_blank" rel="external">http://www.jianshu.com/p/ada9b90fa9e6</a><br><a href="http://www.kaelli.com/15.html" target="_blank" rel="external">http://www.kaelli.com/15.html</a><br><a href="http://blog.csdn.net/a910626/article/details/50688637" target="_blank" rel="external">http://blog.csdn.net/a910626/article/details/50688637</a><br><a href="http://blog.qiji.tech/archives/6344" target="_blank" rel="external">http://blog.qiji.tech/archives/6344</a><br><a href="https://www.zhihu.com/question/40028112" target="_blank" rel="external">https://www.zhihu.com/question/40028112</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;引子&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于很多App来说，都会有&lt;strong&gt;图片加载
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="开源库" scheme="http://yoursite.com/tags/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="图片加载" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="Glide" scheme="http://yoursite.com/tags/Glide/"/>
    
      <category term="UIL" scheme="http://yoursite.com/tags/UIL/"/>
    
      <category term="Picasso" scheme="http://yoursite.com/tags/Picasso/"/>
    
      <category term="Fresco" scheme="http://yoursite.com/tags/Fresco/"/>
    
  </entry>
  
  <entry>
    <title>Android中网络请求框架</title>
    <link href="http://yoursite.com/2016/10/23/Android%E4%B8%AD%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/10/23/Android中网络请求框架/</id>
    <published>2016-10-23T07:46:16.000Z</published>
    <updated>2016-10-24T00:22:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>在实际开发中，频繁的接触<strong>网络请求</strong>，而网络请求的方式很多，最常见的也就那么几个。本篇文章对常见的网络请求库进行一个总结，说说网络请求到底哪家强。</p>
<p>一般网络请求专指 <strong>http请求</strong>，在选择一个框架之前，尽量选择比较专注于一项功能的库，不选大而全的库，其实在软件设计领域有一个原则叫做 「<strong>单一职责原则</strong>」一个库能把一件事做好就很不错了。在上面原则的基础上，所以目前来说单纯的网络请求库就锁定在了 Volley、OkHttp、Retrofit 三个，android-async-http 的作者已经不维护，所以这里就不多说了。</p>
<p>使用过程中不要忘记添加<strong>网络访问权限</strong></p>
</blockquote>
<pre><code>&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;
</code></pre><blockquote>
<p> 在 Android 开发中是可以直接使用现成的 api 进行网络请求的，就是使用 <strong>HttpClient、HttpUrlConnection</strong> 进行操作，目前 HttpClient 已经被废弃，而 <strong>android-async-http</strong> 是基于 HttpClient 的，我想可能也是因为这个原因作者放弃维护。我们下面先依次介绍这三种。</p>
</blockquote>
<h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><p><strong>特点</strong></p>
<blockquote>
<p>高效稳定，但是维护成本高昂，故android 开发团队不愿意在维护该库而是转投更为轻便的<strong>HttpUrlConnection</strong></p>
</blockquote>
<p><strong>用法</strong></p>
<ul>
<li>HttpClient是一个接口，因此无法直接创建它的实例，一般都是创建一个<strong>DefaultHttpClient</strong>实例</li>
<li>如果要发起Get请求，需要创建一个<strong>HttpGet</strong>对象，并传入请求地址</li>
<li>如果要发起Post请求，需要创建一个<strong>HttpPost</strong>对象。并传入请求地址，通过<strong>setEntity</strong>函数<strong>设置请求参数</strong></li>
<li>调用<strong>execute</strong>方法，传入HttpGet或者HttpPost实例，执行后返回<strong>HttpResponse</strong>对象，<strong>判断响应状态码</strong></li>
<li>解析响应结果，通过调用<strong>getEntity</strong>函数获得一个<strong>HttpEntity</strong>对象，之后可以通过<strong>EntityUtils.toString</strong>方法将其转换为字符串</li>
</ul>
<blockquote>
<p>由于在android2.3之后就被<strong>HttpUrlConnection</strong>取代了，这里也不过多介绍了，不过当初学习它的时候还没接触到其他库，就感觉它好方便，下面简单贴出使用方法:</p>
<p>GET</p>
</blockquote>
<pre><code>private String get(String url){
    HttpClient client=null;
    HttpGet request=null;
    try {
         client=new DefaultHttpClient();
         request=new HttpGet(url);
         HttpResponse response=client.execute(request);
         if(response.getStatusLine().getStatusCode()== HttpStatus.SC_OK) {
              String result=EntityUtils.toString(response.getEntity(),&quot;UTF-8&quot;);
              return result;
         }
     } catch (IOException e) {
            e.printStackTrace();
     }
     return  null;
}
</code></pre><blockquote>
<p>POST</p>
</blockquote>
<pre><code>private String post(String url,List&lt;NameValuePair&gt; params){
    HttpClient client=null;
    HttpPost request=null;
    try {
        client=new DefaultHttpClient();
        request=new HttpPost(url);
        request.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));
        HttpResponse response=client.execute(request);
        if(response.getStatusLine().getStatusCode()== HttpStatus.SC_OK){
             String result=EntityUtils.toString(response.getEntity(),&quot;UTF-8&quot;);
             return result;
        }
    } catch (IOException e) {
           e.printStackTrace();
    }
    return  null;
}
</code></pre><h3 id="HttpUrlConnection"><a href="#HttpUrlConnection" class="headerlink" title="HttpUrlConnection"></a>HttpUrlConnection</h3><blockquote>
<p>在Android 2.2版本之前，HttpClient拥有较少的bug，因此使用它是最好的选择。而在Android 2.3版本及以后，HttpURLConnection则是最佳的选择。它的API简单，体积较小，因而非常适用于Android项目。<strong>压缩和缓存机制</strong>可以有效地减少网络访问的流量，在提升速度和省电方面也起到了较大的作用。对于新的应用程序应该更加偏向于使用HttpURLConnection，因为在以后的工作当中我们也会将更多的时间放在优化HttpURLConnection上面。</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>比较轻便，灵活，易于扩展</li>
<li>在3.0后以及4.0中都进行了改善，如<strong>对HTTPS的支持</strong></li>
<li>在4.0中，还增加了<strong>对缓存的支持</strong></li>
</ul>
<p><strong>用法</strong></p>
<ul>
<li>首先我们需要获取到一个<strong>HttpURLConnection</strong>实例，一般需要new出一个URL对象，并传入目标网络地址，通过调用<strong>openConnection()</strong>方法获得HttpURLConnection实例。</li>
<li>得到该实例后。我们需要设置一下http请求的的方法，这里我们主要研究get和post，默认是使用get方法。get一般用于从服务器获取数据，post一般用于向服务器提交数据，设置请求方法使用函数<strong>setRequestMethod(“POST”)</strong>进行设置。</li>
<li>此外可以进行一些请求的限制，比如连接超时的时间等，可以通过<strong>setConnectTimeout</strong>设置超时时间。</li>
<li>获取服务器返回的输入流，使用<strong>getInputStream</strong>方法获取。</li>
<li>读取内容并处理</li>
<li>关闭连接，通过调用<strong>disconnect方法</strong>关闭当前的连接。 </li>
</ul>
<blockquote>
<p>GET</p>
</blockquote>
<pre><code>public String get(String urlPath) {
        HttpURLConnection connection = null;
        InputStream is = null;
        try {
            URL url = new URL(urlPath); // 获得URL对象
            connection = (HttpURLConnection) url.openConnection(); // 获得HttpURLConnection对象
            connection.setRequestMethod(&quot;GET&quot;); // 默认为GET
            connection.setUseCaches(false); // 不使用缓存
            connection.setConnectTimeout(10000); // 设置超时时间
            connection.setReadTimeout(10000); // 设置读取超时时间
            connection.setDoInput(true); // 设置是否从httpUrlConnection读入，默认情况下是true;
            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                // 相应码是否为200
                is = connection.getInputStream(); // 获得输入流
                BufferedReader reader = new BufferedReader(new InputStreamReader(is)); // 包装字节流为字符流
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                return response.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (connection != null) {
                connection.disconnect();
                connection = null;
            }
            if (is != null) {
                try {
                    is.close();
                    is = null;
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
}
</code></pre><blockquote>
<p>POST</p>
</blockquote>
<pre><code>private String post(String urlPath, Map&lt;String, String&gt; params) {
        if (params == null || params.size() == 0) {
            return get(urlPath); // 变成get请求
        }
        OutputStream os = null;
        InputStream is = null;
        HttpURLConnection connection = null;
        StringBuffer body = getParamString(params);
        byte[] data = body.toString().getBytes();
        try {
            URL url = new URL(urlPath); //获得URL对象
            connection = (HttpURLConnection) url.openConnection(); //获得HttpURLConnection对象
            connection.setRequestMethod(&quot;POST&quot;); // 设置请求方法为post
            connection.setUseCaches(false); //不使用缓存
            connection.setConnectTimeout(10000); //设置超时时间
            connection.setReadTimeout(10000); //设置读取超时时间
            connection.setDoInput(true); //设置是否从httpUrlConnection读入，默认情况下是true;
            connection.setDoOutput(true); //设置为true后才能写入参数（必须的）
            connection.setRequestProperty(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;);
            connection.setRequestProperty(&quot;Content-Length&quot;, String.valueOf(data.length));
            os = connection.getOutputStream();
            os.write(data); //写入Post请求参数
            if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                //相应码是否为200
                is = connection.getInputStream(); //获得输入流
                BufferedReader reader = new BufferedReader(new InputStreamReader(is)); //包装字节流为字符流
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                return response.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            //关闭
            if (os != null) {
                try {
                    os.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (is != null) {
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                connection.disconnect();
                connection = null;
            }
        }
        return null;
    }
    private StringBuffer getParamString(Map&lt;String, String&gt; params) {
        StringBuffer result = new StringBuffer();
        Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = params.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry&lt;String, String&gt; param = iterator.next();
            String key = param.getKey();
            String value = param.getValue();
            result.append(key).append(&apos;=&apos;).append(value);
            if (iterator.hasNext()) {
                result.append(&apos;&amp;&apos;);
            }
        }
        return result;
 }
</code></pre><h3 id="android-async-http"><a href="#android-async-http" class="headerlink" title="android-async-http"></a>android-async-http</h3><p><strong> <a href="https://github.com/loopj/android-async-http" target="_blank" rel="external">Github</a></strong> &amp; <strong> <a href="http://loopj.com/android-async-http/" target="_blank" rel="external">官网</a></strong></p>
<blockquote>
<p>android-async-http是<strong>基于Http Client</strong>的，但是呢在安卓中<strong>Http Client已经废弃</strong>了，所以也<strong>不建议使用</strong>这个库了。然后仍然有一些可取的内容值得学习，所以这里也介绍一下。</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>所以<strong>请求在子线程</strong>中完成，<strong>请求回调</strong>在调用该请求的线程中完成</li>
<li>使用线程池</li>
<li>使用<strong>RequestParams</strong>类封装请求参数</li>
<li>支持文件上传</li>
<li><strong>持久化cookie到SharedPreferences</strong>，个人感觉这一点也是这个库的重要特点，可以很方便的完成一些模拟登录</li>
<li>支持json</li>
<li>支持HTTP Basic Auth</li>
</ul>
<p><strong>用法</strong></p>
<ul>
<li><p>编写一个静态的HttpClient</p>
<p>  public class TestClient {</p>
<pre><code>private static final String BASE_URL = &quot;http://121.41.119.107/&quot;;
private static AsyncHttpClient client = new AsyncHttpClient();

public static void get(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
    client.get(getAbsoluteUrl(url), params, responseHandler);
}
public static void post(String url, RequestParams params, AsyncHttpResponseHandler responseHandler) {
    client.post(getAbsoluteUrl(url), params, responseHandler);
}
private static String getAbsoluteUrl(String relativeUrl) {
    return BASE_URL + relativeUrl;
}
</code></pre><p>  }</p>
</li>
<li><p>调用get或者post方法</p>
</li>
</ul>
<blockquote>
<p>参数通过RequestParams传递，没有参数则传递null</p>
</blockquote>
<pre><code>RequestParams  params = new RequestParams();
params.put(&quot;&quot;,&quot;&quot;);
</code></pre><ul>
<li><p>如果要<strong>保存cookie</strong>，在发起请求之前调用以下代码</p>
<p>  PersistentCookieStore myCookieStore = new PersistentCookieStore(this);<br>  client.setCookieStore(myCookieStore);</p>
</li>
</ul>
<blockquote>
<p>之后请求所得到的cookie都会<strong>自动持久化</strong></p>
<p>如果要自己添加cookie，则调用以下代码</p>
</blockquote>
<pre><code>BasicClientCookie newCookie = new BasicClientCookie(&quot;cookiesare&quot;, &quot;awesome&quot;);
newCookie.setVersion(1);
newCookie.setDomain(&quot;mydomain.com&quot;);
newCookie.setPath(&quot;/&quot;);
myCookieStore.addCookie(newCookie);
</code></pre><ul>
<li>使用</li>
</ul>
<blockquote>
<p>在回调函数中处理返回结果</p>
</blockquote>
<pre><code>private void get(){
        TestClient.get(&quot;test/index.php&quot;, null, new AsyncHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
            }
            @Override
            public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
            }
        });
    }
    private void post(){
        RequestParams params = new RequestParams();
        params.put(&quot;user&quot;,&quot;asas&quot;);
        params.put(&quot;pass&quot;,&quot;12121&quot;);
        params.put(&quot;time&quot;,&quot;1212121&quot;);
        TestClient.post(&quot;test/login.php&quot;, params, new AsyncHttpResponseHandler() {
            @Override
            public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
            }
            @Override
            public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
            }
        });
}
</code></pre><h3 id="Volley"><a href="#Volley" class="headerlink" title="Volley"></a>Volley</h3><p><strong> <a href="https://github.com/square/okhttp" target="_blank" rel="external">Github</a></strong> &amp; <strong> <a href="http://square.github.io/okhttp/" target="_blank" rel="external">官网</a></strong> &amp; <strong><a href="http://a.codekk.com/detail/Android/grumoon/Volley%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="external">源码解析</a></strong></p>
<blockquote>
<p>Google推出的<strong>异步网络请求框架</strong>和<strong>图片加载框架</strong>，该框架封装的扩展性很强，支持 <strong>HttpClient、HttpUrlConnection，甚至支持 OkHttp</strong>。Volley 里面也封装了 <strong>ImageLoader</strong> ，所以如果你愿意你甚至不需要使用图片加载框架，不过这块功能没有一些专门的图片加载框架强大，对于简单的需求可以使用，对于稍复杂点的需求还是需要用到<strong>专门的图片加载框架</strong>。</p>
<p>既然在android2.2之后不建议使用Http Client，那么有没有一个库是android2.2及以下版本使用Http Client，而android2.3及以上版本使用HttpUrlConnection的呢，答案是肯定的，就是<strong>Volley</strong>。</p>
<p>Volley可以说是把<strong>AsyncHttpClient</strong>和<strong>Universal-Image-Loader</strong>的优点集于了一身，既可以像AsyncHttpClient一样非常简单地进行<strong>HTTP通信</strong>，也可以像Universal-Image-Loader一样轻松<strong>加载网络上的图片</strong>。除了简单易用之外，Volley在性能方面也进行了大幅度的调整，它的设计目标就是非常适合去<strong>进行数据量不大，但通信频繁的网络操作</strong>，而对于<strong>大数据量的网络操作</strong>，比如说下载文件等，Volley的表现就会<strong>非常糟糕</strong><br>Volley提供了JsonObjectRequest  JsonArrayRequest  StringRequest  ImageRequest  NetworkImageView 等<strong>Request</strong>形式。</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>Volley的优势在于处理小文件的http请求</li>
<li>特别适合数据量小，通信频繁的网络操作。android绝大多数都属于这种类型。</li>
<li>不支持 post 大数据，所以不适合上传文件</li>
<li>在Volley中也是可以使用Okhttp作为传输层</li>
<li>Volley在处理高分辨率的图像压缩上有很好的支持</li>
<li>NetworkImageView在GC的使用模式上<strong>更加保守</strong>，在请求清理上也更加积极，networkimageview仅仅依赖于强大的内存引用，并当一个新请求是来自ImageView或ImageView离开屏幕时便会清理掉所有的请求数据</li>
<li>基于接口设计, 扩展性强 </li>
<li><p>一定程度上符合http规范</p>
<blockquote>
<p>返回包括ResponseCode 的处理，请求头的处理，缓存机制的支持</p>
</blockquote>
</li>
<li><p>重试以及优先级的定义</p>
</li>
<li>提供简单的图片加载工具</li>
</ul>
<p><strong>用法</strong></p>
<ul>
<li>创建一个<strong>RequestQueue</strong>对象</li>
<li>创建一个<strong>Request</strong>对象</li>
<li>将Request对象添加到RequestQueue里面</li>
</ul>
<blockquote>
<p><strong>GET</strong></p>
</blockquote>
<pre><code>private void get(){
        RequestQueue queue= Volley.newRequestQueue(getApplicationContext());
        String url=&quot;http://121.41.119.107/test/index.php&quot;;
        StringRequest request=new StringRequest(url, new Response.Listener&lt;String&gt;() {
            @Override
            public void onResponse(String response) {
                Log.d(&quot;TAG&quot;,response);
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        });
        queue.add(request);
}
</code></pre><blockquote>
<p><strong>POST</strong> </p>
<p>通过指定请求方法为<strong>Request.Method.POST</strong>使其成为<strong>post请求</strong>，然后重新getParams方法设置请求参数。当发出POST请求的时候，Volley会尝试调用StringRequest的父类——Request中的getParams()方法来获取POST参数</p>
</blockquote>
<pre><code>private void post() {
        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());
        String url = &quot;http://121.41.119.107/test/login.php&quot;;
        StringRequest request = new StringRequest(Request.Method.POST, url, new Response.Listener&lt;String&gt;() {
            @Override
            public void onResponse(String response) {
                Log.d(&quot;TAG&quot;, response);
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        }) {
            // 重写getParams方法设置参数
            @Override
            protected Map&lt;String, String&gt; getParams() throws AuthFailureError {
                Map&lt;String, String&gt; params = new HashMap&lt;String, String&gt;();
                params.put(&quot;user&quot;, &quot;asas&quot;);
                params.put(&quot;pass&quot;, &quot;12121&quot;);
                params.put(&quot;time&quot;, &quot;1212121&quot;);
                return params;
            }
        };
        queue.add(request);
}
</code></pre><blockquote>
<p><strong>加载图片</strong></p>
<p>加载图像的方法和前面类似，只不过不在是<strong>StringRequest</strong>而是<strong>ImageRequest</strong></p>
</blockquote>
<pre><code>private void getImage() {
        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());
        String url = &quot;https://www.baidu.com/img/bdlogo.png&quot;;
        //第3第4个参数分别用于指定允许图片最大的宽度和高度，如果指定的网络图片的宽度或高度大于这里的最大值，则会对图片进行压缩，指定成0的话就表示不管图片有多大，都**不会进行压缩**
        //第五个参数就是ImageView里中的属性ScaleType
        //第六个参数用于指定图片的颜色属性
        ImageRequest request = new ImageRequest(url, new Response.Listener&lt;Bitmap&gt;() {
            @Override
            public void onResponse(Bitmap response) {
                ImageView iv= (ImageView) findViewById(R.id.iv);
                iv.setImageBitmap(response);
            }
        }, 0, 0, ImageView.ScaleType.CENTER, Bitmap.Config.ARGB_8888, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
     });
     queue.add(request);
}
</code></pre><blockquote>
<p>其实加载图片的功能还远远不止这些，使用<strong>ImageLoader</strong>可以实现对图片的<strong>缓存</strong>，还可以<strong>过滤重复链接，避免发送重复的请求</strong> </p>
<p>ImageLoader的使用方法概括为以下几步:</p>
</blockquote>
<ul>
<li>创建一个RequestQueue对象</li>
<li>创建一个ImageLoader对象</li>
<li>获取一个ImageListener对象</li>
<li><p>调用ImageLoader的get()方法加载网络上的图片</p>
<p>  //继承ImageCache，使用LruCache实现缓存<br>  public class BitmapCache implements ImageLoader.ImageCache {</p>
<pre><code>    private LruCache&lt;String, Bitmap&gt; mCache;
    public BitmapCache() {
        int maxSize = 10 * 1024 * 1024;
        mCache = new LruCache&lt;String, Bitmap&gt;(maxSize) {
            @Override
            protected int sizeOf(String key, Bitmap bitmap) {
                return bitmap.getRowBytes() * bitmap.getHeight();
            }
        };
    }
    @Override
    public Bitmap getBitmap(String url) {
        return mCache.get(url);
    }
    @Override
    public void putBitmap(String url, Bitmap bitmap) {
        mCache.put(url, bitmap);
    }
}
private void getImageByImageLoader() {
    ImageView iv= (ImageView) findViewById(R.id.iv);
    RequestQueue queue = Volley.newRequestQueue(getApplicationContext());
    String url = &quot;https://www.baidu.com/img/bdlogo.png&quot;;
    ImageLoader loader=new ImageLoader(queue,new BitmapCache());
    // 第一个参数指定用于显示图片的ImageView控件
    // 第二个参数指定加载图片的过程中显示的图片
    // 第三个参数指定加载图片失败的情况下显示的图片
    ImageLoader.ImageListener listener=ImageLoader.getImageListener(iv,R.mipmap.ic_launcher,R.mipmap.ic_launcher);
    // 调用ImageLoader的get()方法来加载图片
    // 第一个参数就是图片的URL地址
    // 第二个参数则是刚刚获取到的ImageListener对象
    // 如果想对图片的大小进行限制，也可以使用get()方法的重载，指定图片允许的最大宽度和高度，即通过第三第四个参数指定
    loader.get(url,listener);
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>最后，Volley提供了一种<strong>自定义ImageView</strong>来加载图片，其使用方法可概括为 :</p>
</blockquote>
<ul>
<li>创建一个RequestQueue对象</li>
<li>创建一个ImageLoader对象</li>
<li>在布局文件中添加一个NetworkImageView控件</li>
<li>在代码中获取该控件的实例 </li>
<li>设置要加载的图片地址</li>
</ul>
<blockquote>
<p>我们在布局中申明该控件</p>
</blockquote>
<pre><code>&lt;com.android.volley.toolbox.NetworkImageView
        android:id=&quot;@+id/network_image_view&quot;
        android:layout_width=&quot;wrap_content&quot;
        android:layout_height=&quot;wrap_content&quot;
        android:layout_centerInParent=&quot;true&quot;/&gt;
</code></pre><blockquote>
<p>在程序中实现加载</p>
</blockquote>
<pre><code>public void networkImageView(){
        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());
        ImageLoader loader=new ImageLoader(queue,new BitmapCache() );
        NetworkImageView niv = (NetworkImageView) findViewById(R.id.network_image_view);
        niv.setDefaultImageResId(R.mipmap.ic_launcher);//设置加载中显示的图片
        niv.setErrorImageResId(R.mipmap.ic_launcher);//设置加载失败时显示的图片
        niv.setImageUrl(&quot;https://www.baidu.com/img/bdlogo.png&quot;,  loader);//设置目标图片的URL地址
}
</code></pre><blockquote>
<p><strong>自定义Request</strong></p>
<p>在实际应用中，往往需要将<strong>http请求与json</strong>进行集成，而Volley正恰恰支持这样的方式，不过需要我们自己<strong>自定义Request</strong>，这里我们使用google的Gson库进行集成。</p>
</blockquote>
<ul>
<li>继承Request类 </li>
<li><strong>重写parseNetworkResponse</strong>，实现json与实体类转换，由于实体类未定，所以<strong>采用泛型</strong></li>
</ul>
<blockquote>
<p>下文用到的json字符串如下:</p>
</blockquote>
<pre><code>{&quot;name&quot;:&quot;lizhangqu&quot;,&quot;age&quot;:16}

public class GsonRequest&lt;T&gt; extends Request&lt;T&gt; {
    private final Response.Listener&lt;T&gt; mListener;
    private Gson mGson;
    private Class&lt;T&gt; mClass;

    public GsonRequest(int method, String url, Class&lt;T&gt; clazz, Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener) {
        super(method, url, errorListener);
        mGson = new Gson();
        mClass = clazz;
        mListener = listener;
    }
    public GsonRequest(String url, Class&lt;T&gt; clazz, Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener) {
        this(Method.GET, url, clazz, listener, errorListener);
    }

    @Override
    protected Response&lt;T&gt; parseNetworkResponse(NetworkResponse response) {
        try {
            String jsonString = new String(response.data,
                    HttpHeaderParser.parseCharset(response.headers));
            return Response.success(mGson.fromJson(jsonString, mClass),
                    HttpHeaderParser.parseCacheHeaders(response));
        } catch (UnsupportedEncodingException e) {
            return Response.error(new ParseError(e));
        }
    }
    @Override
    protected void deliverResponse(T response) {
        mListener.onResponse(response);
    }
}
</code></pre><blockquote>
<p>编写测试实体类，两个字段一个name一个age</p>
</blockquote>
<pre><code>public class Person {
    private String name;
    private int age;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    @Override
    public String toString() {
        return &quot;Person{&quot; +
                &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +
                &quot;, age=&quot; + age +
                &apos;}&apos;;
    }
}
</code></pre><blockquote>
<p>调用方法和StringRequest是一样的。如下所示:</p>
</blockquote>
<pre><code>private void json(){
        RequestQueue queue = Volley.newRequestQueue(getApplicationContext());
        String url = &quot;http://121.41.119.107/test/index.php&quot;;
        GsonRequest&lt;Person&gt; request=new GsonRequest&lt;Person&gt;(url, Person.class, new Response.Listener&lt;Person&gt;() {
            @Override
            public void onResponse(Person response) {
                Log.d(&quot;TAG&quot;,response.toString());
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
            }
        });
        queue.add(request);
}
</code></pre><p><a href="http://www.kwstu.com/ArticleView/kwstu_20144118313429" target="_blank" rel="external">基本的使用方法</a><br><a href="http://www.cnblogs.com/freexiaoyu/p/3955137.html" target="_blank" rel="external">直接返回Object的话，用Gson/FastJson与Volley的结合</a></p>
<h3 id="OkHttp"><a href="#OkHttp" class="headerlink" title="OkHttp"></a>OkHttp</h3><p><strong> <a href="https://github.com/square/okhttp" target="_blank" rel="external">Github</a></strong> &amp; <strong> <a href="http://square.github.io/okhttp/" target="_blank" rel="external">官网</a></strong> &amp; <strong><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0326/2643.html" target="_blank" rel="external">源码解析</a></strong></p>
<blockquote>
<p>OkHttp 是一个 Java 的 HTTP+SPDY 客户端开发包，同时也支持 Android。需要Android 2.3以上</p>
<p>OkHttp 是 Square 公司开源的针对<strong> Java 和 Android </strong>程序，封装的一个高性能<strong> http 请求库</strong>，所以它的职责<strong>跟 HttpUrlConnection 是一样的</strong>，支持 spdy、http 2.0、websocket ，支持同步、异步，而且 OkHttp 又封装了线程池，封装了数据转换，封装了参数使用、错误处理等，api 使用起来更加方便。可以把它理解成是一个<strong>封装之后的类似 HttpUrlConnection 的一个东西</strong>，但是你在使用的时候仍然需要自己再做一层封装，这样才能像使用一个框架一样更加顺手。</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>OKHttp是<strong>Android版Http客户端</strong>。非常高效，支持SPDY、连接池、GZIP和 HTTP 缓存。</li>
<li>默认情况下，OKHttp会自动处理常见的网络问题，像二次连接、SSL的握手问题。</li>
<li>如果你的应用程序中集成了OKHttp，Retrofit默认会使用OKHttp处理其他网络层请求。</li>
<li>从Android4.4开始HttpURLConnection的底层实现采用的是OkHttp</li>
<li>这个onResponse执行的线程并不是UI线程</li>
<li>Interceptor 云端响应拦截器，设置缓存策略<ul>
<li>应用拦截器（ApplicationInterceptors）<blockquote>
<p>主要用于查看请求信息及返回信息，如链接地址、头信息、参数信息等</p>
</blockquote>
</li>
<li>网络拦截器（Network Interceptors）<blockquote>
<p>可以添加、删除或替换请求头信息，还可以改变的请求携带的实体。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p><strong><a href="http://blog.csdn.net/copy_yuan/article/details/51524907" target="_blank" rel="external">缓存的使用方式</a></strong></p>
<pre><code>noCache ：不使用缓存，全部走网络
noStore ： 不使用缓存，也不存储缓存
onlyIfCached ： 只使用缓存
maxAge ：设置最大失效时间，失效则不使用
maxStale ：设置最大失效时间，失效则不使用
minFresh ：设置最小有效时间，失效则不使用
FORCE_NETWORK ： 强制走网络
FORCE_CACHE ：强制走缓存
</code></pre><blockquote>
<p>一般的get、post、基于http文件上传、文件下载、加载图片、支持请求回调、直接返回对象、对象集合、支持session的保持。<br>会从很多常用的连接问题中自动恢复。如果您的服务器配置了多个IP地址，当第一个IP连接失败的时候，OkHttp会自动尝试下一个IP。OkHttp还处理了代理服务器问题和SSL握手失败问题。</p>
</blockquote>
<p><strong>用法</strong></p>
<ul>
<li>新建一个<strong>OkHttpClient</strong>对象</li>
<li>通过Request.Builder对象新建一个<strong>Request</strong>对象</li>
<li>返回执行结果</li>
</ul>
<blockquote>
<p><strong>GET</strong></p>
</blockquote>
<pre><code>private String get(String url) {
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
                .url(url)
                .build();
        Response response = null;
        try {
            response = client.newCall(request).execute();
            return response.body().string();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
}
</code></pre><blockquote>
<p><strong>POST</strong></p>
<p>POST需要使用<strong>RequestBody</strong>对象，之后再构建Request对象时调用<strong>post</strong>函数将其传入即可</p>
</blockquote>
<pre><code>private String post(String url) {
        OkHttpClient client = new OkHttpClient();
        RequestBody formBody = new FormEncodingBuilder()
                .add(&quot;user&quot;, &quot;Jurassic Park&quot;)
                .add(&quot;pass&quot;, &quot;asasa&quot;)
                .add(&quot;time&quot;, &quot;12132&quot;)
                .build();
        Request request = new Request.Builder()
                .url(url)
                .post(formBody)
                .build();
        Response response = null;
        try {
            response = client.newCall(request).execute();
            return response.body().string();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
}
</code></pre><blockquote>
<p>此外，post的使用方法还<strong>支持文件等操作</strong>等</p>
<p><strong>对Gson的支持</strong></p>
<p>OkHttp还自带了对Gson的支持</p>
</blockquote>
<pre><code>private Person gson(String url){
        OkHttpClient client = new OkHttpClient();
        Gson gson = new Gson();
        Request request = new Request.Builder()
                .url(url)
                .build();
        Response response = null;
        try {
            response = client.newCall(request).execute();
            Person person = gson.fromJson(response.body().charStream(), Person.class);
            return person;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return null;
}
</code></pre><blockquote>
<p><strong>异步操作</strong></p>
<p>以上的两个例子<strong>必须在子线程中完成</strong>，同时okHttp还提供了<strong>异步的方法</strong>调用，通过使用<strong>回调来进行异步调用</strong>，然后OkHttp的回调依然<strong>不在主线程</strong>中，因此该回调中不能操作UI</p>
</blockquote>
<pre><code>private void getAsync(String url) {
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder()
                .url(url)
                .build();
        Response response = null;
        client.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(Request request, IOException e) {
            }
            @Override
            public void onResponse(Response response) throws IOException {
                String result = response.body().string();
                Toast.makeText(getApplicationContext(),result,
Toast.LENGTH_SHORT).show();
                //不能操作ui，回调依然在子线程
                Log.d(&quot;TAG&quot;, result);
            }
        });
}
</code></pre><blockquote>
<p>okHttp的使用还有很多内容，这里也不过多介绍，更多内容，参考<a href="http://square.github.io/okhttp/" target="_blank" rel="external">官方网址</a></p>
</blockquote>
<p><strong>大牛张鸿洋版(有实现整合Gson)</strong></p>
<p><a href="https://github.com/hongyangAndroid/okhttp-utils" target="_blank" rel="external">完整的封装地址</a> &amp; <a href="http://blog.csdn.net/lmj623565791/article/details/47911083" target="_blank" rel="external">使用手册</a></p>
<h3 id="Retrofit"><a href="#Retrofit" class="headerlink" title="Retrofit"></a>Retrofit</h3><p><strong> <a href="https://github.com/square/retrofit" target="_blank" rel="external">Github</a></strong> &amp; <strong> <a href="http://square.github.io/retrofit/" target="_blank" rel="external">官网</a></strong> &amp; <strong><a href="http://link.zhihu.com/?target=http://www.jianshu.com/p/45cb536be2f4" target="_blank" rel="external">源码解析</a></strong></p>
<blockquote>
<p> Retrofit 是 Square 公司出品的默认<strong>基于 OkHttp 封装</strong>的一套 RESTful 网络请求框架，RESTful 是目前流行的一套 api 设计的风格，并不是标准。Retrofit 的<strong>封装</strong>可以说是很强大，里面涉及到<strong>一堆的设计模式</strong>，你可以通过<strong>注解</strong>直接配置请求，你可以<strong>使用不同的 http 客户端</strong>，虽然默认是用 http ，可以使用不同 Json Converter 来序列化数据，同时提供对 RxJava 的支持，使用 Retrofit + OkHttp + RxJava + Dagger2 可以说是目前比较潮的一套框架，但是需要有<strong>比较高的门槛</strong>。</p>
<p>Retrofit 基于注解，提供JSON to POJO(Plain Ordinary Java Object简单Java对象)，POJO to JSON，网络请求(POST，GET,PUT，DELETE等)封装</p>
</blockquote>
<p><strong>特点</strong></p>
<ul>
<li>性能最好，处理最快</li>
<li>使用REST API时非常方便</li>
<li>传输层默认就使用OkHttp</li>
<li>支持NIO</li>
<li>拥有出色的API文档和社区支持</li>
<li>速度上比volley更快</li>
<li>如果你的应用程序中集成了OKHttp，Retrofit默认会使用OKHttp处理其他网络层请求</li>
<li>默认使用Gson</li>
</ul>
<p><strong>使用</strong></p>
<blockquote>
<p>Retrofit支持<strong>同步和异步</strong>两种方式，在使用时，需要将请求地址转换为接口，通过注解来指定请求方法，请求参数，请求头，返回值等信息。还是使用之前的person的那段json值，get请求到服务器后从数据库查询数据，返回值为查询到的数据，post请求向服务器提交一条数据，返回值为提交的数据。</p>
</blockquote>
<ul>
<li><p>首先完成请求所用的service，是一个interface，完全通过注解完成配置</p>
<p>  public interface PersonService {</p>
<pre><code>@Headers({
        &quot;Cache-Control: max-age=640000&quot;,
        &quot;User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko&quot;
})
//通过注解设置请求头
@GET(&quot;/{test}/rest.php&quot;)
//设置请求方法为get，相对路径为注解内内容，其中{test}会被@Path注解指定内容替换
Person getPerson(@Path(&quot;test&quot;) String dir,@Query(&quot;name&quot;) String name);
//@Query用于指定参数
@FormUrlEncoded
//urlencode
@POST(&quot;/test/rest1.php&quot;)
//post提交
Person updatePerson(@Field(&quot;name&quot;) String name,@Field(&quot;age&quot;) int age);
//@Field提交的域
@POST(&quot;/test/rest1.php&quot;)
void updatePerson(@Field(&quot;name&quot;) String name,@Field(&quot;age&quot;) int age, Callback&lt;Person&gt; callback);
//异步回调，不能指定返回值
</code></pre><p>  }</p>
</li>
<li><p>GET </p>
<blockquote>
<p>使用时，通过RestAdapter的实例获得一个接口的实例，其本质是动态代理，注意含有返回值的方法是同步的，不能UI线程中调用，应该在子线程中完成</p>
</blockquote>
<p>  RestAdapter restAdapter = new RestAdapter.Builder()</p>
<pre><code>.setEndpoint(&quot;http://121.41.119.107&quot;)
.build();
</code></pre><p>  PersonService personService=restAdapter.create(PersonService.class);<br>  Person person=personService.getPerson(“test”,”zhangsan”);<br>  Log.d(“TAG”,person.toString());</p>
</li>
<li><p>POST</p>
<blockquote>
<p>POST的调用同Get，获得adapter后获得一个代理对象，然后通过这个代理对象进行网络请求</p>
</blockquote>
<p>  Person person1=personService.updatePerson(“lizhangqu”, 12);<br>  Log.d(“TAG”,person1.toString());</p>
</li>
<li><p>异步请求</p>
<blockquote>
<p>如果要使用异步请求，需要将接口中的方法返回值修改会void，再加入回调参数Callback，就如PersonService中第三个方法一样，请求完成后会回调该callback对象的success或者fail方法。</p>
</blockquote>
<p>  RestAdapter restAdapter = new RestAdapter.Builder()</p>
<pre><code>.setEndpoint(&quot;http://121.41.119.107&quot;)
.build();
</code></pre><p>  PersonService personService=restAdapter.create(PersonService.class);<br>  personService.updatePerson(“lizhangqu”,23, new Callback<person>() {</person></p>
<pre><code>@Override
public void success(Person person, Response response) {
    Log.d(&quot;TAG&quot;, person.toString());
}
@Override
public void failure(RetrofitError error) {
}
</code></pre><p>  });</p>
</li>
</ul>
<blockquote>
<p>Retrofit的使用还有很多内容，下面提供<a href="http://square.github.io/retrofit/" target="_blank" rel="external">官方网址</a>(Retrofit已经更新到2.X版本，本文的使用方法为Retrofit1.x版本)</p>
</blockquote>
<h3 id="RoboSpice"><a href="#RoboSpice" class="headerlink" title="RoboSpice"></a>RoboSpice</h3><p><a href="http://blog.csdn.net/sbsujjbcy/article/details/45070711" target="_blank" rel="external">RoboSpice：android异步网络库简单用法</a></p>
<h3 id="NoHttp"><a href="#NoHttp" class="headerlink" title="NoHttp"></a>NoHttp</h3><p><a href="">参考</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>网络请求库多种多样，最终其本质思想是一致的，要学会融汇贯通，还是要<strong>fucking the source code</strong>。</p>
<p>Square开源组合，用Retrofit(目前已经是2.0+) + OkHttp基本上已经可以处理任何业务场景了，Square开源库质量还是值得信赖。Retrofit的特点是简化了<strong>网络请求流程</strong>，同时自己内部<strong>对OkHtttp客户端做了封装</strong>，同时2.x把之前1.x版本的部分<strong>不恰当职责都转移给OkHttp</strong>了(例如Log，目前用OkHttp的Interceptor来实现)，这样的好处是职责清晰，Retrofit做自己该做的事。而且Retrofit提供<strong>不同的Json Converter</strong>实现（也可以自定义），同时<strong>提供RxJava支持</strong>(返回Observable对象)，配合Jackson(或者<strong>Gson</strong>)和<strong>RxJava</strong>，再加上<strong>Dagger2</strong>，效率大大提高。 <a href="https://www.zhihu.com/question/36989864/answer/70000167?group_id=671569090913013760" target="_blank" rel="external">参见</a></p>
<p>Volley和android-async-http要用的话，也还是要做一下二次封装的。</p>
<p>推荐用最新的<strong>Android Flux</strong>来架构你的Android程序，Facebook提出的架构，文档比较全，数据流总是单向的飞。用过<strong>MVC，MVP</strong>，我还是是比较认同Flux的，而且之前公司用的架构模式跟Flux也比较像。<a href="http://link.zhihu.com/?target=http://www.jianshu.com/p/5aa9cbde299f" target="_blank" rel="external">AndroidFlux入门</a></p>
<p>volley, retrofit, android-async-http 帮你<strong>封装</strong>了具体的<strong>请求</strong>，<strong>线程切换</strong>以及<strong>数据转换</strong>。而OkHttp 是<strong>基于http协议封装的一套请求客户端</strong>，虽然它也<strong>可以开线程</strong>，但根本上它<strong>更偏向真正的请求</strong>，跟<strong>HttpClient, HttpUrlConnection的职责是一样的</strong>。所以不要混淆。</p>
<p>即使单纯使用OkHttp，还是会再包一层的，这样就<strong>等价于Volley</strong>之流的框架，只是封装的好与坏而已.</p>
<p>android-async-http已经比较老了，内部实现是<strong>基于HttpClient</strong>，想必你肯定知道6.0之后HttpClient是不是系统自带的了，不过它在最近的更新中将HttpClient的所有代码copy了一份进来，所以还能使用。</p>
<p>Volley是Google官方出的，Volley在设计的时候是将具体的<strong>请求客户端</strong>做了下<strong>封装</strong>：HurlStack，也就是说可以<strong>支持HttpUrlConnection, HttpClient, OkHttp</strong>，相当于模版模式吧，这样<strong>解耦</strong>还是非常方便的，可以<strong>随意切换</strong>，如果你之前使用过Volley，并习惯使用，那直接写个<strong>OkHttp扩展</strong>就行了。</p>
<p>Volley自己的定位是轻量级网络交互，适合大量的，小数据传输，如果你的项目比较大，那么目测还得把volley再次封装才会好用一些</p>
<p>Retrofit因为是Square出的，所以大家可能对它更崇拜些。<strong>Retrofit的跟Volley是一个套路</strong>，但<strong>解耦的更彻底</strong>: 比方说<strong>通过注解来配置请求参数</strong>，<strong>通过工厂来生成CallAdapter，Converter</strong>，你可以使用不同的<strong>请求适配器</strong>(CallAdapter), 比方说<strong>RxJava</strong>，Java8，Guava。你可以使用不同的<strong>反序列化工具</strong>(Converter)，比方说<strong> json</strong>, protobuff, xml, moshi等等。<br>超级解耦，里面涉及到超多<strong>设计模式</strong>，个人觉得是很<strong>经典的学习案例</strong>。虽然支持<strong>Java8， Guava</strong>你可能也不需要用到。xml，protobuff等数据格式你也可能不需要解析。但是，万一遇到鬼了呢？</p>
<p>至于性能上，完全取决于<strong>请求客户端</strong>，也就是<strong>OkHttp</strong>的性能，跟这些<strong>封装工具</strong>没太大关系。</p>
<p>至于RxJava，最好充分理解其原理之后再使用，别人云亦云，特别team人数多的情况下，总得有个完全精通的吧，万一掉坑里了呢!</p>
<p>OkHttp是android平台最好的网络库，其是高性能的http库，支持同步、异步，而且实现了spdy、http2、websocket协议，api很简洁易用，和Volley一样实现了http协议的缓存。Picasso就是利用OkHttp的<strong>缓存机制</strong>实现其文件缓存，实现的很优雅，很正确，反例就是UIL（universal image loader），自己做的文件缓存，而且不遵守http缓存机制。Retrofit与Picasso一样都是在OkHttp基础之上做的封装，项目中可以直接用了</p>
<p>Volley是一个简单的异步http库，仅此而已。缺点是<strong>不支持同步</strong>，这点会限制开发模式；<strong>不能post大数据</strong>，所以不适合用来上传文件</p>
<p>android-async-http与volley一样是异步网络库，但Volley是封装的HttpUrlConnection，它是封装的HttpClient，而android平台不推荐用HttpClient了，所以这个库已经不适合android平台了</p>
<p>android-async-http使用了nio的方式实现的。OkHttp没有提供nio selector的方式，不过<strong>nio更适合大量连接</strong>的情况，对于移动平台有点杀鸡用牛刀的味道</p>
<p>Picasso、UIL都不支持inbitmap，项目中有用到Picasso的富图片应用需要注意这点</p>
<p>如果是标准的RESTful API,那么用Retrofit会非常爽！网络交互部分代码量可以减少90%。同时支持Gson,契合度很高。另外，Retrofit和OkHttp是亲兄弟，建议一起用，OkHttp是底层库，能够支持一些非标准的HTTP方法，比如PATCH方法。</p>
<p>选<strong>最适合项目的</strong>，选<strong>大多数人选择的</strong>，<strong>选简单易用的</strong>。关于如何选择开源library，可以<a href="https://link.zhihu.com/?target=http://www.jianshu.com/p/f3227c7008d4" target="_blank" rel="external">参考</a>。</p>
</blockquote>
<p><strong>参考资料</strong><br><a href="http://www.jianshu.com/p/df988b5a97b7" target="_blank" rel="external">http://www.jianshu.com/p/df988b5a97b7</a><br><a href="http://www.cnblogs.com/hzhtracy/p/5652548.html" target="_blank" rel="external">http://www.cnblogs.com/hzhtracy/p/5652548.html</a><br><a href="http://blog.csdn.net/sbsujjbcy/article/details/45568053" target="_blank" rel="external">http://blog.csdn.net/sbsujjbcy/article/details/45568053</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/17482095" target="_blank" rel="external">Android Volley完全解析(一)，初识Volley的基本用法 </a><br><a href="http://blog.csdn.net/guolin_blog/article/details/17482165" target="_blank" rel="external">Android Volley完全解析(二)，使用Volley加载网络图片</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/17612763" target="_blank" rel="external">Android Volley完全解析(三)，定制自己的Request</a><br><a href="http://www.jianshu.com/p/8417c2695866" target="_blank" rel="external">http://www.jianshu.com/p/8417c2695866</a><br><a href="http://yeungeek.com/awesome-android-libraries/" target="_blank" rel="external">http://yeungeek.com/awesome-android-libraries/</a><br><a href="https://www.zhihu.com/question/35189851" target="_blank" rel="external">https://www.zhihu.com/question/35189851</a><br><a href="https://www.zhihu.com/question/33008511" target="_blank" rel="external">https://www.zhihu.com/question/33008511</a><br><a href="http://www.itdadao.com/articles/c15a580823p0.html" target="_blank" rel="external">http://www.itdadao.com/articles/c15a580823p0.html</a><br><a href="http://www.jianshu.com/p/050c6db5af5a" target="_blank" rel="external">http://www.jianshu.com/p/050c6db5af5a</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在实际开发中，频繁的接触&lt;strong&gt;网络请求&lt;/strong&gt;，而网络请求的方式很多，最常见的也就那么几个。本
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="网络请求" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/"/>
    
      <category term="开源库" scheme="http://yoursite.com/tags/%E5%BC%80%E6%BA%90%E5%BA%93/"/>
    
      <category term="OkHttp" scheme="http://yoursite.com/tags/OkHttp/"/>
    
      <category term="Retrofit" scheme="http://yoursite.com/tags/Retrofit/"/>
    
      <category term="Volley" scheme="http://yoursite.com/tags/Volley/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
