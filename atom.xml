<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sh2zqp</title>
  <subtitle>Keep Learning</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-18T07:36:29.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>QinPeng Zhu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android中的ANR &amp;OOM&amp;FC</title>
    <link href="http://yoursite.com/2016/10/18/Android%E4%B8%AD%E7%9A%84ANR&amp;OOM&amp;FC/"/>
    <id>http://yoursite.com/2016/10/18/Android中的ANR&amp;OOM&amp;FC/</id>
    <published>2016-10-18T07:35:49.000Z</published>
    <updated>2016-10-18T07:36:29.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="ANR-Application-Not-Responding-程序无响应"><a href="#ANR-Application-Not-Responding-程序无响应" class="headerlink" title="ANR(Application Not Responding)程序无响应"></a>ANR(Application Not Responding)程序无响应</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>主线程(UI线程、Main线程)及Android的<strong><em>单线程模型原则</em></strong></li>
</ul>
<blockquote>
<p>当应用启动，系统会创建一个主线程，在这个主线程主要负责创建UI控件，更新UI控件，向UI组件分发事件，也是在这个主线程里，你的应用和Android的UI组件(android.widget and android.view)发生交互。</p>
<p>系统不会为每个组件单独创建线程，在同一个进程里的UI组件都会在UI线程里实例化，系统对每一个组件的调用都从UI线程分发出去。结果就是，响应系统回调的方法(比如响应用户动作的onKeyDown()和各种生命周期回调)永远都是在UI线程里运行。<br>　　<br>另外，Andoid UI组件并不是线程安全的，所以你不能从非UI线程来操纵UI组件。你必须把所有的UI操作放在UI线程里，所以Android的单线程模型有两条原则：</p>
</blockquote>
<ol>
<li>不要阻塞UI线程</li>
<li>不要在UI线程之外访问Android UI组件(主要是这两个包中的组件：android.widget和android.view)。</li>
</ol>
<blockquote>
<p>当App做一些比较耗时的工作的时候，除非你合理地实现，否则单线程模型的性能会很差。特别的是，如果所有的工作都在UI线程，做一些比较耗时的工作比如访问网络或者数据库查询，都会阻塞UI线程，违反单线程模型第一条原则，导致事件停止分发(包括绘制事件)。对于用户来说，应用看起来像是卡住了，更坏的情况是，如果UI线程blocked的时间太长（大约超过5秒），用户就会看到ANR（Application Not Responding）的对话框，如下图：</p>
</blockquote>
<p><img src="http://7jpolu.com1.z0.glb.clouddn.com/android_anr.png" alt=""></p>
<ul>
<li>子线程(Worker线程)</li>
</ul>
<blockquote>
<p>根据单线程模型的两条原则，首先，要保证应用的响应性，不能阻塞UI线程，所以当你的操作不是即时的那种，你应该把他们放进子线程中（也叫做background或者叫worker线程）。<br>　　<br>比如点击按钮后，下载一个图片然后在ImageView中展示：</p>
</blockquote>
<pre><code>public void onClick(View v) {
    new Thread(new Runnable() {
        public void run() {
            Bitmap b = loadImageFromNetwork(&quot;http://example.com/image.png&quot;);
            mImageView.setImageBitmap(b);
        }
    }).start();
}
</code></pre><blockquote>
<p>这段代码用新的线程来处理网络操作，但是它违反了第二条原则：从非UI线程访问UI组件会导致未定义和不能预料的行为。</p>
<p>为了解决这个问题，Android提供了一些方法，从其他线程访问UI线程：</p>
</blockquote>
<ul>
<li>Activity.runOnUiThread(Runnable)</li>
<li>View.post(Runnable)</li>
<li>View.postDelayed(Runnable, long)</li>
<li>Handler+Message机制</li>
<li>AsyncTask机制</li>
</ul>
<blockquote>
<p>比如，上面这段代码可以这么改：</p>
</blockquote>
<pre><code>public void onClick(View v) {
    new Thread(new Runnable() {
        public void run() {
            final Bitmap bitmap = loadImageFromNetwork(&quot;http://example.com/image.png&quot;);
            mImageView.post(new Runnable() {
                public void run() {
                    mImageView.setImageBitmap(bitmap);
                }
            });
        }
    }).start();
}
</code></pre><blockquote>
<p>这么改之后就是线程安全的了。但是，当操作变得复杂的时候，这种代码会变得非常复杂，为了<strong><em>处理非UI线程和UI线程之间更加复杂的交互</em></strong>，可以考虑在worker线程中使用一个Handler，来处理UI线程中传来的消息。也可以继承这个类AsyncTask 。</p>
</blockquote>
<ul>
<li>与UI线程通讯</li>
</ul>
<blockquote>
<p>只有在UI线程中的对象才能操作UI线程中的对象，为了将非UI线程中的数据传送到UI线程，可以使用一个 Handler运行在UI线程中。Handler是Android framework中管理线程的部分，一个Handler对象负责接收发送消息然后处理消息。<br>　　<br>你可以为一个新的线程创建一个Handler，也可以创建一个Handler然后将它和已有线程连接。如果你将一个Handler和你的UI线程连接，处理消息的代码就将会在UI线程中执行。可以在你创建线程池的类的构造方法中实例化Handler的对象，然后用全局变量存储这个对象。<br>　　<br>要和UI线程连接，实例化Handler的时候应该使用Handler(Looper) 这个构造方法。这个构造方法使用了一个 Looper 对象，这是Android系统中线程管理的framework的另一个部分。当你用一个特定的 Looper实例来创建一个 Handler时，这个 Handler就运行在这个 Looper的线程中。</p>
<p>在Handler中，要覆写handleMessage() 方法。Android系统会在Handler管理的相应线程收到新消息时调用这个方法。</p>
<p>一个特定线程的所有Handler对象都会收到同样的方法。（这是一个“一对多”的关系）。</p>
</blockquote>
<h3 id="ANR定义"><a href="#ANR定义" class="headerlink" title="ANR定义"></a>ANR定义</h3><blockquote>
<p>在Android上，如果你的应用程序有一段时间响应不够灵敏，系统会向用户显示一个对话框，这个对话框称作应用程序无响应（ANR：Application Not Responding）对话框。用户可以选择“等待”而让程序继续运行，也可以选择“强制关闭”。所以一个流畅的合理的应用程序中不能出现anr，而让用户每次都要处理这个对话框。因此，在程序里对响应性能的设计很重要，这样系统不会显示ANR给用户。默认情况下，在android中Activity的最长执行时间是5秒，BroadcastReceiver的最长执行时间则是10秒。</p>
</blockquote>
<h3 id="什么会引发ANR"><a href="#什么会引发ANR" class="headerlink" title="什么会引发ANR"></a>什么会引发ANR</h3><blockquote>
<p>在Android里，应用程序的响应性是由ActivityManager和WindowManager系统服务监视的 。当它监测到以下情况中的一个时，Android就会针对特定的应用程序显示ANR：</p>
</blockquote>
<ul>
<li>在5秒内没有响应输入的事件(例如，按键按下，屏幕触摸)</li>
<li>BroadcastReceiver在10秒内没有执行完毕</li>
<li>Service Timeout:服务在20s内未执行完成（小概率事件）</li>
<li>ContentProvider Timeout：内容提供者执行超时</li>
</ul>
<blockquote>
<p>造成以上两点的原因有很多，比如在主线程中做了非常耗时的操作，常见的耗时操作：</p>
</blockquote>
<ul>
<li>网络访问</li>
<li>数据库操作</li>
<li>I/O操作(从4.0之后网络IO不允许在主线程中)</li>
<li>SD读写操作</li>
<li>耗时的数据运算</li>
<li>多线程死锁</li>
<li>错误的操作，比如Thread.wait或者Thread.sleep等</li>
</ul>
<h3 id="如何避免ANR"><a href="#如何避免ANR" class="headerlink" title="如何避免ANR"></a>如何避免ANR</h3><ul>
<li><p>运行在主线程里的任何方法都尽可能少做事情。特别是，Activity应该在它的关键生命周期方法（如onCreate()和onResume()）里尽可能少的去做创建操作。（可以采用重新开启子线程的方式，然后使用Handler+Message的方式做一些操作，比如更新主线程中的ui等）</p>
</li>
<li><p>应用程序应该避免在BroadcastReceiver里做耗时的操作或计算。但不再是在子线程里做这些任务（因为 BroadcastReceiver的生命周期短），替代的是，如果响应Intent广播需要执行一个耗时的动作的话，应用程序应该启动一个 Service。(此处需要注意的是可以在广播接受者中启动Service，但是却不可以在Service中启动broadcasereciver），建议使用IntentService处理。</p>
</li>
<li><p>避免在Intent Receiver里启动一个Activity，因为它会创建一个新的画面，并从当前用户正在运行的程序上抢夺焦点。如果你的应用程序在响应Intent广 播时需要向用户展示什么，你应该使用Notification Manager来实现。</p>
</li>
<li><p>高耗时的计算如改变位图尺寸, 应该在子线程里（或者以数据库操作为例，通过异步请求的方式）来完成。然而，不是说你的主线程阻塞在那里等待子线程的完成——也不是调用 Thread.wait()或是Thread.sleep()。替代的方法是，主线程应该为子线程提供一个Handler，以便完成时能够提交给主线程。以这种方式设计你的应用程序，将能保证你的主线程保持对输入的响应性并能避免由于5秒输入事件的超时引发的ANR对话框。</p>
</li>
<li><p>使用AsyncTask处理耗时IO操作</p>
</li>
<li><p>Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)设置优先级，否则仍然会降低程序响应，因为默认Thread的优先级和主线程相同。</p>
</li>
<li><p>通常100到200毫秒就会让人察觉程序反应慢，为了更加提升响应，可以使用下面的几种经验解决方法：</p>
<ul>
<li>如果程序正在后台处理用户的输入，建议使用让用户得知进度，比如使用ProgressBar控件。</li>
<li>程序启动时可以选择加上欢迎界面，避免让用户察觉卡顿。</li>
<li>使用Systrace和TraceView找出影响响应的问题。</li>
</ul>
</li>
</ul>
<h3 id="如何分析ANR"><a href="#如何分析ANR" class="headerlink" title="如何分析ANR"></a>如何分析ANR</h3><blockquote>
<p>ANR发生时都会在log中输出错误信息，从log中可以获得ANR的类型，CPU的使用情况，CPU使用率过高有可能是CPU饥饿导致了ANR。CPU使用率过低说明主线程被block了，如果IOwait高是因为主线程进行I/O操作造成的。</p>
<p>如果开发机器上出现问题，我们也可以通过查看/data/anr/traces.txt即可，最新的ANR信息在最开始部分。我们从stacktrace中即可找到出问题的具体行数。本例中问题出现在MainActivity.java 27行，因为这里调用了Thread.sleep方法。</p>
</blockquote>
<pre><code>root@htc_m8tl:/ # cat /data/anr/traces.txt | more


----- pid 30307 at 2015-05-30 14:51:14 -----
Cmd line: com.example.androidyue.bitmapdemo

JNI: CheckJNI is off; workarounds are off; pins=0; globals=272

DALVIK THREADS:
(mutexes: tll=0 tsl=0 tscl=0 ghl=0)

&quot;main&quot; prio=5 tid=1 TIMED_WAIT
  | group=&quot;main&quot; sCount=1 dsCount=0 obj=0x416eaf18 self=0x416d8650
  | sysTid=30307 nice=0 sched=0/0 cgrp=apps handle=1074565528
  | state=S schedstat=( 0 0 0 ) utm=5 stm=4 core=3
  at java.lang.VMThread.sleep(Native Method)
  at java.lang.Thread.sleep(Thread.java:1044)
  at java.lang.Thread.sleep(Thread.java:1026)
  at com.example.androidyue.bitmapdemo.MainActivity$1.run(MainActivity.java:27)
  at android.app.Activity.runOnUiThread(Activity.java:4794)
  at com.example.androidyue.bitmapdemo.MainActivity.onResume(MainActivity.java:33)
  at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1282)
  at android.app.Activity.performResume(Activity.java:5405)
</code></pre><p><strong>一个特例</strong></p>
<blockquote>
<p>BroadcastReceiver过了60秒居然没有ANR？</p>
</blockquote>
<pre><code>public class NetworkReceiver extends BroadcastReceiver{
    private static final String LOGTAG = &quot;NetworkReceiver&quot;;

    @Override
    public void onReceive(Context context, Intent intent) {
        Log.i(LOGTAG, &quot;onReceive intent=&quot; + intent);
        try {
            Thread.sleep(60000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        Log.i(LOGTAG, &quot;onReceive end&quot;);
    }
}
</code></pre><blockquote>
<p>实际上已经发生了ANR，只是没有进行对话框弹出而已。这种ANR就是background ANR，即后台程序的ANR，我们可以通过过滤日志验证</p>
</blockquote>
<pre><code>adb logcat | grep &quot;NetworkReceiver|ActivityManager|WindowManager&quot;
I/NetworkReceiver( 4109): onReceive intent=Intent { act=android.net.conn.CONNECTIVITY_CHANGE flg=0x8000010 cmp=com.example.androidyue.bitmapdemo/.NetworkReceiver (has extras) }
I/ActivityManager(  462): No longer want com.android.exchange (pid 1054): empty #17
I/NetworkReceiver( 4109): onReceive end
W/BroadcastQueue(  462): Receiver during timeout: ResolveInfo{5342dde4 com.example.androidyue.bitmapdemo.NetworkReceiver p=0 o=0 m=0x108000}
E/ActivityManager(  462): ANR in com.example.androidyue.bitmapdemo
E/ActivityManager(  462): Reason: Broadcast of Intent { act=android.net.conn.CONNECTIVITY_CHANGE flg=0x8000010 cmp=com.example.androidyue.bitmapdemo/.NetworkReceiver (has extras) }
E/ActivityManager(  462): Load: 0.37 / 0.2 / 0.14
E/ActivityManager(  462): CPU usage from 26047ms to 0ms ago:
E/ActivityManager(  462):   0.4% 58/adbd: 0% user + 0.4% kernel / faults: 1501 minor
E/ActivityManager(  462):   0.3% 462/system_server: 0.1% user + 0.1% kernel
E/ActivityManager(  462):   0% 4109/com.example.androidyue.bitmapdemo: 0% user + 0% kernel / faults: 6 minor
E/ActivityManager(  462): 1.5% TOTAL: 0.5% user + 0.9% kernel + 0% softirq
E/ActivityManager(  462): CPU usage from 87ms to 589ms later:
E/ActivityManager(  462):   1.8% 58/adbd: 0% user + 1.8% kernel / faults: 30 minor
E/ActivityManager(  462):     1.8% 58/adbd: 0% user + 1.8% kernel
E/ActivityManager(  462): 4% TOTAL: 0% user + 4% kernel
W/ActivityManager(  462): Killing ProcessRecord{5326d418 4109:com.example.androidyue.bitmapdemo/u0a10063}: background ANR
I/ActivityManager(  462): Process com.example.androidyue.bitmapdemo (pid 4109) has died.
</code></pre><blockquote>
<p>除了日志，我们还可以根据前面提到的查看traces.txt文件。</p>
<p>我们可以在Android开发者选项—>高级—>显示所有”应用程序无响应“勾选即可对后台ANR也进行弹窗显示，方便查看了解程序运行情况</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>ANR异常也是在程序中自己经常遇到的问题，主要的解决办法自己最常用的就是不要在主线程中做耗时的操作，而应放在子线程中来实现，比如采用Handler+Message的方式，或者是有时候需要做一些和网络相互交互的耗时操作就采用Asyntask异步任务的方式（它的底层其实Handler+Mesage有所区别的是它是线程池）等，在主线程中更新UI。</p>
</blockquote>
<hr>
<h2 id="OOM-Out-Of-Memory-内存溢出"><a href="#OOM-Out-Of-Memory-内存溢出" class="headerlink" title="OOM(Out Of Memory)内存溢出"></a>OOM(Out Of Memory)内存溢出</h2><p><strong>OOM是Android中比较重要的一个知识点，会单独放到一篇博文<a href="https://sh2zqp.github.io/2016/10/10/Android%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%20%E2%80%94%20%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90(3)/" target="_blank" rel="external">里面</a></strong></p>
<hr>
<h2 id="FC-Force-Close-强制关闭"><a href="#FC-Force-Close-强制关闭" class="headerlink" title="FC(Force Close)强制关闭"></a>FC(Force Close)强制关闭</h2><blockquote>
<p>程序或ROM出现了比较严重的错误，必须退出重启。用户过多原因大概有一下:</p>
</blockquote>
<ul>
<li><p>Error</p>
<ul>
<li>OOM                                          内存耗尽</li>
<li>StackOverFlowError                 堆栈溢出</li>
</ul>
</li>
<li><p>RuntimeException                             运行时错误</p>
</li>
</ul>
<blockquote>
<p>如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/ForceClose.png" alt=""></p>
<blockquote>
<p>常见的有比如空指针啦，类没有找到啦，资源没找到，就连Android API使用的顺序错误也可能导致（比如     setContentView()之前进行了findViewById()操作）</p>
</blockquote>
<p><strong>解决办法：日志</strong></p>
<blockquote>
<p>以上的问题大多是我们写代码时犯下的逻辑错误或者优化做的非常差，这是绝对绝对不允许出现的。至于解决办法就是DEBUG你懂得。常用的方法无非就是Log打印日志或者借助工具，其实能够熟练运用logcat，明白log各段的大致意思、擅于运用Filter就能够解决大多数问题了。</p>
</blockquote>
<p><strong>如何避免弹出ForceClose窗口,并重启App</strong></p>
<blockquote>
<p>可以实现Thread.UncaughtExceptionHandler接口的uncaughtException方法，此处定义一个MyExceptionHandler，代码如下: </p>
</blockquote>
<pre><code>public class MyExceptionHandler implements Thread.UncaughtExceptionHandler {
    private Activity activity;
    public MyExceptionHandler(Activity activity) {
        this.activity = activity;
    }
    @Override
    public void uncaughtException(Thread thread, Throwable ex) {
    Log.i(&quot;tag&quot;,  &quot;截获到forceclose，异常原因为：&quot; + &quot;\n&quot; +
                ex.toString()+&quot;  Thread:&quot; + thread.getId());
        Intent intent = new Intent(activity, MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP
                | Intent.FLAG_ACTIVITY_CLEAR_TASK
                | Intent.FLAG_ACTIVITY_NEW_TASK);
        PendingIntent pendingIntent = PendingIntent.getActivity(
                MyApplication.getInstance().getBaseContext(), 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
        // AlarmManager 是为了设置一个计时器来延迟两秒再执行 pendingIntent 的，也就是重启我们的Activity的任务
        AlarmManager mgr = (AlarmManager) MyApplication.getInstance().getBaseContext()
                .getSystemService(Context.ALARM_SERVICE);
        mgr.set(AlarmManager.RTC, System.currentTimeMillis() + 1000, pendingIntent);

        // This will finish your activity manually
        activity.finish();

        // This will stop your application and take out from it.
        System.exit(2);
    }
}
</code></pre><blockquote>
<p>在uncaughtException方法中，第一个参数thread是线程，指的是发生异常的那个Thread，而不一定是uncaughtException注册的Thread，第二个参数ex是异常，在uncaughtException方法里将进程杀死，想要哪个线程可以处理未捕获异常，thread.setDefaultUncaughtExceptionHandler(this); 这句代码都要在那个线程中执行一次.</p>
<p>在进入RelaunchActivity之后，会产生FC事件，如下：</p>
</blockquote>
<pre><code>public class RelaunchActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_relaunch);
        // 设置处理异常的handler
        Thread.setDefaultUncaughtExceptionHandler(new MyExceptionHandler(this));
        Button forcecloseBtn = (Button) findViewById(R.id.forceclose_btn);
        forcecloseBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // 产生ForceClose的代码
                System.out.println(&quot;&quot; + 1/0);
            }
        }); 
    }
}
</code></pre><blockquote>
<p>如下所示：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/Fc-restart.gif" alt=""></p>
<blockquote>
<p>捕获的日志：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/FC-log.png" alt=""></p>
<p><a href="https://github.com/sh2zqp/ForceCloseSample" target="_blank" rel="external">源码</a></p>
<p><strong>参考资料</strong><br><a href="http://www.cnblogs.com/wonderful0714/p/4588705.html" target="_blank" rel="external">http://www.cnblogs.com/wonderful0714/p/4588705.html</a><br><a href="http://blog.sina.com.cn/s/blog_618199e60101kvbl.html" target="_blank" rel="external">http://blog.sina.com.cn/s/blog_618199e60101kvbl.html</a><br><a href="http://www.cnblogs.com/mengdd/p/3418780.html" target="_blank" rel="external">http://www.cnblogs.com/mengdd/p/3418780.html</a><br><a href="http://droidyue.com/blog/2015/07/18/anr-in-android/index.html" target="_blank" rel="external">http://droidyue.com/blog/2015/07/18/anr-in-android/index.html</a><br><a href="http://www.jianshu.com/p/9db73a26a8bd" target="_blank" rel="external">http://www.jianshu.com/p/9db73a26a8bd</a><br><a href="http://gityuan.com/2016/07/02/android-anr/" target="_blank" rel="external">http://gityuan.com/2016/07/02/android-anr/</a><br><a href="http://blog.csdn.net/u012974916/article/details/24578927" target="_blank" rel="external">http://blog.csdn.net/u012974916/article/details/24578927</a><br><a href="http://blog.csdn.net/u010983881/article/details/51906920" target="_blank" rel="external">http://blog.csdn.net/u010983881/article/details/51906920</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;ANR-Application-Not-Responding-程序无响应&quot;&gt;&lt;a href=&quot;#ANR-Application-Not-Responding-程序无响应&quot; class=&quot;headerlink&quot; title=&quot;ANR(Application
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ANR" scheme="http://yoursite.com/tags/ANR/"/>
    
      <category term="FC" scheme="http://yoursite.com/tags/FC/"/>
    
      <category term="OOM" scheme="http://yoursite.com/tags/OOM/"/>
    
  </entry>
  
  <entry>
    <title>Android — Bitmap详解</title>
    <link href="http://yoursite.com/2016/10/18/Android%20%E2%80%94%20Bitmap%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/10/18/Android — Bitmap详解/</id>
    <published>2016-10-18T01:49:09.000Z</published>
    <updated>2016-10-18T10:41:21.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h3 id="Bitmap概述"><a href="#Bitmap概述" class="headerlink" title="Bitmap概述"></a>Bitmap概述</h3><p><em>Bitmap (android.graphics.Bitmap)</em></p>
<blockquote>
<p>Bitmap是Android系统中的<strong>图像处理</strong>的最重要类之一。用它可以获取图像文件信息，进行图像剪切、旋转、缩放等操作，并可以指定格式保存图像文件。</p>
</blockquote>
<h4 id="Bitmap类"><a href="#Bitmap类" class="headerlink" title="Bitmap类"></a>Bitmap类</h4><pre><code>public boolean compress (Bitmap.CompressFormat format, int quality, OutputStream stream)    
</code></pre><blockquote>
<p>压缩:将位图的压缩到指定的OutputStream。如果返回true，位图可以通过传递一个相应的InputStream BitmapFactory.decodeStream（重建）。<br>format: 压缩图像的格式<br>quality: 0-100。 0含义压缩为小尺寸，100压缩的意思为最大质量。(PNG是无损的，会忽略品质设定 )<br>stream: OutputStream中写入压缩数据。<br>return: 是否成功压缩到指定的流。</p>
</blockquote>
<pre><code>public void recycle() — 回收位图占用的内存空间，把位图标记为Dead 

public final boolean isRecycled() — 判断位图内存是否已释放 

public final int getWidth() — 获取位图的宽度 

public final int getHeight() — 获取位图的高度 

public final boolean isMutable() — 图片是否可修改 

public int getScaledWidth(Canvas canvas) — 获取指定密度转换后的图像的宽度 

public int getScaledHeight(Canvas canvas) — 获取指定密度转换后的图像的高度 

public boolean compress(CompressFormat format, int quality, OutputStream stream) — 按指定的图片格式以及画质，将图片转换为输出流。
</code></pre><blockquote>
<p>format：Bitmap.CompressFormat.PNG或Bitmap.CompressFormat.JPEG<br>quality：画质，0-100.0表示最低画质压缩，100以最高画质压缩。对于PNG等无损格式的图片，会忽略此项设置。</p>
</blockquote>
<p><strong>常用的静态方法</strong></p>
<pre><code>public static Bitmap createBitmap(Bitmap src) — 以src为原图生成不可变得新图像

public static Bitmap createScaledBitmap(Bitmap src, int dstWidth, int dstHeigth, boolean filter) — 以src为原图，创建新的图像，指定新图像的高宽以及是否变。

public static Bitmap createBitmap(int width, int height, Config config) — 创建指定格式、大小的位图

public static Bitmap createBitmap(Bitmap source, int x, int y, int width, int height) — 以source为原图，创建新的图片，指定起始坐标以及新图像的高宽。

public static Bitmap createBitmap(Bitmap source, int x, int y, int width, int height, Matrixm, boolean filter)
</code></pre><h4 id="BitmapFactory工厂类"><a href="#BitmapFactory工厂类" class="headerlink" title="BitmapFactory工厂类"></a>BitmapFactory工厂类</h4><p><strong>Option 参数类</strong></p>
<pre><code>public boolean inJustDecodeBounds — 如果设置为true，不获取图片，不分配内存，但会返回图片的高宽度信息。

public int inSampleSize — 图片缩放的倍数。如果设为4，则宽和高都为原来的1/4，则图是原来的1/16。

public int outWidth — 获取图片的宽度值

public int outHeight — 获取图片的高度值

public int inDensity — 用于位图的像素压缩比

public int inTargetDensity — 用于目标位图的像素压缩比（要生成的位图）

public boolean inScaled — 设置为true时进行图片压缩，从inDensity到inTargetDensity。
</code></pre><blockquote>
<p>读取一个<strong>文件路径</strong>得到一个位图。如果指定文件为空或者不能解码成文件，则返回NULL。</p>
</blockquote>
<pre><code>public static Bitmap decodeFile(String pathName, Options opts)
public staticBitmap decodeFile(String pathName)
</code></pre><blockquote>
<p>读取一个<strong>资源文件</strong>得到一个位图。如果位图数据不能被解码，或者opts参数只请求大小信息时，则返回NuLL。（即当Options.inJustDecodeBounds=true,只请求图片的大小信息。）</p>
</blockquote>
<pre><code>public static Bitmap decodeResource(Resources res, int id)
public static Bitmap decodeResource(Resources res, int id, Options opts)
</code></pre><blockquote>
<p>从<strong>输入流</strong>中解码位图</p>
</blockquote>
<pre><code>public static Bitmap decodeStream(InputStream is)
</code></pre><blockquote>
<p>从字节数组中解码生成不可变的位图</p>
</blockquote>
<pre><code>public static Bitmap decodeByteArray(byte[] data, int offset, int length)
</code></pre><h4 id="BitmapDrawable类"><a href="#BitmapDrawable类" class="headerlink" title="BitmapDrawable类"></a>BitmapDrawable类</h4><blockquote>
<p>继承于Drawable，你可以从文件路径、输入流、XML文件以及Bitmap中创建。</p>
</blockquote>
<p><strong>常用的构造函数</strong></p>
<pre><code>Resources res = getResources(); //获取资源
public BitmapDrawable(Resources res) — 创建一个空的drawable。（Response用来指定初始时所用的像素密度）替代public BitmapDrawable()方法（此方法不处理像素密度）

public BitmapDrawable(Resources res, Bitmap bitmap)——从位图创建绘制

public BitmapDrawable(Resources res, String filePath)——通过打开一个给定的文件路径和位图解码创建绘制

publicBitmapDrawable(Resources res, InputStream is)——创建一个可绘制从给定的输入流by decoding位图。
</code></pre><h3 id="Bitmap的加载和Cache"><a href="#Bitmap的加载和Cache" class="headerlink" title="Bitmap的加载和Cache"></a>Bitmap的加载和Cache</h3><blockquote>
<p>本部分会讲述三个问题，为了更好的讲述这三个问题，本讲会结合一个例子来进行：我们会尝试从网络加载大量图片并在GridView中显示，其中的技术细节涵盖了本讲的三个主题：<strong>图片加载</strong>，<strong>缓存策略</strong>，<strong>列表滑动的流畅性</strong>。</p>
</blockquote>
<h4 id="如何高效地加载一个Bitmap"><a href="#如何高效地加载一个Bitmap" class="headerlink" title="如何高效地加载一个Bitmap"></a>如何高效地加载一个Bitmap</h4><blockquote>
<p>这是一个很有意义的话题，因为Bitmap的特殊性以及Android对单个应用进程的内存限制（如16M），所以这就导致了加载Bitmap的时候很容易会出现内存溢出，如下面这个异常所示：</p>
</blockquote>
<pre><code>java.lang.OutofMemoryError: bitmap size exceeds VM budget
</code></pre><blockquote>
<p>因此，高效的加载Bitmap是一个重要的议题。</p>
<p>在介绍高效加载Bitmap之前，首先看一下如何正常地加载一个Bitmap。</p>
<p>Bitmap在Android中指的是一张图片（可以是.png,.jpg等常见的图片的格式），BitmapFactory提供了4类方法来分别从<strong>文件系统，资源，输入流和字节数组</strong>中加载出一个Bitmap对象：</p>
</blockquote>
<ul>
<li>decodeFile文件系统</li>
<li>decodeResource资源</li>
<li>decodeStream输入流</li>
<li>decodeByteArray字节数组</li>
</ul>
<blockquote>
<p>其中，decodeFile和decodeResource又是间接调用了<strong>decodeStream</strong>方法，这4类方法最终是在Android的底层实现的，对应着BitmapFactory类的几个native方法。</p>
</blockquote>
<p><strong>那如何高效加载Bitmap呢？</strong></p>
<blockquote>
<p>核心思想：采用BitmapFactory.Options来加载所需尺寸的图片。假设这里通过ImageView来显示图片，很多情况下，ImageView并没有图片的原始尺寸那么大，这个时候把整个图片都加载进来后再设给ImageView是完全没有必要的，因为ImageView并没有办法显示原始的图片。</p>
<p>通过BitmapFactory.Options就可以按照一定的采样率来加载缩小后的图片，再将缩小后的图片给ImageView显示，这样就会降低内存占用从而在一定程度上避免OOM，提高了Bitmap加载时的性能。</p>
<p>BitmapFactory提供的加载图片的4类方法都支持BitmapFactory.Options参数，通过它就可以很方便地对一个图片进行采样缩放。</p>
</blockquote>
<p><strong>采样过程详解</strong></p>
<blockquote>
<p>我们主要使用到了BitmapFactory.Options的inSampleSize参数，即采样率。</p>
</blockquote>
<ul>
<li>当inSampleSize等于1时，采样后的图片大小为图片的原始大小</li>
<li>当inSampleSize大于1时，比如2，采样后的图片其宽和高均为原图大小的1/2，像素数为原图的1/4，其占有的内存大小也为原图的1/4</li>
</ul>
<p><strong>例子</strong></p>
<blockquote>
<p>一张1024x1024像素的图片，假定采用ARGB8888格式存储，那么它占有的内存为1024*1024*4(8位一个字节)，即4M，如果inSampleSize为2，那么采样后的图片其内存占用只有512*512*4，即1M。</p>
<p>可以发现采样率inSampleSize必须为大于1的整数，图片才会有缩小的效果，并且采样率同时作用于宽和高，这也就导致缩放后的图片大小以采样率的2次方形式递减，即缩放比例为1/(inSampleSize^2)，如果inSampleSize为4，缩放比例就是1/16。</p>
</blockquote>
<p><strong>特殊情况</strong></p>
<blockquote>
<p>inSampleSize小于1时，其作用相当于1，无缩放效果。</p>
<p>inSampleSize的取值应该总为2的指数，如1，2，4，8等等，如果其值不为2的指数，那么系统会向下取整选择一个最接近的2的指数来代替，比如为3，系统就会选择2来代替，但是经过验证发现，并非所有的Android版本上都如此，因此仅作为一个开发建议。</p>
</blockquote>
<h4 id="Android中常用的缓存策略"><a href="#Android中常用的缓存策略" class="headerlink" title="Android中常用的缓存策略"></a>Android中常用的缓存策略</h4><blockquote>
<p>缓存策略是一个通用的思想，可以用在很多场景中，但是实际开发中经常需要用Bitmap做缓存。通过缓存策略，我们不需要每次都从网络上请求图片或者从存储设备中加载图片，这样就极大地提高了图片的加载效率以及产品的用户体验。</p>
<p>目前比较常用的缓存策略是：LruCache 和 DiskLruCache ，其中LruCache 常被用作内存缓存，而DiskLruCache常被用作存储缓存。</p>
<p>Lru 是 Least Recently Used 的缩写，即最近最少使用算法，算法核心思想是：当缓存快满的时候，会淘汰近期最少使用的缓存目标，显然，这种思想是很容易接受的。</p>
</blockquote>
<h4 id="如何优化列表卡顿现象"><a href="#如何优化列表卡顿现象" class="headerlink" title="如何优化列表卡顿现象"></a>如何优化列表卡顿现象</h4><blockquote>
<p>ListView和GridView由于要加载大量的子视图，当用户快速滑动时就容易出现卡顿的现象，因此有必要对其进行一些优化。</p>
</blockquote>
<p><strong>参考资料</strong><br><a href="https://developer.android.com/reference/android/graphics/Bitmap.html" target="_blank" rel="external">Google官方</a><br><a href="http://blog.csdn.net/zhangtengyuan23/article/details/18818567" target="_blank" rel="external">http://blog.csdn.net/zhangtengyuan23/article/details/18818567</a><br>《Android开发艺术探索》- 任玉刚</p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h3 id=&quot;Bitmap概述&quot;&gt;&lt;a href=&quot;#Bitmap概述&quot; class=&quot;headerlink&quot; title=&quot;Bitmap概述&quot;&gt;&lt;/a&gt;Bitmap概述&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Bitmap (android.graphics.Bitmap)&lt;/em&gt;
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="图片加载" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="Bitmap" scheme="http://yoursite.com/tags/Bitmap/"/>
    
      <category term="Cache" scheme="http://yoursite.com/tags/Cache/"/>
    
      <category term="图片缓存" scheme="http://yoursite.com/tags/%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议详解</title>
    <link href="http://yoursite.com/2016/10/12/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2016/10/12/HTTP协议详解/</id>
    <published>2016-10-12T04:12:30.000Z</published>
    <updated>2016-10-19T04:23:09.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>当今web程序的开发技术百家争鸣，ASP.NET, PHP, JSP，Perl, AJAX等等。 无论Web技术在未来如何发展，理解Web程序之间<strong>通信的基本协议</strong>相当重要， 因为它让我们理解了Web应用程序的内部工作。本文将对HTTP协议进行详细的实例讲解。</p>
</blockquote>
<h3 id="什么是HTTP协议"><a href="#什么是HTTP协议" class="headerlink" title="什么是HTTP协议"></a>什么是HTTP协议</h3><blockquote>
<p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览器。</p>
<p>目前我们使用的是HTTP/1.1 版本。
　　</p>
<h3 id="Web服务器，浏览器，代理服务器"><a href="#Web服务器，浏览器，代理服务器" class="headerlink" title="Web服务器，浏览器，代理服务器"></a>Web服务器，浏览器，代理服务器</h3><p>当我们打开浏览器，在地址栏中输入URL，然后我们就看到了网页。 原理是怎样的呢？</p>
</blockquote>
<ul>
<li>浏览器向DNS服务器请求解析该URL中的域名所对应的IP地址</li>
<li>解析出IP地址后，根据该IP地址和默认端口80与服务器建立TCP连接</li>
<li>浏览器发出HTTP请求，该请求报文作为TCP三次握手的第三个报文的数据发送给服务器</li>
<li>服务器给出回应，把对应的HTML文件发送给浏览器</li>
<li>释放TCP连接</li>
<li>浏览器将该文本显示出来</li>
</ul>
<blockquote>
<p>实际上我们输入URL后，我们的浏览器给Web服务器发送了一个Request, Web服务器接到Request后进行处理，生成相应的Response，然后发送给浏览器， 浏览器解析Response中的HTML,这样我们就看到了网页，过程如下图所示:</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http1.png" alt=""></p>
<blockquote>
<p>我们的Request 有可能是经过了代理服务器，最后才到达Web服务器的。过程如下图所示:</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http2.png" alt=""></p>
<blockquote>
<p>代理服务器就是网络信息的中转站，有什么功能呢？</p>
</blockquote>
<ul>
<li>提高访问速度， 大多数的代理服务器都有缓存功能</li>
<li>突破限制， 也就是翻墙了</li>
<li>隐藏身份</li>
</ul>
<h3 id="URL详解"><a href="#URL详解" class="headerlink" title="URL详解"></a>URL详解</h3><blockquote>
<p>URL(Uniform Resource Locator) 地址用于描述一个网络上的资源，  基本格式如下:</p>
</blockquote>
<pre><code>scheme://host[:port#]/path/.../[;url-params][?query-string][#anchor]
</code></pre><ul>
<li>scheme               指定低层使用的协议(例如：http, https, ftp)</li>
<li>host                     HTTP服务器的IP地址或者域名</li>
<li>port#                   HTTP服务器的默认端口是80，这种情况下端口号可以省略。如果使用了别的端口，必须指明，例如 <a href="http://www.cnblogs.com:8080/" target="_blank" rel="external">http://www.cnblogs.com:8080/</a></li>
<li>path                     访问资源的路径</li>
<li>url-params</li>
<li>query-string        发送给http服务器的数据</li>
<li>anchor                 锚</li>
</ul>
<p><strong>URL 的一个例子</strong></p>
<pre><code>http://www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff
Schema: http
host: www.mywebsite.com
path: /sj/test
URL params: id=8079
Query String: name=sviergn&amp;x=true
Anchor: stuff
</code></pre><h3 id="HTTP协议是无状态的"><a href="#HTTP协议是无状态的" class="headerlink" title="HTTP协议是无状态的"></a>HTTP协议是无状态的</h3><blockquote>
<p>http协议是<strong>无状态的</strong>，同一个客户端的这次请求和上次请求是没有对应关系，对http服务器来说，它并不知道这两个请求来自同一个客户端。 为了解决这个问题， Web程序引入了<strong>Cookie机制来维护状态</strong>.
　　</p>
<h3 id="HTTP消息"><a href="#HTTP消息" class="headerlink" title="HTTP消息"></a>HTTP消息</h3></blockquote>
<h4 id="Request-消息"><a href="#Request-消息" class="headerlink" title="Request 消息"></a>Request 消息</h4><blockquote>
<p>先看<strong>Request 消息</strong>的结构，   Request 消息分为3部分，第一部分叫请求行， 第二部分叫HTTP头, 第三部分是请求实体（内容）. header和body之间有个空行， 结构如下图</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http3.png" alt=""></p>
<blockquote>
<p>第一行中的Method表示请求方法，比如”POST”，”GET”，  Path-to-resource表示请求的资源（请求网址）， Http/version-number 表示HTTP协议的版本号。</p>
<p>HTTP头包括三个部分：请求头（request header），普通头（general header），实体头（body header）</p>
<p>当使用的是”GET” 方法的时候， body是为空的，body只在POST请求方法中。<br>比如我们打开博客园首页的request 如下</p>
</blockquote>
<pre><code>GET http://www.cnblogs.com/ HTTP/1.1
Host: www.cnblogs.com
</code></pre><blockquote>
<p>我们用Fiddler 捕捉一个博客园登录的Request 然后分析下它的结构， 在Inspectors tab下以Raw的方式可以看到完整的Request的消息,如下图:</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http4.png" alt=""></p>
<h4 id="Response消息"><a href="#Response消息" class="headerlink" title="Response消息"></a>Response消息</h4><blockquote>
<p>我们再看<strong>Response消息</strong>的结构， 和Request消息的结构基本一样。 同样也分为三部分，第一部分叫request line（响应行）, 第二部分叫request header（HTTP头），第三部分是body（响应实体，返回内容）. header和body之间也有个空行，  结构如下图:</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http5.png" alt=""></p>
<blockquote>
<p>HTTP/version-number表示HTTP协议的版本号，  status-code（状态响应码） 和message（状态响应码描述） 请看下节<strong>状态代码</strong>的详细解释.</p>
<p>HTTP头也包括三个部分：响应头（response header），普通头（general header），实体头（body header）</p>
<p>响应实体就是HTTP所请求的信息，可以是一个HTML文件或一张图片。</p>
<p>我们用Fiddler 捕捉一个博客园首页的Response然后分析下它的结构， 在Inspectors tab下以Raw的方式可以看到完整的Response的消息,如下图:</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http6.png" alt=""></p>
<h4 id="HTTP头"><a href="#HTTP头" class="headerlink" title="HTTP头"></a>HTTP头</h4><blockquote>
<p>HTTP头并不是严格的要求，仅是一个标签，如果浏览器可以解析就会按照一些标准（如浏览器自身的标准，W3C的标准）去解析这个头，否则不识别的头就会被浏览器忽视，对服务器也同理。</p>
<p>综上，HTTP请求头包含4种，如下：</p>
</blockquote>
<ul>
<li>普通头（General Header）</li>
<li>请求头（Request Header）</li>
<li>响应头（Response Header）</li>
<li>实体头（Entity Header）</li>
</ul>
<h3 id="Get和Post方法的区别"><a href="#Get和Post方法的区别" class="headerlink" title="Get和Post方法的区别"></a>Get和Post方法的区别</h3><blockquote>
<p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是<strong>GET,POST,PUT,DELETE</strong>. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的<strong>查，改，增，删</strong>4个操作。 我们最常见的就是<strong>GET和POST</strong>了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p>
</blockquote>
<p><strong>GET和POST的区别</strong></p>
<ul>
<li>GET主要用于简单的获取页面信息，同时也可以包含一些特殊的请求信息（如提交用户名和密码之类等），提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456.  POST方法是把提交的数据放在HTTP包的Body中.</li>
<li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制，不能超过1024个字节），而POST方法提交的数据没有限制.</li>
<li>GET方式需要使用<strong>Request.QueryString</strong>来取得变量的值，而POST方式通过<strong>Request.Form</strong>来获取变量的值。</li>
<li>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li>
</ul>
<blockquote>
<p>如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http16.png" alt="">
　　</p>
<h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><blockquote>
<p>Response 消息中的第一行叫做状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。<br>　　<br>状态码用来告诉HTTP客户端，HTTP服务器是否产生了预期的Response.<br>　　<br>HTTP/1.1中定义了5类状态码， 状态码由三位数字组成，第一个数字定义了响应的类别:</p>
</blockquote>
<ul>
<li>1XX  信息类：提示信息 - 表示请求已被成功接收，继续处理</li>
<li>2XX  响应成功类：成功 - 表示请求已被成功接收，理解，接受</li>
<li>3XX  重定向类：重定向 - 要完成请求必须进行更进一步的处理</li>
<li>4XX  客户端错误类：客户端错误 -  请求有语法错误或请求无法实现</li>
<li><p>5XX  服务器端错误类：服务器端错误 -   服务器未能实现合法的请求</p>
<pre><code>　　
</code></pre><p><strong>看看一些常见的状态码</strong></p>
</li>
<li><p>200 OK</p>
</li>
</ul>
<blockquote>
<p>最常见的就是成功响应状态码200了， 这表明该请求被成功地完成，所请求的资源发送回客户端,如下图,打开博客园首页:</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http7.png" alt=""></p>
<ul>
<li>302 Found<pre><code>　　
</code></pre><blockquote>
<p>重定向，<strong>新的URL会在response中的Location</strong>中返回，浏览器将会使用新的URL<strong>发出新的Request</strong>。<br>　　<br>例如在IE中输入<a href="http://www.google.com" target="_blank" rel="external">http://www.google.com</a>. HTTP服务器会返回302， IE取到Response中Location header的新URL, 又重新发送了一个Request.</p>
</blockquote>
</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http8.png" alt=""></p>
<ul>
<li>304 Not Modified<pre><code>　　
</code></pre><blockquote>
<p>代表上次的文档已经被缓存了， 还可以继续使用，例如打开博客园首页， 发现很多 Response 的status code 都是304</p>
</blockquote>
</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http9.png" alt=""></p>
<blockquote>
<p>提示：如果你不想使用本地缓存可以强制刷新页面
　　</p>
<ul>
<li>400 Bad Request  客户端请求与语法错误，不能被服务器所理解</li>
<li>403 Forbidden 服务器收到请求，但是拒绝提供服务</li>
<li>404 Not Found 请求资源不存在（输错了URL）, 比如在IE中输入一个错误的URL， <a href="http://www.cnblogs.com/tesdf.aspx" target="_blank" rel="external">http://www.cnblogs.com/tesdf.aspx</a></li>
</ul>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http10.png" alt=""></p>
<ul>
<li>500 Internal Server Error 服务器发生了不可预期的错误</li>
<li>503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</li>
</ul>
<h3 id="HTTP-Request-header-请求头"><a href="#HTTP-Request-header-请求头" class="headerlink" title="HTTP Request header(请求头)"></a>HTTP Request header(请求头)</h3><p>　　</p>
<blockquote>
<p>使用Fiddler 能很方便的查看Request header, 点击Inspectors tab -> Request tab -> headers  如下图所示.</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http11.png" alt=""></p>
<blockquote>
<p>header 有很多，比较难以记忆，我们也按照Fiddler那样把header <strong>进行分类</strong>，这样比较清晰也容易记忆。
　　</p>
<ul>
<li>Cache 头域</li>
</ul>
</blockquote>
<pre><code>- If-Modified-Since
              　
    &gt; 作用： 把浏览器端**缓存页面的最后修改时间**发送到服务器去，服务器会把这个时间与服务器上**实际文件的最后修改时间**进行**对比**。如果时间一致，那么返回**304**，客户端就直接使用本地缓存文件。如果时间不一致，就会返回200和新的文件内容。客户端接到之后，会丢弃旧文件，把新文件缓存起来，并显示在浏览器中。
</code></pre><p>　　<br>    If-Modified-Since: Thu, 09 Feb 2012 09:07:57 GMT,实例如下图:</p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http12.png" alt=""></p>
<ul>
<li><p>If-None-Match</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用: <strong>If-None-Match和ETag</strong>一起工作，工作原理是<strong>在HTTP Response中添加ETag信息</strong>。 当用户再次请求该资源时，将在HTTP Request 中加入If-None-Match信息(<strong>ETag的值</strong>)。如果服务器验证资源的<strong>ETag没有改变</strong>（该资源没有更新），将返回一个<strong>304</strong>状态告诉客户端使用本地缓存文件。否则将返回200状态和<strong>新的资源和Etag</strong>.  使用这样的机制将提高网站的性能.</p>
</blockquote>
<p>  If-None-Match: “03f2b33c0bfcc1:0”,实例如下图:</p>
</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http13.png" alt=""></p>
<ul>
<li><p>Pragma</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用： 防止页面被缓存， 在<strong>HTTP/1.1</strong>版本中，它和Cache-Control: no-cache作用一模一样.<br>　　<br>Pargma只有一个用法，如下：</p>
</blockquote>
<p>  Pragma: no-cache
　　</p>
<blockquote>
<p>注意: 在<strong>HTTP/1.0</strong>版本中，只实现了Pragma: no-cache, 没有实现Cache-Control
　　</p>
</blockquote>
</li>
<li><p>Cache-Control</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用: 这个是非常重要的规则。 这个用来指定Response-Request遵循的<strong>缓存机制</strong>。各个指令含义如下:</p>
</blockquote>
</li>
<li><p>Cache-Control:Public   可以被任何缓存所缓存</p>
<ul>
<li>Cache-Control:Private  内容只缓存到私有缓存中<ul>
<li>Cache-Control:no-cache  所有内容都不会被缓存<pre><code>        　　
</code></pre><blockquote>
<p>还有其他的一些用法,请大家参考其他的资料.</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Client 头域</p>
<ul>
<li><p>Accept</p>
<pre><code>        　　
</code></pre><blockquote>
<p>作用： 浏览器端可以接受的媒体类型</p>
</blockquote>
<p>Accept: text/html  </p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>代表浏览器可以接受服务器回发的类型为 text/html  也就是我们常说的html文档,如果服务器无法返回text/html类型的数据，服务器应该返回一个<strong>406</strong>错误(non acceptable)</p>
<p>通配符 * 代表任意类型</p>
<p>Accept: */*  </p>
<p>代表浏览器可以处理<strong>所有类型</strong>，(一般浏览器发给服务器都是发这个).
　　</p>
<ul>
<li>Accept-Encoding：<pre><code>　　
</code></pre>作用： 浏览器申明自己接收的<strong>编码方法</strong>，通常指定<strong>压缩方法</strong>，是否支持压缩，支持什么压缩方法（gzip，deflate），（注意：这不是只字符编码）;<br>　　<br>  Accept-Encoding: gzip, deflate
　　</li>
<li>Accept-Language<pre><code>　　
</code></pre>作用： 浏览器申明自己接收的语言。<br>语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等；<br>　　<br>  Accept-Language: en-us
　　</li>
<li>User-Agent<pre><code>　　
</code></pre>作用：告诉HTTP服务器， 客户端使用的<strong>操作系统和浏览器的名称和版本</strong>.<br>　　<br>我们上网登陆论坛的时候，往往会看到一些欢迎信息，其中列出了你的操作系统的名称和版本，你所使用的浏览器的名称和版本，这往往让很多人感到很神奇，实际上，服务器应用程序就是从User-Agent这个请求报头域中获取到这些信息User-Agent请求报头域允许客户端将它的操作系统、浏览器和其它属性告诉服务器。<br>　　<br>  User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; CIBA; .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET4.0C; InfoPath.2; .NET4.0E)
　　</li>
<li>Accept-Charset<pre><code>　　
</code></pre>作用：浏览器申明自己接收的字符集，这就是本文前面介绍的各种字符集和字符编码，如gb2312，utf-8（通常我们说Charset包括了相应的字符编码方案）；</li>
</ul>
</blockquote>
<ul>
<li><p>Cookie/Login 头域</p>
<pre><code>　　
</code></pre><ul>
<li><strong>Cookie</strong>:
   　　<blockquote>
<p>作用： <strong>最重要的header</strong>, 将cookie的值发送给HTTP 服务器　　</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Entity头域</p>
<pre><code>　　
</code></pre><ul>
<li><p>Content-Length</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用：发送给HTTP服务器数据的长度。</p>
</blockquote>
<p>Content-Length: 38
　　</p>
</li>
</ul>
</li>
<li><p>Content-Type</p>
<blockquote>
<p>作用：</p>
</blockquote>
<p>  Content-Type: application/x-www-form-urlencoded
  　　</p>
</li>
<li><p>Miscellaneous 头域</p>
<pre><code>　　
</code></pre><ul>
<li><p>Referer:</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用： 提供了Request的<strong>上下文信息的服务器</strong>，告诉服务器我是从哪个链接过来的，比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p>
</blockquote>
<p>Referer:<a href="http://translate.google.cn/?hl=zh-cn&amp;tab=wT" target="_blank" rel="external">http://translate.google.cn/?hl=zh-cn&amp;tab=wT</a></p>
</li>
</ul>
</li>
<li><p>Transport 头域</p>
<pre><code>　　
</code></pre><ul>
<li><p>Connection</p>
<blockquote>
<p>Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接<br>　　<br>例如：  Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。
　　</p>
</blockquote>
</li>
</ul>
</li>
<li><p>Host（发送请求时，该报头域是必需的）</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用: 请求报头域主要用于指定被请求资源的Internet主机和端口号，它通常从HTTP URL中提取出来的<br>　　<br>例如: 我们在浏览器中输入：<a href="http://www.guet.edu.cn/index.html" target="_blank" rel="external">http://www.guet.edu.cn/index.html</a><br>浏览器发送的请求消息中，就会包含Host请求报头域，如下：</p>
</blockquote>
<p>  Host：<a href="http://www.guet.edu.cn" target="_blank" rel="external">http://www.guet.edu.cn</a>
　　</p>
<blockquote>
<p>此处使用缺省端口号80，若指定了端口号，则变成：Host：指定端口号</p>
</blockquote>
</li>
</ul>
<h3 id="HTTP-Response-header-响应头"><a href="#HTTP-Response-header-响应头" class="headerlink" title="HTTP Response header(响应头)"></a>HTTP Response header(响应头)</h3><blockquote>
<p>同样使用Fiddler 查看Response header, 点击Inspectors tab ->Response tab-> headers  如下图所示</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http14.png" alt=""></p>
<blockquote>
<p>我们也按照Fiddler那样把header 进行分类，这样比较清晰也容易记忆。
　　</p>
<ul>
<li>Cache头域<pre><code>　　
</code></pre><ul>
<li>Date<pre><code>　　
</code></pre>作用:  生成消息的具体时间和日期</li>
</ul>
</li>
</ul>
</blockquote>
<pre><code>Date: Sat, 11 Feb 2012 11:35:14 GMT 
</code></pre><p>　　</p>
<ul>
<li><p>Expires</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用: 浏览器会在指定过期时间内使用本地缓存</p>
</blockquote>
<p>  Expires: Tue, 08 Feb 2022 11:35:14 GMT
　　</p>
</li>
<li>Vary<pre><code>　　
</code></pre><blockquote>
<p>作用：<br>　　<br>  Vary: Accept-Encoding
　　</p>
</blockquote>
</li>
<li><p>Cookie/Login 头域</p>
<pre><code>　　
</code></pre><ul>
<li><p>P3P</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用: 用于跨域设置Cookie, 这样可以解决iframe跨域访问cookie的问题</p>
</blockquote>
<p>P3P: CP=CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR
　　</p>
</li>
</ul>
</li>
<li><p><strong>Set-Cookie</strong></p>
<pre><code>　　
</code></pre><blockquote>
<p>作用： 非常重要的header, 用于把cookie 发送到客户端浏览器， 每一个写入cookie都会生成一个Set-Cookie.</p>
</blockquote>
<p>  Set-Cookie: sc=4c31523a; path=/; domain=.acookie.taobao.com</p>
</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/http15.png" alt=""></p>
<ul>
<li><p>Entity头域</p>
<pre><code>　　
</code></pre><ul>
<li><p>ETag</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用:  和If-None-Match 配合使用。 （实例请看上节中If-None-Match的实例）</p>
</blockquote>
<p>ETag: “03f2b33c0bfcc1:0”
　　</p>
</li>
</ul>
</li>
<li><p>Last-Modified:</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用： 用于指示资源的<strong>最后修改日期和时间</strong>。（实例请看上节的If-Modified-Since的实例）</p>
</blockquote>
<p>  Last-Modified: Wed, 21 Dec 2011 09:09:10 GMT
　　</p>
</li>
<li><p>Content-Type</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用：WEB服务器告诉浏览器自己响应的对象的类型和字符集,</p>
</blockquote>
<p>  Content-Type: text/html; charset=utf-8<br>  Content-Type: text/html; charset=GB2312<br>  Content-Type: image/jpeg
　　</p>
</li>
<li><p>Content-Length</p>
<blockquote>
<p>指明实体正文的长度，以字节方式存储的十进制数字来表示。在数据下行的过程中，Content-Length的方式要预先在服务器中缓存所有数据，然后所有数据再一股脑儿地发给客户端。</p>
</blockquote>
<p>  Content-Length: 19847
  　　</p>
</li>
<li><p>Content-Encoding</p>
<pre><code>　　
</code></pre><blockquote>
<p>WEB服务器表明自己使用了什么压缩方法（gzip，deflate）压缩响应中的对象。</p>
</blockquote>
<p>  Content-Encoding：gzip
　　</p>
</li>
<li><p>Content-Language</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用： WEB服务器告诉浏览器自己响应的对象的语言者</p>
</blockquote>
<p>  Content-Language:da
　　</p>
</li>
<li><p>Miscellaneous 头域</p>
<pre><code>　　
</code></pre><ul>
<li><p>Server:</p>
<blockquote>
<p>作用：指明HTTP服务器的软件信息<br>　　<br>Server: Microsoft-IIS/7.5
　　</p>
</blockquote>
</li>
</ul>
</li>
<li><p>X-AspNet-Version:</p>
<pre><code>　　
</code></pre><blockquote>
<p>作用：如果网站是用ASP.NET开发的，这个header用来表示ASP.NET的版本</p>
</blockquote>
<p>  X-AspNet-Version: 4.0.30319
　　</p>
</li>
<li>X-Powered-By:<pre><code>　　
</code></pre><blockquote>
<p>作用：表示网站是用什么技术开发的</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>  X-Powered-By: ASP.NET
　　</p>
<ul>
<li>Transport头域<pre><code>　　
</code></pre><ul>
<li>Connection<br>　　<br>Connection: keep-alive   当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接</li>
</ul>
</li>
</ul>
<p>Connection: close  代表一个Request完成后，客户端和服务器之间用于传输HTTP数据的TCP连接会关闭， 当客户端再次发送Request，需要重新建立TCP连接。
　　</p>
<ul>
<li>Location头域<pre><code>　　
</code></pre><ul>
<li>Location<br>　　<br>作用： 用于重定向一个新的位置， 包含新的URL地址，实例请看304状态实例
　　<h3 id="HTTP协议是无状态的和Connection-keep-alive的区别"><a href="#HTTP协议是无状态的和Connection-keep-alive的区别" class="headerlink" title="HTTP协议是无状态的和Connection: keep-alive的区别"></a>HTTP协议是无状态的和Connection: keep-alive的区别</h3>　　<br>无状态是指协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。从另一方面讲，打开一个服务器上的网页和你之前打开这个服务器上的网页之间没有任何联系。<br>　　<br>HTTP是一个无状态的面向连接的协议，无状态不代表HTTP不能保持TCP连接，更不能代表HTTP使用的是UDP协议（无连接）。<br>　　<br>从<strong>HTTP/1.1</strong>起，默认都开启了<strong>Keep-Alive</strong>，保持连接特性，简单地说，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。<br>　　<br>Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="HTTP和HTTPS的区别"><a href="#HTTP和HTTPS的区别" class="headerlink" title="HTTP和HTTPS的区别"></a>HTTP和HTTPS的区别</h3><ul>
<li>HTTPS（Secure Hypertext Transfer Protocol）安全超文本传输协议，它是一个安全通信通道，基于HTTP开发，用于客户端与服务器之间进行信息交换。它使用了安全套接字层（SSL）进行信息交换，是HTTP的安全版本。</li>
<li>HTTPS协议需要到CA去申请证书，一般免费证书很少，需要缴费。</li>
<li>HTTP是超文本传输协议，是一个明文传输协议，而HTTPS则具有安全性的SSL加密传输协议，需要身份认证。</li>
<li>HTTP和HTTPS使用完全不同的连接方式，用的端口也不一样，HTTP是80，HTTPS是443。</li>
<li>HTTP协议连接简单，无状态，需要使用Cookie进行状态的保存。</li>
</ul>
<p><strong>参考资料</strong><br><a href="http://kb.cnblogs.com/page/130970/" target="_blank" rel="external">http://kb.cnblogs.com/page/130970/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;当今web程序的开发技术百家争鸣，ASP.NET, PHP, JSP，Perl, AJAX等等。 无论Web技术在未来如何发展，理解Web程序之间&lt;strong&gt;通信的基本协议&lt;/strong&gt;相当重要， 因为它让我们理解了Web应用程序
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Android消息处理机制 — 全面解析(3)</title>
    <link href="http://yoursite.com/2016/10/10/Android%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%20%E2%80%94%20%E5%85%A8%E9%9D%A2%E8%A7%A3%E6%9E%90(3)/"/>
    <id>http://yoursite.com/2016/10/10/Android消息处理机制 — 全面解析(3)/</id>
    <published>2016-10-10T06:06:06.000Z</published>
    <updated>2016-10-10T06:07:09.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="入门使用篇"><a href="#入门使用篇" class="headerlink" title="入门使用篇"></a>入门使用篇</h2><h3 id="错误范例"><a href="#错误范例" class="headerlink" title="错误范例"></a>错误范例</h3><p><strong>引例 — 下载一张图片</strong></p>
<blockquote>
<p>网络下载是一个耗时操作，不知道什么时候才能完成，所以需要开启一个子线程去进行网络的请求操作，等到图片下载完毕后，需要在UI界面上显示出来，由于UI控件不是线程安全的，所以，需要从子线程再转到UI线程(主线程)去更新UI界面。</p>
<p>错误的做法：</p>
</blockquote>
<pre><code>public class MainActivity extends Activity implements Button.OnClickListener {
    private TextView statusTextView = null;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        statusTextView = (TextView)findViewById(R.id.statusTextView);
        Button btnDownload = (Button)findViewById(R.id.btnDownload);
        btnDownload.setOnClickListener(this);
    }
    @Override
    public void onClick(View v) {
        DownloadThread downloadThread = new DownloadThread();
        downloadThread.start();
    }
    class DownloadThread extends Thread {
        @Override
        public void run() {
            try{
                System.out.println(&quot;开始下载文件&quot;);
                //此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程
                Thread.sleep(5000);
                System.out.println(&quot;文件下载完成&quot;);
                //文件下载完成后更新UI
                MainActivity.this.statusTextView.setText(&quot;文件下载完成&quot;);
            }catch (InterruptedException e){
                e.printStackTrace();
            }
        }
    }
}
</code></pre><blockquote>
<p>单击”下载“启动一个新的线程去执行实际的下载操作，执行完毕后更新UI界面。但在实际运行到代码</p>
</blockquote>
<pre><code>MainActivity.this.statusTextView.setText(“文件下载完成”)
</code></pre><blockquote>
<p>会报错如下，系统崩溃退出： </p>
</blockquote>
<pre><code>android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views. 
</code></pre><blockquote>
<p>意思是只有创建View的原始线程(主线程)才能更新View。出现这样错误的原因是Android中的View不是线程安全的，在Android应用启动时，会自动创建一个线程，即程序的主线程，主线程负责UI的展示、UI事件消息的派发处理等等，因此主线程也叫做UI线程，statusTextView是在UI线程中创建的，当我们在DownloadThread线程中去更新UI线程中创建的statusTextView时自然会报上面的错误。Android的UI控件是非线程安全的，其实很多平台的UI控件都是非线程安全的，比如C#的.Net Framework中的UI控件也是非线程安全的，所以不仅仅在Android平台中存在从一个新线程中去更新UI线程中创建的UI控件的问题。不同的平台提供了不同的解决方案以实现跨线程跟新UI控件，Android为了解决这种问题引入了<strong><em>Handler机制</em></strong>。</p>
</blockquote>
<h3 id="Handler解决问题"><a href="#Handler解决问题" class="headerlink" title="Handler解决问题"></a>Handler解决问题</h3><blockquote>
<p>Handler是Android中引入的<strong><em>一种让开发者参与处理线程中消息循环的机制</em></strong>。每个Hanlder都关联了一个线程，每个线程内部都维护了一个消息队列MessageQueue，这样Handler实际上也就关联了一个消息队列。可以通过Handler将<strong><em>Message和Runnable对象</em></strong>发送到该Handler所关联线程的MessageQueue（消息队列）中，然后该消息队列一直在循环拿出一个Message，对其进行处理，处理完之后拿出下一个Message，继续进行处理，周而复始。当创建一个Handler的时候，该Handler就绑定了当前创建Hanlder的线程。从这时起，该Hanlder就可以发送Message和Runnable对象到该Handler对应的消息队列中，当从MessageQueue取出某个Message时，会让Handler对其进行处理。</p>
<p>Handler可以用来在<strong><em>多线程间进行通信</em></strong>，在另一个线程中去更新UI线程中的UI控件只是Handler使用中的一种<strong><em>典型案例</em></strong>，除此之外，Handler可以做很多其他的事情。每个Handler都绑定了一个线程，假设存在两个线程ThreadA和ThreadB，并且HandlerA绑定了 ThreadA，在ThreadB中的代码执行到某处时，出于某些原因，我们需要让ThreadA执行某些代码，此时我们就可以使用Handler，我们可以在ThreadB中向HandlerA中加入某些信息以告知ThreadA中该做某些处理了。</p>
<p>由此可以看出，Handler是Thread的代言人，是多线程之间通信的桥梁，通过Handler，我们可以在一个线程中控制另一个线程去做某事。</p>
<p>Handler提供了两种方式解决本文一开始遇到的问题（在一个新线程中更新主线程中的UI控件），一种是通过post方法，一种是调用sendMessage方法。</p>
</blockquote>
<ul>
<li><p><strong>post</strong></p>
<p>  public class MainActivity extends Activity implements Button.OnClickListener {</p>
<pre><code>private TextView statusTextView = null;

//uiHandler在主线程中创建，所以自动绑定主线程
private Handler uiHandler = new Handler();

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    statusTextView = (TextView)findViewById(R.id.statusTextView);
    Button btnDownload = (Button)findViewById(R.id.btnDownload);
    btnDownload.setOnClickListener(this);
    System.out.println(&quot;Main thread id &quot; + Thread.currentThread().getId());
}

@Override
public void onClick(View v) {
    DownloadThread downloadThread = new DownloadThread();
    downloadThread.start();
}

class DownloadThread extends Thread{
    @Override
    public void run() {
        try{
            System.out.println(&quot;DownloadThread id &quot; + Thread.currentThread().getId());
            System.out.println(&quot;开始下载文件&quot;);
            //此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程
            Thread.sleep(5000);
            System.out.println(&quot;文件下载完成&quot;);
            //文件下载完成后更新UI
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    System.out.println(&quot;Runnable thread id &quot; + Thread.currentThread().getId());
                    MainActivity.this.statusTextView.setText(&quot;文件下载完成&quot;);
                }
            };
            uiHandler.post(runnable);
        } catch (InterruptedException e){
            e.printStackTrace();
        }
    }
}
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>我们在Activity中创建了一个Handler成员变量uiHandler，Handler有个特点，在执行new Handler()的时候，默认情况下Handler会绑定当前代码执行的线程，我们在主线程中实例化了uiHandler，所以uiHandler就自动绑定了主线程，即UI线程。当我们在DownloadThread中执行完耗时代码后，我们将一个<strong><em>Runnable对象</em></strong>通过<strong><em>post方法</em></strong>传入到了Handler中，Handler会在合适的时候让<strong><em>主线程执行Runnable中的代码</em></strong>，这样Runnable就在主线程中执行了，从而正确更新了主线程中的UI。以下是输出结果： </p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150727232302171" alt=""></p>
<blockquote>
<p>通过输出结果可以看出，Runnable中的代码所执行的线程ID与DownloadThread的线程ID不同，而与主线程的线程ID相同，因此我们也由此看出在执行了<strong><em>Handler.post(Runnable)</em></strong>这句代码之后，运行Runnable代码的线程与Handler所绑定的线程是一致的，而与执行Handler.post(Runnable)这句代码的线程（DownloadThread）无关。</p>
</blockquote>
<ul>
<li><p><strong>sendMessage</strong></p>
<p>  public class MainActivity extends Activity implements Button.OnClickListener {</p>
<pre><code>private TextView statusTextView = null;

//uiHandler在主线程中创建，所以自动绑定主线程
private Handler uiHandler = new Handler(){
    @Override
    public void handleMessage(Message msg) {
        switch (msg.what){
            case 1:
                System.out.println(&quot;handleMessage thread id &quot; + Thread.currentThread().getId());
                System.out.println(&quot;msg.arg1:&quot; + msg.arg1);
                System.out.println(&quot;msg.arg2:&quot; + msg.arg2);
                MainActivity.this.statusTextView.setText(&quot;文件下载完成&quot;);
                break;
        }
    }
};

@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    statusTextView = (TextView)findViewById(R.id.statusTextView);
    Button btnDownload = (Button)findViewById(R.id.btnDownload);
    btnDownload.setOnClickListener(this);
    System.out.println(&quot;Main thread id &quot; + Thread.currentThread().getId());
}

@Override
public void onClick(View v) {
    DownloadThread downloadThread = new DownloadThread();
    downloadThread.start();
}

class DownloadThread extends Thread{
    @Override
    public void run() {
        try{
            System.out.println(&quot;DownloadThread id &quot; + Thread.currentThread().getId());
            System.out.println(&quot;开始下载文件&quot;);
            //此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程
            Thread.sleep(5000);
            System.out.println(&quot;文件下载完成&quot;);
            //文件下载完成后更新UI
            Message msg = new Message();
            //虽然Message的构造函数式public的，我们也可以通过以下两种方式通过循环对象获取Message
            //msg = Message.obtain(uiHandler);
            //msg = uiHandler.obtainMessage();

            //what是我们自定义的一个Message的识别码，以便于在Handler的handleMessage方法中根据what识别
            //出不同的Message，以便我们做出不同的处理操作
            msg.what = 1;

            //我们可以通过arg1和arg2给Message传入简单的数据
            msg.arg1 = 123;
            msg.arg2 = 321;
            //我们也可以通过给obj赋值Object类型传递向Message传入任意数据
            //msg.obj = null;
            //我们还可以通过setData方法和getData方法向Message中写入和读取Bundle类型的数据
            //msg.setData(null);
            //Bundle data = msg.getData();

            //将该Message发送给对应的Handler
            uiHandler.sendMessage(msg);
        }catch (InterruptedException e){
            e.printStackTrace();
        }
    }
}
</code></pre><p>  }</p>
</li>
</ul>
<blockquote>
<p>通过Message与Handler进行通信的步骤是： </p>
</blockquote>
<ul>
<li>重写Handler的handleMessage方法，根据Message的what值进行不同的处理操作 </li>
<li>创建Message对象 , 虽然Message的构造函数式public的,我们还可以通过Message.obtain()或Handler.obtainMessage()来获得一个Message对象（Handler.obtainMessage()内部其实调用了Message.obtain()）。 </li>
<li>设置Message的what值 , Message.what是我们自定义的一个Message的识别码，以便于在Handler的handleMessage方法中根据what识别出不同的Message，以便我们做出不同的处理操作。 </li>
<li>设置Message的所携带的数据，简单数据可以通过两个int类型的field arg1和arg2来赋值，并可以在handleMessage中读取。 </li>
<li>如果Message需要携带复杂的数据，那么可以设置Message的obj字段，obj是Object类型，可以赋予任意类型的数据。或者可以通过调用Message的setData方法赋值Bundle类型的数据，可以通过getData方法获取该Bundle数据。 </li>
<li>我们通过Handler.sendMessage(Message)方法将Message传入Handler中让其在handleMessage中对其进行处理。 </li>
</ul>
<blockquote>
<p>需要说明的是，如果在handleMessage中 不需要判断Message类型，那么就无须设置Message的what值；而且让Message携带数据也不是必须的，只有在需要的时候才需要让其携带数据；如果确实需要让Message携带数据，应该尽量使用arg1或arg2或两者，能用arg1和arg2解决的话就不要用obj，因为用arg1和arg2更高效。 </p>
</blockquote>
<p><strong>程序的运行结果如下</strong></p>
<p><img src="http://img.blog.csdn.net/20150729000800538" alt=""></p>
<blockquote>
<p>由上我们可以看出，执行handleMessage的线程与创建Handler的线程是同一线程，在本示例中都是主线程。执行handleMessage的线程与执行uiHandler.sendMessage(msg)的线程没有关系。</p>
</blockquote>
<hr>
<p><strong>本文主要是对Handler和消息循环的实现原理进行源码分析</strong></p>
<h2 id="源码解析篇"><a href="#源码解析篇" class="headerlink" title="源码解析篇"></a>源码解析篇</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>Handler是Android中引入的一种让开发者参与处理线程中消息循环的机制。我们在使用Handler的时候与Message打交道最多，Message是Hanlder机制向开发人员暴露出来的相关类，可以通过Message类完成大部分操作Handler的功能。但作为程序员，我不能只知道怎么用Handler，还要知道其内部如何实现的。Handler的内部实现主要涉及到如下几个类: Thread、MessageQueue和Looper。这几类之间的关系可以用如下的图来简单说明：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150801010109197" alt=""></p>
<blockquote>
<p>Thread是最基础的，Looper和MessageQueue都构建在Thread之上，Handler又构建在Looper和MessageQueue之上，我们通过Handler间接地与下面这几个相对底层一点的类打交道。</p>
</blockquote>
<h3 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h3><blockquote>
<p>最基础最底层的是Thread，每个线程内部都维护了一个消息队列MessageQueue。MessageQueue是存放消息的队列。那队列中存储的消息是什么呢？假设我们在UI界面上单击了某个按钮，而此时程序又恰好收到了某个广播事件，那我们如何处理这两件事呢？ 因为一个线程在某一时刻只能处理一件事情，不能同时处理多件事情，所以我们不能同时处理按钮的单击事件和广播事件，我们只能挨个对其进行处理，只要挨个处理就要有处理的先后顺序。 为此Android把UI界面上单击按钮的事件封装成了一个Message，将其放入到MessageQueue里面去，即将单击按钮事件的Message入栈到消息队列中，然后再将广播事件的封装成以Message，也将其入栈到消息队列中。也就是说一个Message对象表示的是线程需要处理的一件事情，消息队列就是一堆需要处理的Message的池。线程Thread会依次取出消息队列中的消息，依次对其进行处理。MessageQueue中有两个比较重要的方法，一个是<strong><em>enqueueMessage</em></strong>方法，一个是<strong><em>next</em></strong>方法。enqueueMessage方法用于将一个Message放入到消息队列MessageQueue中，next方法是从消息队列MessageQueue中阻塞式地取出一个Message。在Android中，消息队列负责管理着顶级程序对象（Activity、BroadcastReceiver等）以及由其创建的所有窗口。需要注意的是，消息队列不是Android平台特有的，其他的平台框架也会用到消息队列，比如微软的MFC框架等。</p>
</blockquote>
<h3 id="Looper"><a href="#Looper" class="headerlink" title="Looper"></a>Looper</h3><blockquote>
<p>消息队列MessageQueue只是存储Message的地方，真正让消息队列循环起来的是Looper，这就好比消息队列MessageQueue是个水车，那么Looper就是让水车转动起来的河水，如果没有河水，那么水车就是个静止的摆设，没有任何用处，Looper让MessageQueue动了起来，有了活力。</p>
<p>Looper是用来使线程中的消息循环起来的。默认情况下当我们创建一个新的线程的时候，这个线程里面是没有消息队列MessageQueue的。为了能够让线程能够绑定一个消息队列，我们需要借助于Looper：首先我们要调用Looper的prepare方法，然后调用Looper的Loop方法。典型的代码如下所示：</p>
</blockquote>
<pre><code>class LooperThread extends Thread {
      public Handler mHandler;

      public void run() {
          Looper.prepare();

          mHandler = new Handler() {
              public void handleMessage(Message msg) {
                  // process incoming messages here
              }
          };

          Looper.loop();
      }
  }
</code></pre><blockquote>
<p>需要注意的是Looper.prepare()和Looper.loop()都是在新线程的run方法内调用的，这两个方法都是静态方法。我们通过查看Looper的源码可以发现，Looper的构造函数是private的，也就是在该类的外部不能用new Looper()的形式得到一个Looper对象。根据我们上面的描述，我们知道<strong><em>线程Thread和Looper是一对一绑定的</em></strong>，也就是一个线程中最多只有一个Looper对象，这也就能解释Looper的构造函数为什么是private的了，我们只能通过工厂方法Looper.myLooper()这个静态方法获取当前线程所绑定的Looper。</p>
<p>Looper通过如下代码保存了对当前线程的引用：</p>
</blockquote>
<pre><code>static final ThreadLocal&lt;Looper&gt; sThreadLocal = new ThreadLocal&lt;Looper&gt;();
</code></pre><blockquote>
<p>在Looper对象中通过sThreadLocal就可以找到其绑定的线程。ThreadLocal中有个set方法和get方法，可以通过set方法向ThreadLocal中存入一个对象，然后可以通过get方法取出存入的对象。ThreadLocal在new的时候使用了泛型，从上面的代码中我们可以看到此处的泛型类型是Looper，也就是我们通过ThreadLocal的set和get方法只能写入和读取Looper对象类型，如果我们调用其ThreadLocal的set方法传入一个Looper，将该Looper绑定给了该线程，相应的get就能获得该线程所绑定的Looper对象。</p>
<p>我们再来看一下Looper.prepare()，该方法是让Looper做好准备，只有Looper准备好了之后才能调用Looper.loop()方法，Looper.prepare()的代码如下:</p>
</blockquote>
<pre><code>private static void prepare(boolean quitAllowed) {
        if (sThreadLocal.get() != null) {
            throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);
        }
        sThreadLocal.set(new Looper(quitAllowed));
}
</code></pre><blockquote>
<p>上面的代码首先通过sThreadLocal.get()拿到线程sThreadLocal所绑定的Looper对象，由于初始情况下sThreadLocal并没有绑定Looper，所以第一次调用prepare方法时，sThreadLocal.get()返回null，不会抛出异常。重点是下面的代码sThreadLocal.set(new Looper(quitAllowed))，首先通过私有的构造函数创建了一个Looper对象的实例，然后通过sThreadLocal的set方法将该Looper绑定到sThreadLocal中。 </p>
<p>这样就完成了线程sThreadLocal与Looper的<strong><em>双向绑定</em></strong>： </p>
</blockquote>
<ul>
<li>在Looper内通过sThreadLocal可以获取Looper所绑定的线程</li>
<li>线程sThreadLocal通过sThreadLocal.get()方法可以获取该线程所绑定的Looper对象</li>
</ul>
<blockquote>
<p>上面的代码执行了Looper的构造函数，我们看一下其代码：</p>
</blockquote>
<pre><code>private Looper(boolean quitAllowed) {
        mQueue = new MessageQueue(quitAllowed);
        mThread = Thread.currentThread();
}
</code></pre><blockquote>
<p>我们可以看到在其构造函数中<strong><em>实例化一个消息队列MessageQueue</em></strong>，并将其赋值给其成员字段<strong><em>mQueue</em></strong>,这样<strong><em>Looper也就与MessageQueue通过成员字段mQueue进行了关联</em></strong>。</p>
<p>在执行完了Looper.prepare()之后，我们就可以在外部通过调用Looper.myLooper()获取当前线程绑定的Looper对象。 </p>
<p>myLooper的代码如下所示：</p>
</blockquote>
<pre><code>public static Looper myLooper() {
        return sThreadLocal.get();
}
</code></pre><blockquote>
<p>需要注意的是，在一个线程中，只能调用一次Looper.prepare()，因为在第一次调用了Looper.prepare()之后，当前线程就已经绑定了Looper，在该线程内第二次调用Looper.prepare()方法的时候，sThreadLocal.get()会返回第一次调用prepare的时候绑定的Looper，不是null，这样就会走的下面的代码</p>
</blockquote>
<pre><code>throw new RuntimeException(“Only one Looper may be created per thread”)，
</code></pre><blockquote>
<p>从而抛出异常，告诉开发者一个线程只能绑定一个Looper对象。</p>
<p>在调用了Looper.prepare()方法之后，当前线程和Looper就进行了双向的绑定，这时候我们就可以调用<strong><em>Looper.loop()</em></strong>方法让消息队列循环起来了。<br>需要注意的是<strong><em>Looper.loop()应该在该Looper所绑定的线程中执行</em></strong>。</p>
<p>Looper.loop()的代码如下:</p>
</blockquote>
<pre><code>public static void loop() {
        final Looper me = myLooper();
        if (me == null) {
            throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;);
        }
        //注意下面这行
        final MessageQueue queue = me.mQueue;

        // Make sure the identity of this thread is that of the local process,
        // and keep track of what that identity token actually is.
        Binder.clearCallingIdentity();
        final long ident = Binder.clearCallingIdentity();

        //注意下面这行
        for (;;) {
            //注意下面这行
            Message msg = queue.next(); // might block
            if (msg == null) {
                // No message indicates that the message queue is quitting.
                return;
            }

            // This must be in a local variable, in case a UI event sets the logger
            Printer logging = me.mLogging;
            if (logging != null) {
                logging.println(&quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot; + msg.target + &quot; &quot; +
                        msg.callback + &quot;: &quot; + msg.what);
            }

            //注意下面这行
            msg.target.dispatchMessage(msg);

            if (logging != null) {
                logging.println(&quot;&lt;&lt;&lt;&lt;&lt; Finished to &quot; + msg.target + &quot; &quot; + msg.callback);
            }

            // Make sure that during the course of dispatching the
            // identity of the thread wasn&apos;t corrupted.
            final long newIdent = Binder.clearCallingIdentity();
            if (ident != newIdent) {
                Log.wtf(TAG, &quot;Thread identity changed from 0x&quot;
                        + Long.toHexString(ident) + &quot; to 0x&quot;
                        + Long.toHexString(newIdent) + &quot; while dispatching to &quot;
                        + msg.target.getClass().getName() + &quot; &quot;
                        + msg.callback + &quot; what=&quot; + msg.what);
            }

            msg.recycleUnchecked();
        }
}
</code></pre><blockquote>
<p>上面有几行代码是关键代码: </p>
</blockquote>
<pre><code>final Looper me = myLooper(); 
final MessageQueue queue = me.mQueue; 
</code></pre><blockquote>
<p>变量me是通过静态方法myLooper()获得的当前线程所绑定的Looper，me.mQueue是当前线程所关联的消息队列。 </p>
</blockquote>
<pre><code>for (;;) 
</code></pre><blockquote>
<p>我们发现for循环没有设置循环终止的条件，所以这个for循环是个死循环。 </p>
</blockquote>
<pre><code>Message msg = queue.next(); // might block 
</code></pre><blockquote>
<p>我们通过消息队列MessageQueue的next方法从消息队列中取出一条消息，如果此时消息队列中有Message，那么next方法会立即返回该Message，如果此时消息队列中没有Message，那么next方法就会<strong><em>阻塞式</em></strong>地等待获取Message。 </p>
</blockquote>
<pre><code>msg.target.dispatchMessage(msg); 
</code></pre><blockquote>
<p><strong><em>msg的target属性是Handler</em></strong>，该代码的意思是让Message所关联的Handler通过dispatchMessage方法让Handler处理该Message，关于Handler的dispatchMessage方法将会在下面详细介绍。</p>
</blockquote>
<h3 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h3><blockquote>
<p>Handler是暴露给开发者最顶层的一个类，其构建在Thread、Looper与MessageQueue之上。 </p>
</blockquote>
<p><strong>Handler具有多个构造函数，如下所示： </strong></p>
<pre><code>//第1个
public Handler() {
        this(null, false);
}
//第2个
public Handler(Callback callback) {
        this(callback, false);
}
//第3个 
public Handler(boolean async) {
         this(null, async);
}
//第4个 
public Handler(Callback callback, boolean async) {
        mLooper = Looper.myLooper();
        if (mLooper == null) {
            throw new RuntimeException(
                &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);
        }
        mQueue = mLooper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
}
//第5个
public Handler(Looper looper) {
        this(looper, null, false);
}
//第6个  
public Handler(Looper looper, Callback callback) {
        this(looper, callback, false);
}
//第7个 
public Handler(Looper looper, Callback callback, boolean async) {
        mLooper = looper;
        mQueue = looper.mQueue;
        mCallback = callback;
        mAsynchronous = async;
}
</code></pre><blockquote>
<p>第1-3个构造函数都没有传递Looper，这三个构造函数最终会调用第4个构造函数，在构造函数内调用Looper.myLooper()获取当前线程绑定的Looper对象，然后将该Looper对象保存到名为mLooper的成员字段中。</p>
<p>第5个和第6个构造函数传递了Looper对象，最终会去调用第7个构造函数，这两个构造函数会直接将传入的Looper保存到名为mLooper的成员字段中。 </p>
<p>第4个和第7个构造函数都还有一个Callback对象，Callback是Handler中的内部接口，需要实现其内部的handleMessage方法，Callback代码如下:</p>
</blockquote>
<pre><code>public interface Callback {
        public boolean handleMessage(Message msg);
}
</code></pre><blockquote>
<p>Handler.Callback是用来处理Message的一种手段，如果没有传递该参数，那么就应该重写Handler的handleMessage方法，也就是说为了使得Handler能够处理Message，我们有两种办法： </p>
</blockquote>
<ul>
<li>向Hanlder的构造函数传入一个Handler.Callback对象，并实现Handler.Callback的handleMessage方法 </li>
<li>无需向Handler的构造函数传入Handler.Callback对象，但是需要重写Handler本身的handleMessage方法 </li>
</ul>
<blockquote>
<p>在Java中，如果我们想使用多线程，有两种办法： </p>
</blockquote>
<ul>
<li>向Thread的构造函数传入一个<strong><em>Runnable对象</em></strong>，并<strong><em>实现Runnable的run方法 </em></strong></li>
<li>无需向Thread的构造函数传入Runnable对象，但是要重写Thread本身的run方法 </li>
</ul>
<blockquote>
<p>所以只要用过多线程Thread，应该就对Hanlder这种需要实现handleMessage的两种方式了然于心了。</p>
</blockquote>
<ul>
<li><strong> sendMessage系列</strong></li>
</ul>
<blockquote>
<p>我们知道通过sendMessageXXX系列方法可以向消息队列中添加消息，我们通过源码可以看出这些方法的调用顺序，<br>sendMessage调用了sendMessageDelayed，sendMessageDelayed又调用了sendMessageAtTime。<br>Handler中还有一系列的sendEmptyMessageXXX方法，而这些sendEmptyMessageXXX方法在其内部又分别调用了其对应的sendMessageXXX方法。</p>
</blockquote>
<p><strong>源码如下</strong></p>
<pre><code>public final boolean sendMessage(Message msg) {
        return sendMessageDelayed(msg, 0);
}
public final boolean sendMessageDelayed(Message msg, long delayMillis) {
        if (delayMillis &lt; 0) {
            delayMillis = 0;
        }
        return sendMessageAtTime(msg, SystemClock.uptimeMillis() + delayMillis);
}
public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        MessageQueue queue = mQueue;
        if (queue == null) {
            RuntimeException e = new RuntimeException(
                    this + &quot; sendMessageAtTime() called with no mQueue&quot;);
            Log.w(&quot;Looper&quot;, e.getMessage(), e);
            return false;
        }
        return enqueueMessage(queue, msg, uptimeMillis);
}

public final boolean sendEmptyMessage(int what) {
        return sendEmptyMessageDelayed(what, 0);
}
public final boolean sendEmptyMessageDelayed(int what, long delayMillis) {
        Message msg = Message.obtain();
        msg.what = what;
        return sendMessageDelayed(msg, delayMillis);
}
public final boolean sendEmptyMessageAtTime(int what, long uptimeMillis) {
        Message msg = Message.obtain();
        msg.what = what;
        return sendMessageAtTime(msg, uptimeMillis);
}
</code></pre><blockquote>
<p>由此可见所有的sendMessageXXX方法和sendEmptyMessageXXX最终都调用了<strong><em>sendMessageAtTime</em></strong>方法</p>
<p>关系如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/Handler-sendMsg.png" alt=""></p>
<ul>
<li><strong>post系列</strong></li>
</ul>
<blockquote>
<p>再来看看postXXX方法，会发现postXXX方法在其内部又调用了对应的sendMessageXXX方法，源码如下：</p>
</blockquote>
<pre><code>public final boolean post(Runnable r) {
       return  sendMessageDelayed(getPostMessage(r), 0);
}
public final boolean postAtTime(Runnable r, long uptimeMillis) {
        return sendMessageAtTime(getPostMessage(r), uptimeMillis);
}
public final boolean postAtTime(Runnable r, Object token, long uptimeMillis) {
        return sendMessageAtTime(getPostMessage(r, token), uptimeMillis);
}
public final boolean postDelayed(Runnable r, long delayMillis) {
        return sendMessageDelayed(getPostMessage(r), delayMillis);
}
</code></pre><blockquote>
<p>可以看到内部调用了getPostMessage方法，该方法传入一个Runnable对象，得到一个Message对象，getPostMessage的源码如下:</p>
</blockquote>
<pre><code>private static Message getPostMessage(Runnable r) {
        Message m = Message.obtain();
        m.callback = r;
        return m;
}
private static Message getPostMessage(Runnable r, Object token) {
        Message m = Message.obtain();
        m.obj = token;
        m.callback = r;
        return m;
}
</code></pre><blockquote>
<p>通过上面的代码我们可以看到在getPostMessage方法中，我们创建了一个Message对象，并将传入的Runnable对象赋值给Message的<strong><em>callback成员</em></strong>字段，然后返回该Message，然后在post方法中该携带有Runnable信息的Message传入到sendMessageDelayed方法中。由此我们可以看到所有的postXXX方法内部都需要借助<strong><em>sendMessageXXX方法</em></strong>来实现，所以postXXX与sendMessageXXX并不是对立关系，而是postXXX依赖sendMessageXXX，所以postXXX方法可以通过sendMessageXXX方法向消息队列中传入消息，只不过通过<strong><em>postXXX方法向消息队列中传入的消息都携带有Runnable对象（Message.callback）</em></strong>。</p>
<p>通过以下调用关系图我们可以看的更清楚些: </p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/Handler-post&amp;send.png" alt=""></p>
<blockquote>
<p>通过分别分析sendEmptyMessageXXX、postXXX方法与sendMessageXXX方法之间的关系，我们可以看到在Handler中所有可以直接或间接向消息队列发送Message的方法最终都调用了<strong><em>sendMessageAtTime</em></strong>方法，源码如下：</p>
</blockquote>
<pre><code>public boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        MessageQueue queue = mQueue;
        if (queue == null) {
            RuntimeException e = new RuntimeException(
                    this + &quot; sendMessageAtTime() called with no mQueue&quot;);
            Log.w(&quot;Looper&quot;, e.getMessage(), e);
            return false;
        }
        //注意下面这行代码
        return enqueueMessage(queue, msg, uptimeMillis);
}
</code></pre><blockquote>
<p>该方法内部调用了enqueueMessage方法，该方法的源码如下：</p>
</blockquote>
<pre><code>private boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {
        //注意下面这行代码
        msg.target = this;
        if (mAsynchronous) {
            msg.setAsynchronous(true);
        }
        //注意下面这行代码
        return queue.enqueueMessage(msg, uptimeMillis);
}
</code></pre><p><strong>在该方法中有两件事需要注意： </strong></p>
<ul>
<li>msg.target = this</li>
</ul>
<blockquote>
<p>该代码将Message的target绑定为当前的Handler （Handler把Message发送出去的同时，又把自己作为Message的一个成员变量）</p>
</blockquote>
<ul>
<li>queue.enqueueMessage</li>
</ul>
<blockquote>
<p>变量queue表示的是Handler所绑定的消息队列MessageQueue，通过调用queue.enqueueMessage(msg, uptimeMillis)我们将Message放入到消息队列中。</p>
</blockquote>
<p>所以我们通过下图可以看到完整的方法调用顺序： </p>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/Handler-Message.png" alt=""></p>
<blockquote>
<p>前面在分析Looper.loop()的源码时发现，Looper一直在不断的从消息队列中通过MessageQueue的next方法获取Message，然后通过代码msg.target.dispatchMessage(msg)让该msg所绑定的Handler（Message.target）执行dispatchMessage方法以实现对Message的处理。 </p>
<p>Handler的dispatchMessage的源码如下：</p>
</blockquote>
<pre><code>public void dispatchMessage(Message msg) {
        //注意下面这行代码
        if (msg.callback != null) {
            handleCallback(msg);
        } else {
             //注意下面这行代码
            if (mCallback != null) {
                if (mCallback.handleMessage(msg)) {
                    return;
                }
            }
             //注意下面这行代码
            handleMessage(msg);
        }
}
</code></pre><ul>
<li><strong>msg.callback</strong></li>
</ul>
<blockquote>
<p>首先会判断msg.callback存不存在，<strong><em>msg.callback是Runnable类型</em></strong>，如果msg.callback存在，那么说明该Message是通过执行Handler的postXXX系列方法将Message放入到消息队列中的，这种情况下会执行handleCallback(msg), handleCallback源码如下：</p>
</blockquote>
<pre><code>private static void handleCallback(Message message) {
        message.callback.run();
}
</code></pre><blockquote>
<p>这样我们我们就清楚地看到我们执行了msg.callback的run方法，也就是执行了postXXX所传递的Runnable对象的run方法。</p>
</blockquote>
<ul>
<li><strong>Handler.Callback</strong></li>
</ul>
<blockquote>
<p>如果我们不是通过postXXX系列方法将Message放入到消息队列中的，那么msg.callback就是null，代码继续往下执行，接着我们会<strong><em>判断Handler的成员字段mCallback存不存在</em></strong>。mCallback是Handler.Callback类型的，我们在上面提到过，在Handler的构造函数中我们可以传递Handler.Callback类型的对象，该对象需要实现handleMessage方法，如果我们在构造函数中传递了该<strong><em>Callback对象</em></strong>，那么我们就会让Callback的handleMessage方法来处理Message。</p>
</blockquote>
<ul>
<li><strong>Handler自身实现的handleMessage方法</strong></li>
</ul>
<blockquote>
<p>如果我们在构造函数中没有传入Callback类型的对象，那么mCallback就为null,那么我们会调用Handler自身的hanldeMessage方法，该方法默认是个空方法，我们需要自己是重写实现该方法。</p>
</blockquote>
<p><strong>综述</strong></p>
<blockquote>
<p>Handler提供了三种途径处理Message，而且处理有前后优先级之分：首先尝试让postXXX中传递的Runnable执行，其次尝试让Handler构造函数中传入的Callback的handleMessage方法处理，最后才是让Handler自身的handleMessage方法处理Message。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>我们在本文讨论了Thread、MessageQueue、Looper以及Hanlder的之间的关系，我们可以通过如下一张传送带的图来更形象的理解他们之间的关系</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150801014511416" alt=""></p>
<blockquote>
<p>在现实生活的生产生活中，存在着各种各样的传送带，传送带上面洒满了各种货物，传送带在发动机滚轮的带动下一直在向前滚动，不断有新的货物放置在传送带的一端，货物在传送带的带动下送到另一端进行收集处理。</p>
<p>我们可以把传送带上的货物看做是一个个的Message，而承载这些货物的传送带就是装载Message的消息队列MessageQueue。传送带是靠发送机滚轮带动起来转动的，我们可以把发送机滚轮看做是Looper，而发动机的转动是需要电源的，我们可以把电源看做是线程Thread，所有的消息循环的一切操作都是基于某个线程的。一切准备就绪，我们只需要按下电源开关发动机就会转动起来，这个开关就是Looper的loop方法，当我们按下开关的时候，我们就相当于执行了Looper的loop方法，此时Looper就会驱动着消息队列循环起来。</p>
<p>那Hanlder在传送带模型中相当于什么呢？我们可以将Handler看做是放入货物以及取走货物的管道：货物从一端顺着管道划入传送带，货物又从另一端顺着管道划出传送带。我们在传送带的一端放入货物的操作就相当于我们调用了Handler的sendMessageXXX、sendEmptyMessageXXX或postXXX方法，这就把Message对象放入到了消息队列MessageQueue中了。当货物从传送带的另一端顺着管道划出时，我们就相当于调用了Hanlder的dispatchMessage方法，在该方法中我们完成对Message的处理。</p>
</blockquote>
<p><strong>参考资料</strong><br>孙群<br><a href="http://blog.csdn.net/iispring/article/details/47115879" target="_blank" rel="external">http://blog.csdn.net/iispring/article/details/47115879</a><br><a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="external">http://blog.csdn.net/iispring/article/details/47180325</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;入门使用篇&quot;&gt;&lt;a href=&quot;#入门使用篇&quot; class=&quot;headerlink&quot; title=&quot;入门使用篇&quot;&gt;&lt;/a&gt;入门使用篇&lt;/h2&gt;&lt;h3 id=&quot;错误范例&quot;&gt;&lt;a href=&quot;#错误范例&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Handler" scheme="http://yoursite.com/tags/Handler/"/>
    
      <category term="消息处理机制" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Android消息处理机制 — 原理分析(2)</title>
    <link href="http://yoursite.com/2016/10/04/Android%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%20%E2%80%94%20%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90(2)/"/>
    <id>http://yoursite.com/2016/10/04/Android消息处理机制 — 原理分析(2)/</id>
    <published>2016-10-04T07:11:40.000Z</published>
    <updated>2016-10-10T06:03:58.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p><strong>Android消息机制</strong></p>
<ul>
<li>Handler是Android消息机制的上层接口，开发者只需要和Handler交互即可；</li>
<li>Handler作用就是将一个任务切换到某个指定的线程中去执行；</li>
<li>更新UI就是Handler的一个特殊使用场景（子线程执行耗时任务，通过Handler切换到主线程更新UI），但其功能远不于此；</li>
<li>Handler的运行机制是Android消息机制的主要内容；</li>
<li>Handler的运行需要底层的MessageQueue和Looper的支撑；</li>
<li>MessageQueue是消息队列，其内部存储了一组消息（Message），以队列的形式对外提供插入和删除工作，虽说称它为消息队列，但其内部存储结构并不是真正的队列，而是采用单链表的数据结构来存储消息列表；</li>
<li>Looper（循环）是消息循环者，MessageQueue只是一个消息的存储单元，它不能去处理消息，Looper填补了这个功能；</li>
<li>Looper以无限循环的方式去查看消息队列中是否有新消息，如果有就去处理，否则就一直等待着；</li>
<li>Looper中有一个特殊的概念ThreadLocal，它不是线程，作用是可以在每个线程中存储数据。Handler创建的时候会采用当前线程的Looper来构造消息循环系统，此时就是通过ThreadLocal来获得当前线程的Looper；</li>
<li>ThreadLocal可以在不同的线程中互不干扰地存储并提供数据，通过ThreadLocal可以轻松地获得每个线程的Looper；</li>
<li>线程默认是没有Looper的，如果需要使用Handler就必须为线程创建Looper。在主线程就是ActivityThread，其被创建时就会初始化Looper，这就是主线程中默认可以使用Handler的原因。</li>
</ul>
<h3 id="消息机制分析"><a href="#消息机制分析" class="headerlink" title="消息机制分析"></a>消息机制分析</h3><blockquote>
<p>前面一节已经对Android的消息机制做了一个概述，大致分析了Handler的工作过程，本节将从实现原理的角度，再次深入分析Android的消息机制。</p>
</blockquote>
<h4 id="ThreadLocal的工作原理"><a href="#ThreadLocal的工作原理" class="headerlink" title="ThreadLocal的工作原理"></a>ThreadLocal的工作原理</h4><blockquote>
<p>ThreadLocal是一个线程内部的数据存储类，通过它可以在指定的线程中存储数据，数据存储以后，只有在指定线程中可以获取到存储的数据，对于其他线程来说则无法获取到数据。</p>
<p>ThreadLocal使用的场景并不多，但在某些特殊场景下，使用ThreadLocal可以轻松实现一些看似复杂的功能，这一点在Android源码中有所体现，如：Looper，ActivityThread以及AMS中都用到了ThreadLocal。</p>
<p>具体到ThreadLocal使用场景，不好统一来讲，一般来说，当某些数据是以线程为作用域并且不同线程具有不同的数据副本的时候，就可以考虑采用ThreadLocal。</p>
<p>对于Handler来说，它需要获取到当前线程的Looper，很显然Looper的作用域就是线程并且不同线程具有不同的Looper，这个时候通过ThreadLocal就可以轻松实现Looper在线程中的获取。如果不采用ThreadLocal，那么系统就必须提供一个全局的哈希表供Handler查找指定线程的Looper，这样一来就必须提供一个类似于LooperManager的类了，但是系统并没有这么做而是选择了ThreadLocal，这也体现了ThreadLocal的好处。</p>
<p>ThreadLocal另一个使用场景就是复杂逻辑下的对象传递，比如监听器的传递，有时候一个线程中的任务过于复杂，这可能表现为函数的调用栈比较深以及代码入口的多样性，在这种情况下，我们又需要监听器能够贯穿整个线程的执行过程，这个时候可以怎么做呢？其实采用ThreadLocal 可以让监听器作为线程内的全局对象而存在，在线程内部只要通过get方法就可以获取到监听器。如果不采用ThreadLocal，那么我们能想到的两种方法：</p>
</blockquote>
<ul>
<li>将监听器通过参数的形式在函数调用栈中进行传递。但当函数调用栈很深时，通过函数参数来传递监听器对象是不可接受的。</li>
<li>将监听器作为静态变量供线程访问，但其不具有可扩充性，10个线程同时并发执行，就需要10个静态的监听器对象，而采用ThreadLocal，每个监听器对象都在自己的线程内部存储，不会存在这个问题。</li>
</ul>
<p><strong>举个例子</strong></p>
<blockquote>
<p>首先定义一个ThreadLocal对象，这里选择Boolean类型，如下：</p>
</blockquote>
<pre><code>private ThreadLocal&lt;Boolean&gt; mBooleanThreadLocal = new ThreadLocal&lt;Boolean&gt;();
</code></pre><blockquote>
<p>然后分别在主线程，子线程1和子线程2中设置和访问它的值，如下：</p>
</blockquote>
<pre><code>mBooleanThreadLocal.set(true);
Log.d(&quot;Science&quot;, &quot;[Thread#main] mBooleanThreadLocal = : &quot; + mBooleanThreadLocal.get());

new Thread(&quot;Thread#1&quot;) {
    @Override
         public void run() {
                mBooleanThreadLocal.set(false);
                Log.d(&quot;Science&quot;, &quot;[Thread#1] mBooleanThreadLocal = : &quot; + mBooleanThreadLocal.get());
          }
}.start();

new Thread(&quot;Thread#2&quot;) {
        @Override
        public void run() {
                Log.d(&quot;Science&quot;, &quot;[Thread#2] mBooleanThreadLocal = : &quot; + mBooleanThreadLocal.get());
        }
}.start();
</code></pre><blockquote>
<p>主线程中设置mBooleanThreadLocal的值为true<br>线程1中设置mBooleanThreadLocal的值为false<br>线程2中不设置mBooleanThreadLocal值<br>然后分别在3个线程中通过get方法获取mBooleanThreadLocal的值</p>
<p>运行结果如下：</p>
</blockquote>
<pre><code>D/Science: [Thread#main] mBooleanThreadLocal = : true
D/Science: [Thread#1] mBooleanThreadLocal = : false
D/Science: [Thread#2] mBooleanThreadLocal = : null
</code></pre><blockquote>
<p>分析日志，可以看到，在不同的线程中访问的是同一个ThreadLocal对象，但是他们通过ThreadLocal获取到的值却不一样，这就是ThreadLocal的奇妙之处。</p>
<p>ThreadLocal之所以有这么奇妙的效果，是因为不同线程访问同一个ThreadLocal的get方法，ThreadLocal内部会从各自的线程中取出一个数组，然后再从数组中根据当前ThreadLocal的索引去查找出对应的value值。很显然，不同线程中的数组是不同的，这就是为什么通过ThreadLocal可以在不同的线程中维护一套数据的副本并且彼此互不干扰。</p>
</blockquote>
<p><strong>下面看看ThreadLocal的内部具体实现</strong></p>
<blockquote>
<p>ThreadLocal是一个范型类，它的声明如下：</p>
</blockquote>
<pre><code>public class ThreadLocal&lt;T&gt;;
</code></pre><blockquote>
<p>从上面ThreadLocal的工作流程可以知道，要搞明白ThreadLocal，必须弄明白其内部的get和set方法</p>
</blockquote>
<ul>
<li><p>set方法</p>
<pre><code>/\*\*
   * Sets the value of this variable for the current thread. If set to
   * {@code null}, the value will be set to null and the underlying entry will
   * still be present.
   *
   * @param value the new value of the variable for the caller thread.
   */
  public void set(T value) {
      Thread currentThread = Thread.currentThread();
      Values values = values(currentThread);
      if (values == null) {
          values = initializeValues(currentThread);
      }
      values.put(this, value);
  }
</code></pre></li>
</ul>
<blockquote>
<p>首先，通过values方法来获取当前线程中的ThreadLocal数据Values。获取过程如下：在Thread类的内部有一个成员专门用于存储线程的ThreadLocal数据（ThreadLocal.Values  localValues），因此获取当前线程的ThreadLocal数据就很简单。如果localValues为null，就需要对其进行初始化，初始化后再将ThreadLocal的值进行存储。</p>
<p>下面看下ThreadLocal的值到底是如何在localValues中进行存储的，在localValues内部有一个数组：private Object[] table，ThreadLocal的值就存在这个table数组中。</p>
<p>下面看下localValues是如何使用put方法将ThreadLocal的值存储到table数组中的，如下：</p>
</blockquote>
<pre><code>/**
 * Sets entry for given ThreadLocal to given value, creating an
 * entry if necessary.
 */
 void put(ThreadLocal&lt;?&gt; key, Object value) {
       cleanUp();

       // Keep track of first tombstone. That&apos;s where we want to go back
       // and add an entry if necessary.
       int firstTombstone = -1;

       for (int index = key.hash &amp; mask;; index = next(index)) {
             Object k = table[index];

             if (k == key.reference) {
                    // Replace existing entry.
                    table[index + 1] = value;
                    return;
             }

             if (k == null) {
                    if (firstTombstone == -1) {
                        // Fill in null slot.
                        table[index] = key.reference;
                        table[index + 1] = value;
                        size++;
                        return;
                    }

                    // Go back and replace first tombstone.
                    table[firstTombstone] = key.reference;
                    table[firstTombstone + 1] = value;
                    tombstones--;
                    size++;
                    return;
             }

             // Remember first tombstone.
             if (firstTombstone == -1 &amp;&amp; k == TOMBSTONE) {
                    firstTombstone = index;
             }
        }
}
</code></pre><blockquote>
<p>上面的代码实现了数据的存储，这个不分析具体算法，但我们可以得出一个存储规则：</p>
</blockquote>
<p><strong>ThreadLocal的值在table数组中的存储位置总是为ThreadLocal的reference字段所标识的对象的下一个位置</strong></p>
<blockquote>
<p>比如ThreadLocal的reference对象table数组中的索引为index，那么ThreadLocal的值在table数组中的索引就是index+1。最终，ThreadLocal的值将会被存储在table数组中：table[index+1] = value.</p>
</blockquote>
<ul>
<li><p>get方法</p>
<pre><code>/\*\*
   * Returns the value of this variable for the current thread. If an entry
   * doesn&apos;t yet exist for this variable on this thread, this method will
   * create an entry, populating the value with the result of
   * {@link #initialValue()}.
   *
   * @return the current value of the variable for the calling thread.
   */
  @SuppressWarnings(&quot;unchecked&quot;)
  public T get() {
      // Optimized for the fast path.
      Thread currentThread = Thread.currentThread();
      Values values = values(currentThread);
      if (values != null) {
          Object[] table = values.table;
          int index = hash &amp; values.mask;
          if (this.reference == table[index]) {
              return (T) table[index + 1];
          }
      } else {
          values = initializeValues(currentThread);
      }

      return (T) values.getAfterMiss(this);
  }
</code></pre></li>
</ul>
<blockquote>
<p>同样是先取出当前线程的localValues对象，如果为null就返回初始值，初始值由ThreadLocal的initialValue方法描述，默认情况下为null，也可重写此方法。</p>
</blockquote>
<pre><code>/**
   * Provides the initial value of this variable for the current thread.
   * The default implementation returns {@code null}.
   *
   * @return the initial value of the variable.
   */
  protected T initialValue() {
      return null;
  }
</code></pre><blockquote>
<p>如果localValues对象不为null，那就取出它的table数组并找到ThreadLocal的reference对象在table数组中的位置，然后table数组中取下一个位置的数据就是ThreadLocal的值。</p>
<p>总结：从set和get方法可以看出，它们所操作的对象都是当前线程的localValues对象的table数组，因此在不同线程中访问同一个ThreadLocal的set和get方法，它们对ThreadLocal所做的读写操作都仅限于各自线程的内部，这就是为什么ThreadLocal可以在多个线程中互不干扰的存储和修改数据，理解ThreadLocal的实现方式有助于理解Looper的工作原理。</p>
</blockquote>
<h4 id="消息队列的工作原理"><a href="#消息队列的工作原理" class="headerlink" title="消息队列的工作原理"></a>消息队列的工作原理</h4><blockquote>
<p>MessageQueue （维护一个消息列表）主要包含两个操作：</p>
</blockquote>
<ul>
<li>插入</li>
</ul>
<blockquote>
<p>enqueueMessage：向MessageQueue中插入一条消息，底层实现就是单链表的插入操作。</p>
</blockquote>
<ul>
<li>读取(会伴随删除操作)</li>
</ul>
<blockquote>
<p>next：是一个无限循环的方法，如果MessageQueue中没有消息，该方法就会一直阻塞在这里；当有新消息到来时，就从MessageQueue中取出消息并将其从MessageQueue中删除。</p>
</blockquote>
<p><strong>MessageQueue内部实现不是队列，而是单链表（在插入和删除上有优势）</strong></p>
<h4 id="Looper的工作原理"><a href="#Looper的工作原理" class="headerlink" title="Looper的工作原理"></a>Looper的工作原理</h4><blockquote>
<p>Looper在Android的消息机制中扮演着消息循环的角色，它会不停的从MessageQueue中查看是否有新消息，有的话就立即处理，否则也会一直阻塞在那里。</p>
<p>首先，其在构造方法中创建一个MessageQueue，然后，将当前线程的对象保存起来，如下：</p>
</blockquote>
<pre><code>private Looper(boolean quitAllowed) {
        mQueue = new MessageQueue(quitAllowed);
        mThread = Thread.currentThread();
}
</code></pre><blockquote>
<p>Handler的工作需要Looper，没有Looper的线程就会报错，那如何为一个线程创建Looper呢？</p>
<p>Looper.prepare() 为当前线程创建一个Looper，Looper.loop()来开启消息循环，如下：</p>
</blockquote>
<pre><code>new Thread(&quot;Thread#2&quot;) {
        @Override
        public void run() {
            Looper.prepare();
            Handler handler = new Handler();
            Looper.loop();
        }
}.start();
</code></pre><blockquote>
<p>Looper除了prepare方法外，还提供了prepareMainLooper方法，其主要作用是给主线程也就是ActivityThread创建Looper时使用的，本质上也是通过prepare方法来实现的。主线程的Looper比较特殊，Looper提供了一个get MainLooper方法，其可以在任何地方获取主线程的Looper。</p>
<p>Looper也是可以退出的，Looper提供quit和quitSafely来退出一个Looper，二者区别是：quit会直接退出Looper，而quitSafely只是设定一个退出标识，然后等到MessageQueue中已有的消息处理完毕后才安全退出。</p>
<p>Looper退出后，通过Handler发送的消息会失败，这个时候Handler的send方法会返回false。</p>
<p>在子线程中，如果手动为其创建了Looper，那么在所有的事情完成以后应该调用quit方法来终止消息循环，否则这个子线程就会一直处于等待状态，而如果退出Looper以后，这个线程就会立刻终止，所以建议不需要的时候终止Looper。</p>
<p>Looper一个重要的方法是loop，只有调用了loop后，消息循环系统才会真正地起作用。loop方法是一个死循环，唯一跳出循环的方式就是MessageQueue的next方法返回了null。</p>
<p>当Looper的quit方法被调用时，Looper就会调用MessageQueue的quit或quitSafely方法来通知MessageQueue退出，当MessageQueue被标记为退出状态时，它的next方法就会返回null。也就是说Looper必须退出，否则loop方法就会无限循环下去。loop方法会调用MessageQueue的next方法来获取新消息，而next是一个阻塞操作，当没有消息时，next方法会一直阻塞在那里，也就导致loop方法一直阻塞在那里。如果MessageQueue的next方法返回了新消息，Looper就会处理这条消息：msg.target.dispatchMessage(msg), 这里的msg.target是发送这条消息的Handler对象，这样Handler发送的消息最终又交给它的dispatchMessage方法来处理了。但这里不同的是，Handler的dispatchMessage方法是在创建Handler时所使用的Looper中执行的，这样就成功的将代码逻辑切换到指定的线程中去执行了。</p>
</blockquote>
<h4 id="Handler的工作原理"><a href="#Handler的工作原理" class="headerlink" title="Handler的工作原理"></a>Handler的工作原理</h4><p><strong>Handler的工作主要包括：</strong></p>
<ul>
<li>消息的发送</li>
<li>消息的接收</li>
</ul>
<blockquote>
<p>通过post的一系列方法以及send的一系列方法来实现，post的一系列方法最终是通过send的一系列方法来实现的。</p>
</blockquote>
<pre><code>public final boolean sendMessage(Message msg) {
        return sendMessageDelayed(msg, 0);
}
public final boolean sendMessage(Message msg, long delayMillis) {
        if (delayMillis &lt; 0) {
            delayMillis = 0;
        }
        return sendMessageAtTime(msg,SystemClock.uptimeMillis() + delayMillis);
}
public final boolean sendMessageAtTime(Message msg, long uptimeMillis) {
        MessageQueue queue = mQueue;
        if (queue == null) {
            RuntimeExeception e = new RuntimeExeception(this + &quot; sendMessageAtTime() called with no mQueue&quot;)
            Log.w(&quot;Looper&quot;, e.getMessage(), e);
            return false;
        }
        return enqueueMessage(queue, msg, uptimeMillis)
}
private final boolean enqueueMessage(MessageQueue queue, Message msg, long uptimeMillis) {
        msg.target = this;
        if (mAsynchronous) {
            msg.setAsynchronous(true);
        }
        return queue.enqueueMessage(msg, uptimeMillis);
}
</code></pre><blockquote>
<p>Handler发送消息的过程仅仅是向MessageQueue中插入了一条消息，MessageQueue的next方法就会返回这条消息给Looper，Looper收到消息后就开始处理了，最终消息由Looper交由Handler处理，即Handler的dispatchMessage方法会被调用，这时Handler就进入了处理消息的阶段。</p>
<p>dispatchMessage的实现如下所示：</p>
</blockquote>
<pre><code>public void dispatchMessage(Message message) {
        if (msg.callback != null) {
            handleCallback(msg);
    } else {
        if (mCallback != null) {
            if (mCallback.handleMessage(msg)) {
                return;
            }
        }
        handleMessage(msg);
    }
}
</code></pre><blockquote>
<p>Handler处理消息的过程：</p>
</blockquote>
<ol>
<li><p>首先，检查Message的callback是否为空，不为null就通过handleCallback来处理消息。Message的callback是一个Runnable对象，实际上就是Handler的post方法所传递的Runnable参数。handleCallback的逻辑如下：</p>
<p> private static void handleCallback(Message msg) {</p>
<pre><code>msg.callback.run();
</code></pre><p> }</p>
</li>
<li><p>然后检查mCallback是否为null，不为null就调用mCallback的handleMessage方法处理消息。Callback是个接口，定义如下：</p>
<p> /**</p>
<ul>
<li>Callback interface you can use when instantiating a Handler to avoid having   to implement your own subclass of Handler.<br>* </li>
<li>@param msg A {@link android.os.Message Message} object</li>
<li>@return True if no further handling is desired<br>*/<br>public interface Callback {<br>  public boolean handleMessage(Message msg);<br>}</li>
</ul>
</li>
</ol>
<blockquote>
<p>通过Callback可以采用如下方式来创建Handler对象：Handler handler = new Handler(callback).</p>
<p>Callback存在的意义就是用来创建一个Handler的实例但并不需要派生Handler的子类。在日常开发中，创建Handler最常见的方式就是派生一个Handler的子类并重写其handleMessage方法来处理具体的消息，而Callback给我们提供了另外一种使用Handler的方式，当我们不想派生子类时，就可以通过Callback来实现。</p>
</blockquote>
<ol>
<li>最后，调用Handler的handleMessage方法来处理消息</li>
</ol>
<p><strong>Handler处理消息的过程可以用一个流程图来表示</strong>*<br><img src="http://o9zgq2ik9.bkt.clouddn.com/Handler%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.jpg" alt=""></p>
<blockquote>
<p>Handler还有一个特殊的构造方法，那就是通过一个特定的Looper来构造Handler，它的实现如下，通过此构造方法可以实现一些特殊的功能。</p>
</blockquote>
<pre><code>public Handler(Looper looper) {
        this(looper,null,false);
}
</code></pre><blockquote>
<p>Handler默认的构造方法为public Handler()，它会去调用下面的构造方法，很明显如果当前线程没有Looper的话，就会抛出“Can’t create handler inside thread that has not called Looper.prepare()” 这个异常，这也解释了在没有Looper的子线程中创建Handler会引发程序异常。</p>
</blockquote>
<pre><code>/**
   * Use the {@link Looper} for the current thread with the specified callback interface
   * and set whether the handler should be asynchronous.
   *
   * Handlers are synchronous by default unless this constructor is used to make
   * one that is strictly asynchronous.
   *
   * Asynchronous messages represent interrupts or events that do not require global ordering
   * with respect to synchronous messages.  Asynchronous messages are not subject to
   * the synchronization barriers introduced by {@link MessageQueue#enqueueSyncBarrier(long)}.
   *
   * @param callback The callback interface in which to handle messages, or null.
   * @param async If true, the handler calls {@link Message#setAsynchronous(boolean)} for
   * each {@link Message} that is sent to it or {@link Runnable} that is posted to it.
   *
   * @hide
   */
  public Handler(Callback callback, boolean async) {
      if (FIND_POTENTIAL_LEAKS) {
          final Class&lt;? extends Handler&gt; klass = getClass();
          if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;
                  (klass.getModifiers() &amp; Modifier.STATIC) == 0) {
              Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; +
                  klass.getCanonicalName());
          }
      }

      mLooper = Looper.myLooper();
      if (mLooper == null) {
          throw new RuntimeException(
              &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);
      }
      mQueue = mLooper.mQueue;
      mCallback = callback;
      mAsynchronous = async;
  }
</code></pre><h3 id="主线程的消息循环"><a href="#主线程的消息循环" class="headerlink" title="主线程的消息循环"></a>主线程的消息循环</h3><blockquote>
<p>Android的主线程就是ActivityThread，主线程的入口方法为main，在main方法中系统会通过Looper.prepareMainLooper()方法来创建主线程的Looper以及MessageQueue，并通过Looper.loop()来开启主线程的消息循环，过程如下：</p>
</blockquote>
<pre><code>public static void main(String[] args) {
        ...
        Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;);

    Looper.prepareMainLooper();

    ActivityThread thread = new ActivityThread();
    thread.attach(false);

    if (sMainThreadHandler == null) {
        sMainThreadHandler = thread.getHandler();
    }

    AsyncTask.init();

    if (false) {
        Looper.myLooper().setMessageLogging(new LogPrinter(Log,DEBUG, &quot;ActivityThread&quot;))
    }
    Looper.loop();

    throw new RuntimeExeception(&quot;Main thread loop unexpectedly exited&quot;);
}
</code></pre><blockquote>
<p>主线程的消息循环开始后，ActivityThread需要一个Handler和MessageQueue进行交互，这个Handler就是ActivityThread.H，它内部定义了一组消息类型，主要包括了四大组件的启动和停止等过程，如下：</p>
</blockquote>
<pre><code>private class H extends Handler {
        public static final int LAUNCH_ACTIVITY = 100;
        public static final int PAUSE_ACTIVITY = 101;
        public static final int PAUSE_ACTIVITY_FINSHING = 102;
        public static final int STOP_ACTIVITY_SHOW = 103;
    public static final int STOP_ACTIVITY_HIDE = 104;
    public static final int SHOW_WINDOW = 105;
    public static final int HIDE_WINDOW = 106;
    public static final int RESUME_ACTIVITY = 107;
    public static final int SEND_RESULT = 108;
    public static final int DESTROY_ACTIVITY = 109;
    public static final int BIND_APPLICATION = 110;
    public static final int EXIT_APPLICATION = 111;
    public static final int NEW_INTENT = 112;
    public static final int RECEIVER = 113;
    public static final int CREATE_SERVICE = 114;
    public static final int SERVICE_ARGS = 115;
    public static final int STOP_SERVICE = 116;

    ......
}
</code></pre><blockquote>
<p>ActivityThread通过ApplicationThread和AMS进行进程间通信，AMS以进程间通信的方式完成ActivityThread的请求后会回调ApplicationThread中的Binder方法，然后ApplicationThread会向H发送消息，H收到消息后会将ApplicationThread中的逻辑切换到ActivityThread中去执行，即切换到主线程中去执行，这个过程就是主线程的消息循环模型。</p>
</blockquote>
<p><strong>参考资料</strong><br>《Android开发艺术探索》 —  任玉刚</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Android消息机制&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handler是Android消息机制的上层接口，开发者
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Handler" scheme="http://yoursite.com/tags/Handler/"/>
    
      <category term="消息处理机制" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
      <category term="源码" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java中的ThreadLocal</title>
    <link href="http://yoursite.com/2016/10/04/Java%E4%B8%AD%E7%9A%84ThreadLocal/"/>
    <id>http://yoursite.com/2016/10/04/Java中的ThreadLocal/</id>
    <published>2016-10-04T02:17:24.000Z</published>
    <updated>2016-10-10T06:09:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>JDK 1.2开始提供Java.lang.ThreadLocal类，为解决多线程并发访问问题提供了一种新思路，使用这个工具类可以很简洁地编写出优美的多线程程序。<br>　　<br>用ThreadLocal维护变量，可以为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的变量副本，而不会影响其它线程所对应的变量副本。</p>
<p>从线程的角度看，目标变量就像是线程的本地变量，这也是类名中“Local”所要表达的意思。所以，在Java中编写线程局部变量的代码相对来说要笨拙一些，因此造成线程局部变量没有在Java开发者中得到很好的普及。</p>
</blockquote>
<p><strong>ThreadLocal的接口方法</strong></p>
<blockquote>
<p>ThreadLocal类接口很简单，只有4个方法：</p>
</blockquote>
<p>• void set(Object value) 设置当前线程的线程局部变量的值。<br>• public Object get() 该方法返回当前线程所对应的线程局部变量。<br>• public void remove() 将当前线程局部变量的值删除，目的是为了减少内存的占用，该方法是JDK 5.0新增的方法。需要指出的是，当线程结束后，对应该线程的局部变量将自动被垃圾回收，所以显式调用该方法清除线程的局部变量并不是必须的操作，但它可以加快内存回收的速度。<br>• protected Object initialValue() 返回该线程局部变量的初始值，该方法是一个protected的方法，显然是为了让子类覆盖而设计的。这个方法是一个延迟调用方法，在线程第1次调用get()或set(Object)时才执行，并且仅执行1次。ThreadLocal中的缺省实现直接返回一个null。</p>
<blockquote>
<p>值得一提的是，在JDK5.0中，ThreadLocal已经支持泛型，该类的类名已经变为ThreadLocal\<t\>。API方法也相应进行了调整，新版本的API方法分别是void set(T value)、T get()以及T initialValue()。</t\></p>
<p>ThreadLocal是如何做到为每一个线程维护变量的副本的呢？其实实现的思路很简单：在ThreadLocal类中有一个Map，用于存储每一个线程的变量副本，Map中元素的键为线程对象，而值对应线程的变量副本。</p>
</blockquote>
<p><strong>一个例子</strong></p>
<pre><code>public class TestNum {  
    // ①通过匿名内部类覆盖ThreadLocal的initialValue()方法，指定初始值  
    private static ThreadLocal&lt;Integer&gt; seqNum = new ThreadLocal&lt;Integer&gt;() {  
        public Integer initialValue() {  
            return 0;  
        }  
    };  
    // ②获取下一个序列值  
    public int getNextNum() {  
        seqNum.set(seqNum.get() + 1);  
        return seqNum.get();  
    }  
    public static void main(String[] args) {  
        TestNum sn = new TestNum();  
        // ③ 3个线程共享sn，各自产生序列号  
        TestClient t1 = new TestClient(sn);  
        TestClient t2 = new TestClient(sn);  
        TestClient t3 = new TestClient(sn);  
        t1.start();  
        t2.start();  
        t3.start();  
    }  
    private static class TestClient extends Thread {  
        private TestNum sn;  
        public TestClient(TestNum sn) {  
            this.sn = sn;  
        }  
        public void run() {  
            for (int i = 0; i &lt; 3; i++) {  
                // ④每个线程打出3个序列值  
                System.out.println(&quot;thread[&quot; + Thread.currentThread().getName() + &quot;] --&gt; sn[&quot;  
                         + sn.getNextNum() + &quot;]&quot;);  
            }  
        }  
    }  
} 
</code></pre><blockquote>
<p>通常我们通过匿名内部类的方式定义ThreadLocal的子类，提供初始的变量值，如例子中①处所示。TestClient线程产生一组序列号，在③处，我们生成3个TestClient，它们共享同一个TestNum实例。运行以上代码，在控制台上输出以下的结果：</p>
</blockquote>
<pre><code>thread[Thread-0] --&gt; sn[1]
thread[Thread-1] --&gt; sn[1]
thread[Thread-2] --&gt; sn[1]
thread[Thread-1] --&gt; sn[2]
thread[Thread-0] --&gt; sn[2]
thread[Thread-1] --&gt; sn[3]
thread[Thread-2] --&gt; sn[2]
thread[Thread-0] --&gt; sn[3]
thread[Thread-2] --&gt; sn[3]
</code></pre><blockquote>
<p>考察输出的结果信息，我们发现每个线程所产生的序号虽然都共享同一个TestNum实例，但它们并没有发生相互干扰的情况，而是各自产生独立的序列号，这是因为我们通过ThreadLocal为每一个线程提供了单独的副本。</p>
</blockquote>
<h3 id="Vs线程同步机制"><a href="#Vs线程同步机制" class="headerlink" title="Vs线程同步机制"></a>Vs线程同步机制</h3><blockquote>
<p>ThreadLocal和线程同步机制都是为了解决多线程中相同变量的访问冲突问题。</p>
</blockquote>
<ul>
<li>线程同步机制</li>
</ul>
<blockquote>
<p>线程同步机制是通过对象的锁机制保证同一时间只有一个线程访问变量。这时该变量是多个线程共享的，使用线程同步机制要求程序慎密地分析什么时候对变量进行读写，什么时候需要锁定某个对象，什么时候释放对象锁等繁杂的问题，程序设计和编写难度相对较大。</p>
</blockquote>
<ul>
<li>ThreadLocal机制</li>
</ul>
<blockquote>
<p>ThreadLocal为每一个线程提供一个独立的变量副本，从而隔离了多个线程对数据的访问冲突。每一个线程都拥有自己的变量副本，所以就没必要对该变量进行同步了。ThreadLocal提供了线程安全的共享对象，在编写多线程代码时，可以把不安全的变量封装进ThreadLocal。</p>
<p>由于ThreadLocal中可以持有任何类型的对象，低版本JDK所提供的get()返回的是Object对象，需要强制类型转换。但从JDK 5.0通过泛型很好的解决了这个问题，在一定程度地简化ThreadLocal的使用，上面的例子就使用了JDK 5.0新的ThreadLocal\<t\>版本。</t\></p>
</blockquote>
<ul>
<li>两者比较</li>
</ul>
<blockquote>
<p>概括起来说，对于多线程资源共享的问题，线程同步机制采用了“以时间换空间”的方式，而ThreadLocal采用了“以空间换时间”的方式。前者仅提供一份变量，让不同的线程排队访问，而后者为每一个线程都提供了一份变量，因此可以同时访问而互不影响。</p>
</blockquote>
<h3 id="ThreadLocal具体实现"><a href="#ThreadLocal具体实现" class="headerlink" title="ThreadLocal具体实现"></a>ThreadLocal具体实现</h3><blockquote>
<p>ThreadLocal类到底是如何实现这种“为每个线程提供不同的变量拷贝”的呢？先来看一下ThreadLocal的set()方法:</p>
</blockquote>
<pre><code>/** 
    * Sets the current thread&apos;s copy of this thread-local variable 
    * to the specified value.  Most subclasses will have no need to 
    * override this method, relying solely on the {@link #initialValue} 
    * method to set the values of thread-locals. 
    * 
    * @param value the value to be stored in the current thread&apos;s copy of 
    *        this thread-local. 
    */  
   public void set(T value) {  
       Thread t = Thread.currentThread();  
       ThreadLocalMap map = getMap(t);  
       if (map != null)  
           map.set(this, value);  
       else  
           createMap(t, value);  
   } 
</code></pre><blockquote>
<p>首先，通过getMap(Thread t)方法获取一个和当前线程相关的ThreadLocalMap；然后，将变量的值设置到这个ThreadLocalMap对象中，当然如果获取到的ThreadLocalMap对象为空，就通过createMap方法创建。</p>
<p>线程隔离的秘密就在于ThreadLocalMap类，ThreadLocalMap是ThreadLocal类的一个静态内部类，它实现了键值对的设置和获取（对比Map对象来理解），每个线程中都有一个独立的ThreadLocalMap副本，它所存储的值，只能被当前线程读取和修改。ThreadLocal类通过操作每一个线程特有的ThreadLocalMap副本，从而实现了变量访问在不同线程中的隔离。因为每个线程的变量都是自己特有的，完全不会有并发错误。还有一点就是，ThreadLocalMap存储的键值对中的键是this对象指向的ThreadLocal对象，而值就是你所设置的对象了。</p>
<p>为了加深理解，我们接着看上面代码中出现的getMap和createMap方法的实现：</p>
</blockquote>
<pre><code>/** 
 * Get the map associated with a ThreadLocal. Overridden in 
 * InheritableThreadLocal. 
 * 
 * @param  t the current thread 
 * @return the map 
 */  
ThreadLocalMap getMap(Thread t) {  
    return t.threadLocals;  
}  

/** 
 * Create the map associated with a ThreadLocal. Overridden in 
 * InheritableThreadLocal. 
 * 
 * @param t the current thread 
 * @param firstValue value for the initial entry of the map 
 * @param map the map to store. 
 */  
void createMap(Thread t, T firstValue) {  
    t.threadLocals = new ThreadLocalMap(this, firstValue);  
}  
</code></pre><blockquote>
<p>接下来再看一下ThreadLocal类中的get()方法:</p>
</blockquote>
<pre><code>/** 
 * Returns the value in the current thread&apos;s copy of this 
 * thread-local variable.  If the variable has no value for the 
 * current thread, it is first initialized to the value returned 
 * by an invocation of the {@link #initialValue} method. 
 * 
 * @return the current thread&apos;s value of this thread-local 
 */  
public T get() {  
    Thread t = Thread.currentThread();  
    ThreadLocalMap map = getMap(t);  
    if (map != null) {  
        ThreadLocalMap.Entry e = map.getEntry(this);  
        if (e != null)  
            return (T)e.value;  
    }  
    return setInitialValue();  
}  
</code></pre><blockquote>
<p>再来看setInitialValue()方法：</p>
</blockquote>
<pre><code>/** 
    * Variant of set() to establish initialValue. Used instead 
    * of set() in case user has overridden the set() method. 
    * 
    * @return the initial value 
    */  
   private T setInitialValue() {  
       T value = initialValue();  
       Thread t = Thread.currentThread();  
       ThreadLocalMap map = getMap(t);  
       if (map != null)  
           map.set(this, value);  
       else  
           createMap(t, value);  
       return value;  
   }  
</code></pre><blockquote>
<p>获取和当前线程绑定的值时，ThreadLocalMap对象是以this指向的ThreadLocal对象为键进行查找的，这当然和前面set()方法的代码是相呼应的。</p>
<p>进一步地，我们可以创建不同的ThreadLocal实例来实现多个变量在不同线程间的访问隔离，为什么可以这么做？因为不同的ThreadLocal对象作为不同键，当然也可以在线程的ThreadLocalMap对象中设置不同的值了。通过ThreadLocal对象，在多线程中共享一个值和多个值的区别，就像你在一个HashMap对象中存储一个键值对和多个键值对一样，仅此而已。</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>ThreadLocal是解决线程安全问题一个很好的思路，它通过为每个线程提供一个独立的变量副本解决了变量并发访问的冲突问题。在很多情况下，ThreadLocal比直接使用synchronized同步机制解决线程安全问题更简单，更方便，且结果程序拥有更高的并发性。</p>
</blockquote>
<p><strong>一个是锁机制进行时间换空间，一个是存储拷贝进行空间换时间。</strong></p>
<p><strong>参考资料</strong><br><a href="http://blog.csdn.net/lufeng20/article/details/24314381" target="_blank" rel="external">博文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JDK 1.2开始提供Java.lang.ThreadLocal类，为解决多线程并发访问问题提供了一种新思路，使用
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="ThreadLocal" scheme="http://yoursite.com/tags/ThreadLocal/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android事件分发机制</title>
    <link href="http://yoursite.com/2016/10/01/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2016/10/01/Android事件分发机制/</id>
    <published>2016-10-01T01:54:33.000Z</published>
    <updated>2016-10-10T06:08:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ViewGroup是一组View的集合，它包含很多的子View和子ViewGroup，是Android中所有布局的父类或间接父类，像LinearLayout、RelativeLayout等都是继承自ViewGroup的。但ViewGroup实际上也是一个View，只不过比起View，它多了可以包含子View和定义布局参数的功能。这里按照View和ViewGroup两种情况去分析，其中，View特指不是容器的组件，而ViewGroup则是一个容器，里面可以包含前者的非容器View和ViewGroup。</strong></p>
<ul>
<li>View 的事件分发</li>
<li>ViewGroup 的事件分发</li>
<li>总结</li>
</ul>
<hr>
<h2 id="View-的事件分发"><a href="#View-的事件分发" class="headerlink" title="View 的事件分发"></a>View 的事件分发</h2><blockquote>
<p>定义一个Activity，其布局中只有一个按钮，并给按钮注册一个点击事件，如下：</p>
</blockquote>
<pre><code>button.setOnClickListener(new OnClickListener() {  
    @Override  
    public void onClick(View v) {  
        Log.d(&quot;TAG&quot;, &quot;onClick execute&quot;);  
    }  
});
</code></pre><blockquote>
<p>按钮被点击，onClick方法执行。然后再给按钮再添加一个touch事件，如下：</p>
</blockquote>
<pre><code>button.setOnTouchListener(new OnTouchListener() {  
    @Override  
    public boolean onTouch(View v, MotionEvent event) {  
        Log.d(&quot;TAG&quot;, &quot;onTouch execute, action &quot; + event.getAction());  
        return false;  
    }  
});  
</code></pre><blockquote>
<p>onTouch方法能够执行的逻辑要更复杂一些，如判断手指按下、抬起、移动等事件。</p>
</blockquote>
<p><strong>问题来了，哪一个会先执行呢？</strong></p>
<blockquote>
<p>运行程序点击按钮，打印结果如下：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20130614230234671" alt=""></p>
<blockquote>
<p>结果证明：onTouch是优先于onClick执行，并且onTouch执行了两次，一次是ACTION_DOWN，一次是ACTION_UP(你还可能会有多次ACTION_MOVE的执行，如果你手抖了一下)。</p>
<p>因此事件传递的顺序是先经过onTouch，再传递到onClick。</p>
</blockquote>
<p><strong>为什么会这样？</strong></p>
<blockquote>
<p>查看onTouch方法，发现其有返回值的，上面返回的是false。</p>
</blockquote>
<p><strong>如果返回true呢？</strong></p>
<blockquote>
<p>再次运行，结果如下：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20130614231001468" alt=""></p>
<blockquote>
<p>onClick方法不再执行了！为什么会这样呢？</p>
<p>可以暂时理解成onTouch方法返回true就认为这个事件被onTouch消费掉了，因而不会再继续向下传递。</p>
<p>当然，我们不会仅仅满足于此，让我们深层次的去看看出现上述现象的原理到底是什么？</p>
<p>首先，你触摸到了任何控件，那一定会调用该控件的dispatchTouchEvent方法。当点击按钮的时，就会去调用Button的dispatchTouchEvent方法，可Button里没有这个方法，那就去它父类TextView里找，发现TextView也没有，继续在TextView的父类View里找，Bingo，终于找到了。</p>
<p>然后，重点来了，看一下View中dispatchTouchEvent方法的源码吧！</p>
</blockquote>
<pre><code>public boolean dispatchTouchEvent(MotionEvent event) {  
    if (mOnTouchListener != null &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp;  
            mOnTouchListener.onTouch(this, event)) {  
        return true;  
    }  
    return onTouchEvent(event);  
}  
</code></pre><blockquote>
<p>简洁，只有几行代码！先是一个判断，如果mOnTouchListener != null，(mViewFlags &amp; ENABLED_MASK) == ENABLED和mOnTouchListener.onTouch(this, event)这三个条件都为真，就返回true，否则就去执行onTouchEvent(event)方法并返回。_</p>
<p>第一个条件，mOnTouchListener变量是在哪赋值的呢？寻找之后在View里发现了如下方法：</p>
</blockquote>
<pre><code>public void setOnTouchListener(OnTouchListener l) {  
    mOnTouchListener = l;  
}  
</code></pre><blockquote>
<p>Bingo！mOnTouchListener是在这里赋值的，也就是说，只要给控件注册了touch事件，mOnTouchListener就一定被赋值了，也就不为null了。</p>
<p>第二个条件，(mViewFlags &amp; ENABLED_MASK) == ENABLED，判断当前点击的控件是否是enable的，按钮默认都是enable的，因此这个条件恒定为true。_</p>
<p>第三个条件，mOnTouchListener.onTouch(this, event)，关键点，回调控件注册touch事件时的onTouch方法。如果在onTouch方法里返回true，这三个条件全部成立，从而整个方法直接返回true。如果在onTouch方法里返回false，就会再去执行onTouchEvent(event)方法。</p>
<p>结合前面的例子综合分析一下，先在dispatchTouchEvent中最先执行的是onTouch方法，因此onTouch要先于onClick执行，也印证了刚刚的打印结果。而如果在onTouch方法里返回了true，就会让dispatchTouchEvent方法直接返回true，不会再继续往下执行。而打印结果也证实了如果onTouch返回true，其onTouchEvent(event)方法也就不再执行了， onClick也就不会再执行了(后面我们知道，onClick方法就是在onTouchEvent(event)方法里执行的)。</p>
<p>根据以上分析，从原理上解释了前面例子的运行结果。那我们就来看下onTouchEvent的源码，看看onClick方法是不是真的在里面，如下所示：</p>
</blockquote>
<pre><code>1.  public boolean onTouchEvent(MotionEvent event) {  
2.      final int viewFlags = mViewFlags;  
3.      if ((viewFlags &amp; ENABLED_MASK) == DISABLED) {  
4.          // A disabled view that is clickable still consumes the touch  
5.          // events, it just doesn&apos;t respond to them.  
6.          return (((viewFlags &amp; CLICKABLE) == CLICKABLE ||  
7.                  (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE));  
8.      }  
9.      if (mTouchDelegate != null) {  
10.         if (mTouchDelegate.onTouchEvent(event)) {  
11.             return true;  
12.         }  
13.     }  
14.     if (((viewFlags &amp; CLICKABLE) == CLICKABLE ||  
15.             (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) {  
16.         switch (event.getAction()) {  
17.             case MotionEvent.ACTION_UP:  
18.                 boolean prepressed = (mPrivateFlags &amp; PREPRESSED) != 0;  
19.                 if ((mPrivateFlags &amp; PRESSED) != 0 || prepressed) {  
20.                     // take focus if we don&apos;t have it already and we should in  
21.                     // touch mode.  
22.                     boolean focusTaken = false;  
23.                     if (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) {  
24.                         focusTaken = requestFocus();  
25.                     }  
26.                     if (!mHasPerformedLongPress) {  
27.                         // This is a tap, so remove the longpress check  
28.                         removeLongPressCallback();  
29.                         // Only perform take click actions if we were in the pressed state  
30.                         if (!focusTaken) {  
31.                             // Use a Runnable and post this rather than calling  
32.                             // performClick directly. This lets other visual state  
33.                             // of the view update before click actions start.  
34.                             if (mPerformClick == null) {  
35.                                 mPerformClick = new PerformClick();  
36.                             }  
37.                             if (!post(mPerformClick)) {  
38.                                 performClick();  
39.                             }  
40.                         }  
41.                     }  
42.                     if (mUnsetPressedState == null) {  
43.                         mUnsetPressedState = new UnsetPressedState();  
44.                     }  
45.                     if (prepressed) {  
46.                         mPrivateFlags |= PRESSED;  
47.                         refreshDrawableState();  
48.                         postDelayed(mUnsetPressedState,  
49.                                 ViewConfiguration.getPressedStateDuration());  
50.                     } else if (!post(mUnsetPressedState)) {  
51.                         // If the post failed, unpress right now  
52.                         mUnsetPressedState.run();  
53.                     }  
54.                     removeTapCallback();  
55.                 }  
56.                 break;  
57.             case MotionEvent.ACTION_DOWN:  
58.                 if (mPendingCheckForTap == null) {  
59.                     mPendingCheckForTap = new CheckForTap();  
60.                 }  
61.                 mPrivateFlags |= PREPRESSED;  
62.                 mHasPerformedLongPress = false;  
63.                 postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());  
64.                 break;  
65.             case MotionEvent.ACTION_CANCEL:  
66.                 mPrivateFlags &amp;= ~PRESSED;  
67.                 refreshDrawableState();  
68.                 removeTapCallback();  
69.                 break;  
70.             case MotionEvent.ACTION_MOVE:  
71.                 final int x = (int) event.getX();  
72.                 final int y = (int) event.getY();  
73.                 // Be lenient about moving outside of buttons  
74.                 int slop = mTouchSlop;  
75.                 if ((x &lt; 0 - slop) || (x &gt;= getWidth() + slop) ||  
76.                         (y &lt; 0 - slop) || (y &gt;= getHeight() + slop)) {  
77.                     // Outside button  
78.                     removeTapCallback();  
79.                     if ((mPrivateFlags &amp; PRESSED) != 0) {  
80.                         // Remove any future long press/tap checks  
81.                         removeLongPressCallback();  
82.                         // Need to switch from pressed to not pressed  
83.                         mPrivateFlags &amp;= ~PRESSED;  
84.                         refreshDrawableState();  
85.                     }  
86.                 }  
87.                 break;  
88.         }  
89.         return true;  
90.     }  
91.     return false;  
92. } 
</code></pre><p><strong>比较长，挑重点看</strong></p>
<blockquote>
<p>在第14行我们可以看出，如果该控件是可以点击的就会进入到第16行的switch判断中去，而如果当前的事件是抬起手指，则会进入到MotionEvent.ACTION_UP这个case当中。在经过种种判断之后，会执行到第38行的performClick()方法，那就看看这个方法：_</p>
</blockquote>
<pre><code>public boolean performClick() {  
    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);  
    if (mOnClickListener != null) {  
        playSoundEffect(SoundEffectConstants.CLICK);  
        mOnClickListener.onClick(this);  
        return true;  
    }  
    return false;  
} 
</code></pre><p><strong>舒服多了</strong></p>
<blockquote>
<p>看到mOnClickListener.onClick(this)，我们就更开心了，只要mOnClickListener不是null，就会去调用它，那mOnClickListener又是在哪里赋值的呢？看下面：</p>
</blockquote>
<pre><code>public void setOnClickListener(OnClickListener l) {  
    if (!isClickable()) {  
        setClickable(true);  
    }  
    mOnClickListener = l;  
}  
</code></pre><blockquote>
<p>一切都清楚了！当调用setOnClickListener方法来给控件注册一个点击事件时，就会给mOnClickListener赋值。然后每当控件被点击时，都会在performClick()方法里回调被点击控件的onClick方法。</p>
<p>整个事件分发的流程似乎就这样要结束了，不，还有一个要重点说明的是touch事件的层级传递。如果给一个控件注册了touch事件，每次点击它的时候都会触发一系列的ACTION_DOWN，ACTION_MOVE，ACTION_UP等事件，简称为事件流，请注意，如果你在执行ACTION_DOWN的时候返回了false，那么这个事件流就会被中断执行。简单的说，就是当dispatchTouchEvent在进行事件分发的时候，只有前一个action事件返回true，才会触发后一个action 事件。</p>
</blockquote>
<p><strong>这不是自相矛盾吗？</strong></p>
<blockquote>
<p>前面的例子中，明明在onTouch事件里面返回了false，ACTION_DOWN和ACTION_UP不是都得到执行了吗？其实你只是被假象所迷惑了，仔细分析一下代码，就会知道在前面的例子当中，我们到底返回的是什么。首先在onTouch事件里返回了false，就一定会进入到onTouchEvent方法中，然后我们来看一下onTouchEvent方法的细节。_由于点击了按钮且按钮是可点击的_，就会进入到第14行这个if判断的内部，然后你会发现，不管当前的action是什么，最终都一定会走到第89行，返回一个true。</p>
</blockquote>
<p><strong>是不是有一种被欺骗的感觉？</strong></p>
<blockquote>
<p>明明在onTouch事件里返回了false，系统还是在onTouchEvent方法中帮你返回了true。就因为这个原因，才使得前面的例子中ACTION_UP可以得到执行。_</p>
<p>我们可以换一个控件，将按钮替换成ImageView，然后给它也注册一个touch事件，并返回false。如下所示：</p>
</blockquote>
<pre><code>imageView.setOnTouchListener(new OnTouchListener() {  
    @Override  
    public boolean onTouch(View v, MotionEvent event) {  
        Log.d(&quot;TAG&quot;, &quot;onTouch execute, action &quot; + event.getAction());  
        return false;  
    }  
});  
</code></pre><blockquote>
<p>运行程序，点击ImageView，结果如下</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20130617193504328" alt=""></p>
<blockquote>
<p>在ACTION_DOWN执行完后，后面的一系列action事件都不会得到执行了。这又是为什么呢？因为ImageView和按钮不同，它是默认不可点击的，因此在onTouchEvent的第14行判断时无法进入到if的内部，直接跳到第91行返回了false，也就导致后面其它的action都无法执行了。View的事件分发，就到这里。</p>
</blockquote>
<hr>
<h2 id="ViewGroup的事件分发"><a href="#ViewGroup的事件分发" class="headerlink" title="ViewGroup的事件分发"></a>ViewGroup的事件分发</h2><blockquote>
<p>首先，自定义一个布局为MyLayout，继承自LinearLayout，如下：</p>
</blockquote>
<pre><code>public class MyLayout extends LinearLayout {  
    public MyLayout(Context context, AttributeSet attrs) {  
        super(context, attrs);  
    }  
}  
</code></pre><blockquote>
<p>然后，打开布局文件activity_main.xml，在其中加入自定义的布局MyLayout，如下：</p>
</blockquote>
<pre><code>&lt;com.example.viewgrouptouchevent.MyLayout 
        xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;  
    xmlns:tools=&quot;http://schemas.android.com/tools&quot;  
    android:id=&quot;@+id/my_layout&quot;  
    android:layout_width=&quot;match_parent&quot;  
    android:layout_height=&quot;match_parent&quot;  
    android:orientation=&quot;vertical&quot; &gt;  
    &lt;Button  
        android:id=&quot;@+id/button1&quot;  
        android:layout_width=&quot;match_parent&quot;  
        android:layout_height=&quot;wrap_content&quot;  
        android:text=&quot;Button1&quot; /&gt;  
    &lt;Button  
        android:id=&quot;@+id/button2&quot;  
        android:layout_width=&quot;match_parent&quot;  
        android:layout_height=&quot;wrap_content&quot;  
        android:text=&quot;Button2&quot; /&gt;  
&lt;/com.example.viewgrouptouchevent.MyLayout&gt;  
</code></pre><blockquote>
<p>在MyLayout中添加了两个按钮，最后在MainActivity中为这两个按钮和MyLayout注册监听事件：</p>
</blockquote>
<pre><code>myLayout.setOnTouchListener(new OnTouchListener() {  
    @Override  
    public boolean onTouch(View v, MotionEvent event) {  
        Log.d(&quot;TAG&quot;, &quot;myLayout on touch&quot;);  
        return false;  
    }  
});  
button1.setOnClickListener(new OnClickListener() {  
    @Override  
    public void onClick(View v) {  
        Log.d(&quot;TAG&quot;, &quot;You clicked button1&quot;);  
    }  
});  
button2.setOnClickListener(new OnClickListener() {  
    @Override  
    public void onClick(View v) {  
        Log.d(&quot;TAG&quot;, &quot;You clicked button2&quot;);  
    }  
});  
</code></pre><blockquote>
<p>运行项目，分别点击一下Button1、Button2和空白区域，打印结果如下：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20130629144048875?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2lueXU4OTA4MDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<blockquote>
<p>当点击按钮的时，MyLayout注册的onTouch方法并不会执行，只有点击空白区域的时候才会执行该方法。可以先暂时理解成Button的onClick方法将事件消费掉了，因此事件不会再继续向下传递。</p>
<p>Android中的touch事件是先传递到View，再传递到ViewGroup的？</p>
</blockquote>
<p><strong>结论下的太早，做个实验</strong></p>
<blockquote>
<p>ViewGroup中有一个onInterceptTouchEvent方法，我们来看一下这个方法的源码：</p>
</blockquote>
<pre><code>public boolean onInterceptTouchEvent(MotionEvent ev) {  
    return false;  
} 
</code></pre><p><strong>还是这么短(注释已略去)</strong></p>
<blockquote>
<p>只有一行代码，返回一个false！既然是布尔型的返回，那么只有两种可能，我们在MyLayout中重写这个方法，然后分布返回一个true和false试试，代码如下所示：</p>
</blockquote>
<pre><code>public class MyLayout extends LinearLayout {  
    public MyLayout(Context context, AttributeSet attrs) {  
        super(context, attrs);  
    }  
    @Override  
    public boolean onInterceptTouchEvent(MotionEvent ev) {  
        return true;  
    }  
}  
</code></pre><blockquote>
<p>运行项目，分别Button1、Button2和空白区域，打印结果如下：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20130629145544984?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2lueXU4OTA4MDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<blockquote>
<p>奇怪了，不管点哪里，永远都只会触发MyLayout的touch事件了，按钮的点击事件完全被屏蔽掉了！</p>
</blockquote>
<p><strong>这是为什么？</strong></p>
<blockquote>
<p>如果Android中的touch事件是先传递到View，再传递到ViewGroup的，那么MyLayout又怎么可能屏蔽掉Button的点击事件呢？</p>
<p>看来只有通过源码，才能搞清Android中ViewGroup的事件分发机制，解决心中疑惑，不过结论一定是：<strong>Android中touch事件的传递，绝对是先传递到ViewGroup，再传递到View的。</strong></p>
<p>在上一小节中，我们说过只要你触摸了任何控件，就一定会调用该控件的dispatchTouchEvent方法。这个说法没错，只不过还不完整而已。实际是，当你点击了某个控件，首先会去调用该控件所在布局的dispatchTouchEvent方法，然后在布局的dispatchTouchEvent方法中找到被点击的相应控件，再去调用该控件的dispatchTouchEvent方法。如果我们点击了MyLayout中的按钮，会先去调用MyLayout的dispatchTouchEvent方法，可是你会发现MyLayout中并没有这个方法，那就去到它的父类LinearLayout中找，发现也没有这个方法，那就继续再找LinearLayout的父类ViewGroup，终于在ViewGroup中看到了这个方法，按钮的dispatchTouchEvent方法就是在这里调用的。</p>
<p>ViewGroup中的dispatchTouchEvent方法的源码如下：</p>
</blockquote>
<pre><code>1.  public boolean dispatchTouchEvent(MotionEvent ev) {  
2.      final int action = ev.getAction();  
3.      final float xf = ev.getX();  
4.      final float yf = ev.getY();  
5.      final float scrolledXFloat = xf + mScrollX;  
6.      final float scrolledYFloat = yf + mScrollY;  
7.      final Rect frame = mTempRect;  
8.      boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;  
9.      if (action == MotionEvent.ACTION_DOWN) {  
10.         if (mMotionTarget != null) {  
11.             mMotionTarget = null;  
12.         }  
13.         if (disallowIntercept || !onInterceptTouchEvent(ev)) {  
14.             ev.setAction(MotionEvent.ACTION_DOWN);  
15.             final int scrolledXInt = (int) scrolledXFloat;  
16.             final int scrolledYInt = (int) scrolledYFloat;  
17.             final View[] children = mChildren;  
18.             final int count = mChildrenCount;  
19.             for (int i = count - 1; i &gt;= 0; i--) {  
20.                 final View child = children[i];  
21.                 if ((child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE  
22.                         || child.getAnimation() != null) {  
23.                     child.getHitRect(frame);  
24.                     if (frame.contains(scrolledXInt, scrolledYInt)) {  
25.                         final float xc = scrolledXFloat - child.mLeft;  
26.                         final float yc = scrolledYFloat - child.mTop;  
27.                         ev.setLocation(xc, yc);  
28.                         child.mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;  
29.                         if (child.dispatchTouchEvent(ev))  {  
30.                             mMotionTarget = child;  
31.                             return true;  
32.                         }  
33.                     }  
34.                 }  
35.             }  
36.         }  
37.     }  
38.     boolean isUpOrCancel = (action == MotionEvent.ACTION_UP) ||  
39.             (action == MotionEvent.ACTION_CANCEL);  
40.     if (isUpOrCancel) {  
41.         mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;  
42.     }  
43.     final View target = mMotionTarget;  
44.     if (target == null) {  
45.         ev.setLocation(xf, yf);  
46.         if ((mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != 0) {  
47.             ev.setAction(MotionEvent.ACTION_CANCEL);  
48.             mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;  
49.         }  
50.         return super.dispatchTouchEvent(ev);  
51.     }  
52.     if (!disallowIntercept &amp;&amp; onInterceptTouchEvent(ev)) {  
53.         final float xc = scrolledXFloat - (float) target.mLeft;  
54.         final float yc = scrolledYFloat - (float) target.mTop;  
55.         mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;  
56.         ev.setAction(MotionEvent.ACTION_CANCEL);  
57.         ev.setLocation(xc, yc);  
58.         if (!target.dispatchTouchEvent(ev)) {  
59.         }  
60.         mMotionTarget = null;  
61.         return true;  
62.     }  
63.     if (isUpOrCancel) {  
64.         mMotionTarget = null;  
65.     }  
66.     final float xc = scrolledXFloat - (float) target.mLeft;  
67.     final float yc = scrolledYFloat - (float) target.mTop;  
68.     ev.setLocation(xc, yc);  
69.     if ((target.mPrivateFlags &amp; CANCEL_NEXT_UP_EVENT) != 0) {  
70.         ev.setAction(MotionEvent.ACTION_CANCEL);  
71.         target.mPrivateFlags &amp;= ~CANCEL_NEXT_UP_EVENT;  
72.         mMotionTarget = null;  
73.     }  
74.     return target.dispatchTouchEvent(ev);  
75. }  
</code></pre><p><strong>挑重点看</strong></p>
<blockquote>
<p>首先，在第13行处有一个条件判断，如果disallowIntercept和!onInterceptTouchEvent(ev)两者有一个为true，就会进入到这个条件判断中。disallowIntercept是指是否禁用掉事件拦截的功能，默认是false，也可以通过调用requestDisallowInterceptTouchEvent方法对这个值进行修改。那么当第一个值为false的时候就会完全依赖第二个值来决定是否可以进入到条件判断的内部，第二个值是什么呢？竟然就是对onInterceptTouchEvent方法的返回值取反！也就是说如果我们在onInterceptTouchEvent方法中返回false，就会让第二个值为true，从而进入到条件判断的内部，如果我们在onInterceptTouchEvent方法中返回true，就会让第二个值为false，从而跳出了这个条件判断。</p>
<p>由于我们在MyLayout中重写了onInterceptTouchEvent方法，让这个方法返回true，导致所有按钮的点击事件都被屏蔽了，那我们就完全有理由相信，按钮点击事件的处理就是在第13行条件判断的内部进行的！那重点看下条件判断的内部是怎么实现的。在第19行通过一个for循环，遍历了当前ViewGroup下的所有子View，然后在第24行判断当前遍历的View是不是正在点击的View，如果是的话就会进入到该条件判断的内部，然后在第29行调用了该View的dispatchTouchEvent，之后就是上节讲的View的事件分发了。</p>
<p>然后需要注意，调用子View的dispatchTouchEvent后是有返回值的。我们已经知道，如果一个控件是可点击的，那么点击该控件时，dispatchTouchEvent的返回值必定是true。因此会导致第29行的条件判断成立，于是在第31行给ViewGroup的dispatchTouchEvent方法直接返回了true。这样就导致后面的代码无法执行到了，也是印证了我们前面的Demo打印的结果，如果按钮的点击事件得到执行，就会把MyLayout的touch事件拦截掉。</p>
<p>如果我们点击的不是按钮，而是空白区域呢？这种情况就一定不会在第31行返回true了，而是会继续执行后面的代码。那我们继续往后看，在第44行，如果target等于null，就会进入到该条件判断内部，这里一般情况下target都会是null，因此会在第50行调用super.dispatchTouchEvent(ev)。这句代码会调用到哪里呢？当然是View中的dispatchTouchEvent方法了，因为ViewGroup的父类就是View。之后的处理逻辑又和前面所说的是一样的了，也因此MyLayout中注册的onTouch方法会得到执行。之后的代码在一般情况下是走不到的了，我们也就不再继续往下分析。</p>
<p>ViewGroup事件分发过程的流程图如下：</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20130629200236578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2lueXU4OTA4MDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<blockquote>
<p>现在整个ViewGroup的事件分发流程的分析也就到此结束了，我们最后再来简单梳理一下吧。</p>
</blockquote>
<ol>
<li>Android事件分发是先传递到ViewGroup，再由ViewGroup传递到View的。</li>
<li>在ViewGroup中可以通过onInterceptTouchEvent方法对事件传递进行拦截，onInterceptTouchEvent方法返回true代表不允许事件继续向子View传递，返回false代表不对事件进行拦截，默认返回false。</li>
<li>子View中如果将传递的事件消费掉，ViewGroup中将无法接收到任何事件。</li>
</ol>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>onTouch和onTouchEvent区别，如何使用？</li>
</ol>
<blockquote>
<p>这两个方法都是在View的dispatchTouchEvent中调用的，onTouch先于onTouchEvent执行。如果在onTouch方法中通过返回true将事件消费掉，onTouchEvent将不会再执行。另外需要注意的是，onTouch能够得到执行需要两个前提条件，第一，mOnTouchListener的值不能为空，第二，当前点击的控件必须是enable的。因此如果你有一个控件是非enable的，那么给它注册onTouch事件将永远得不到执行。对于这一类控件，如果我们想要监听它的touch事件，就必须通过在该控件中重写onTouchEvent方法来实现。</p>
</blockquote>
<ol>
<li>为什么给ListView引入了一个滑动菜单的功能，ListView就不能滚动了？</li>
</ol>
<blockquote>
<blockquote>
<p>滑动菜单的功能是通过给ListView注册了一个touch事件来实现的。如果你在onTouch方法里处理完了滑动逻辑后返回true，那么ListView本身的滚动事件就被屏蔽了，自然也就无法滑动，因此解决办法就是在onTouch方法里返回false。</p>
</blockquote>
</blockquote>
<ol>
<li>为什么图片轮播器里的图片使用Button而不用ImageView？</li>
</ol>
<blockquote>
<p>因为Button是可点击的，而ImageView是不可点击的。如果想要使用ImageView，可以有两种改法。第一，在ImageView的onTouch方法里返回true，这样可以保证ACTION_DOWN之后的其它action都能得到执行，才能实现图片滚动的效果。第二，在布局文件里面给ImageView增加一个android:clickable=”true”的属性，这样ImageView变成可点击的之后，即使在onTouch里返回了false，ACTION_DOWN之后的其它action也是可以得到执行的。</p>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a><strong>参考</strong></h3><p><a href="http://blog.csdn.net/sinyu890807/article/details/9097463" target="_blank" rel="external">http://blog.csdn.net/sinyu890807/article/details/9097463</a><br><a href="http://blog.csdn.net/sinyu890807/article/details/9153747" target="_blank" rel="external">http://blog.csdn.net/sinyu890807/article/details/9153747</a><br>《Android开发艺术探索》—— <a href="http://blog.csdn.net/singwhatiwanna" target="_blank" rel="external">任玉刚</a><br>《Android群英传》——<a href="http://blog.csdn.net/eclipsexys" target="_blank" rel="external"> 徐宜生</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;ViewGroup是一组View的集合，它包含很多的子View和子ViewGroup，是Android中所有布局的父类或间接父类，像LinearLayout、RelativeLayout等都是继承自ViewGroup的。但ViewGroup实际上也是一个Vi
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="事件分发" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Android消息处理机制 — 实用易懂(1)</title>
    <link href="http://yoursite.com/2016/08/05/Android%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%20%E2%80%94%20%E5%AE%9E%E7%94%A8%E6%98%93%E6%87%82(1)/"/>
    <id>http://yoursite.com/2016/08/05/Android消息处理机制 — 实用易懂(1)/</id>
    <published>2016-08-05T09:40:41.000Z</published>
    <updated>2016-10-10T06:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="四个核心类"><a href="#四个核心类" class="headerlink" title="四个核心类"></a>四个核心类</h3><ul>
<li>Looper </li>
<li>Handler </li>
<li>Message </li>
<li>MessageQueue(MQ被封装到Looper里面了，我们不会直接与MQ打交道)</li>
</ul>
<h3 id="核心类详解"><a href="#核心类详解" class="headerlink" title="核心类详解"></a>核心类详解</h3><h4 id="线程控制者Looper"><a href="#线程控制者Looper" class="headerlink" title="线程控制者Looper"></a>线程控制者Looper</h4><blockquote>
<p>Looper的字面意思是“循环者”，它被设计用来使一个普通线程变成Looper线程。所谓Looper线程就是循环工作的线程。在程序开发中（尤其是GUI开发中），我们经常会需要一个线程不断循环，一旦有新任务则执行，执行完继续等待下一个任务，这就是Looper线程。使用Looper类创建Looper线程很简单：</p>
</blockquote>
<pre><code>public class LooperThread extends Thread {
    @Override
    public void run() {
        // 将当前线程初始化为Looper线程
        Looper.prepare();

        // ...其他处理，如实例化handler

        // 开始循环处理消息队列
        Looper.loop();
    }
}
</code></pre><blockquote>
<p>通过上面两行核心代码，你的线程就升级为Looper线程了！！！是不是很神奇？让我们放慢镜头，看看这两行代码各自做了什么。</p>
</blockquote>
<ul>
<li>Looper.prepare()</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/Looper.prepare().png" alt=""></p>
<blockquote>
<p>通过上图可以看到，现在你的线程中有一个Looper对象，它的内部维护了一个消息队列MQ。注意，一个Thread只能有一个Looper对象，为什么呢？咱们来看源码。</p>
</blockquote>
<pre><code>public class Looper {
    // 每个线程中的Looper对象其实是一个ThreadLocal，即线程本地存储(TLS)对象
    private static final ThreadLocal sThreadLocal = new ThreadLocal();
    // Looper内的消息队列
    final MessageQueue mQueue;
    // 当前线程
    Thread mThread;
    // 。。。其他属性

    // 每个Looper对象中有它的消息队列，和它所属的线程
    private Looper() {
        mQueue = new MessageQueue();
        mRun = true;
        mThread = Thread.currentThread();
    }

    // 我们调用该方法会在调用线程的TLS中创建Looper对象
    public static final void prepare() {
        if (sThreadLocal.get() != null) {
            // 试图在有Looper的线程中再次创建Looper将抛出异常
            throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);
        }
        sThreadLocal.set(new Looper());
    }
    // 其他方法
}
</code></pre><blockquote>
<p>通过源码，prepare()背后的工作方式一目了然，其核心就是将looper对象定义为ThreadLocal。</p>
</blockquote>
<ul>
<li>Looper.loop()<br><img src="http://o9zgq2ik9.bkt.clouddn.com/Looper.loop().png" alt=""></li>
</ul>
<blockquote>
<p>调用loop方法后，Looper线程就开始真正工作了，它不断从自己的MQ中取出队头的消息(也叫任务)执行。其源码分析如下：</p>
</blockquote>
<pre><code>public static final void loop() {
        Looper me = myLooper();  //得到当前线程Looper
        MessageQueue queue = me.mQueue;  //得到当前looper的MQ

        // 这两行没看懂= = 不过不影响理解
        Binder.clearCallingIdentity();
        final long ident = Binder.clearCallingIdentity();
        // 开始循环
        while (true) {
            Message msg = queue.next(); // 取出message
            if (msg != null) {
                if (msg.target == null) {
                    // message没有target为结束信号，退出循环
                    return;
                }
                // 日志。。。
                if (me.mLogging!= null) me.mLogging.println(
                        &quot;&gt;&gt;&gt;&gt;&gt; Dispatching to &quot; + msg.target + &quot; &quot;
                        + msg.callback + &quot;: &quot; + msg.what
                        );
                // 非常重要！将真正的处理工作交给message的target，即后面要讲的handler
                msg.target.dispatchMessage(msg);
                // 还是日志。。。
                if (me.mLogging!= null) me.mLogging.println(
                        &quot;&lt;&lt;&lt;&lt;&lt; Finished to    &quot; + msg.target + &quot; &quot;
                        + msg.callback);

                // 下面没看懂，同样不影响理解
                final long newIdent = Binder.clearCallingIdentity();
                if (ident != newIdent) {
                    Log.wtf(&quot;Looper&quot;, &quot;Thread identity changed from 0x&quot;
                            + Long.toHexString(ident) + &quot; to 0x&quot;
                            + Long.toHexString(newIdent) + &quot; while dispatching to &quot;
                            + msg.target.getClass().getName() + &quot; &quot;
                            + msg.callback + &quot; what=&quot; + msg.what);
                }
                // 回收message资源
                msg.recycle();
            }
        }
    }
</code></pre><blockquote>
<p>除了prepare()和loop()方法，Looper类还提供了一些有用的方法，比如Looper.myLooper()得到当前线程looper对象：</p>
</blockquote>
<pre><code>public static final Looper myLooper() {
    // 在任意线程调用Looper.myLooper()返回的都是那个线程的looper
    return (Looper)sThreadLocal.get();
}
</code></pre><blockquote>
<p>getThread()得到looper对象所属线程：</p>
</blockquote>
<pre><code>public Thread getThread() {
    return mThread;
}
</code></pre><blockquote>
<p>quit()方法结束looper循环：</p>
</blockquote>
<pre><code>public void quit() {
    // 创建一个空的message，它的target为NULL，表示结束循环消息
    Message msg = Message.obtain();
    // 发出消息
    mQueue.enqueueMessage(msg, 0);
}
</code></pre><blockquote>
<p>到此为止，你应该对Looper有了基本的了解，总结几点：</p>
</blockquote>
<ul>
<li>每个线程有且最多只能有一个Looper对象，它是一个ThreadLocal</li>
<li>Looper内部有一个消息队列，loop()方法调用后线程开始不断从队列中取出消息执行</li>
<li>Looper使一个线程变成Looper线程。</li>
</ul>
<blockquote>
<p>那么，我们如何往MQ上添加消息呢？下面有请Handler！</p>
</blockquote>
<h4 id="异步处理者Handler"><a href="#异步处理者Handler" class="headerlink" title="异步处理者Handler"></a>异步处理者Handler</h4><blockquote>
<p>什么是Handler？Handler扮演了往MQ上添加消息和处理消息的角色（只处理由自己发出的消息），即通知MQ它要执行一个任务(sendMessage)，并在loop到自己的时候执行该任务(handleMessage)，整个过程是异步的。Handler创建时会关联一个looper，默认的构造方法将关联当前线程的looper，不过这也是可以set的。默认的构造方法：</p>
</blockquote>
<pre><code>public class Handler {
    final MessageQueue mQueue;  // 关联的MQ
    final Looper mLooper;  // 关联的looper
    final Callback mCallback; 
    // 其他属性

    public Handler() {
        // 没看懂，直接略过，，，
        if (FIND_POTENTIAL_LEAKS) {
            final Class&lt;? extends Handler&gt; klass = getClass();
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;
                    (klass.getModifiers() &amp; Modifier.STATIC) == 0) {
                Log.w(TAG, &quot;The following Handler class should be static or leaks might occur: &quot; +
                    klass.getCanonicalName());
            }
        }
        // 默认将关联当前线程的looper
        mLooper = Looper.myLooper();
        // looper不能为空，即该默认的构造方法只能在looper线程中使用
        if (mLooper == null) {
            throw new RuntimeException(
                &quot;Can&apos;t create handler inside thread that has not called Looper.prepare()&quot;);
        }
        // 重要！！！直接把关联looper的MQ作为自己的MQ，因此它的消息将发送到关联looper的MQ上
        mQueue = mLooper.mQueue;
        mCallback = null;
    }

    // 其他方法
}
</code></pre><blockquote>
<p>下面我们就可以为之前的LooperThread类加入Handler：</p>
</blockquote>
<pre><code>public class LooperThread extends Thread {
    private Handler handler1;
    private Handler handler2;

    @Override
    public void run() {
        // 将当前线程初始化为Looper线程
        Looper.prepare();

        // 实例化两个handler
        handler1 = new Handler();
        handler2 = new Handler();

        // 开始循环处理消息队列
        Looper.loop();
    }
}
</code></pre><blockquote>
<p>加入handler后的效果如下图：</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/%E5%8A%A0%E5%85%A5handler%E5%90%8E%E7%9A%84%E6%95%88%E6%9E%9C.png" alt=""></p>
<blockquote>
<p>可以看到，一个线程可以有多个Handler，但是只能有一个Looper！</p>
</blockquote>
<h5 id="Handler发送消息"><a href="#Handler发送消息" class="headerlink" title="Handler发送消息"></a>Handler发送消息</h5><blockquote>
<p>有了handler之后，我们就可以使用 post(Runnable), postAtTime(Runnable, long), postDelayed(Runnable, long), sendEmptyMessage(int), sendMessage(Message), sendMessageAtTime(Message, long)和sendMessageDelayed(Message, long)这些方法向MQ上发送消息了。光看这些API你可能会觉得handler能发两种消息，一种是Runnable对象，一种是message对象，这是直观的理解，但其实post发出的Runnable对象最后都被封装成message对象了，见源码：</p>
</blockquote>
<pre><code>// 此方法用于向关联的MQ上发送Runnable对象，它的run方法将在handler关联的looper线程中执行
    public final boolean post(Runnable r)
    {
       // 注意getPostMessage(r)将runnable封装成message
       return  sendMessageDelayed(getPostMessage(r), 0);
    }

    private final Message getPostMessage(Runnable r) {
        Message m = Message.obtain();  //得到空的message
        m.callback = r;  //将runnable设为message的callback，
        return m;
    }

    public boolean sendMessageAtTime(Message msg, long uptimeMillis)
    {
        boolean sent = false;
        MessageQueue queue = mQueue;
        if (queue != null) {
            msg.target = this;  // message的target必须设为该handler！
            sent = queue.enqueueMessage(msg, uptimeMillis);
        }
        else {
            RuntimeException e = new RuntimeException(
                this + &quot; sendMessageAtTime() called with no mQueue&quot;);
            Log.w(&quot;Looper&quot;, e.getMessage(), e);
        }
        return sent;
    }
</code></pre><blockquote>
<p>其他方法就不罗列了，总之通过handler发出的message有如下特点：</p>
</blockquote>
<ul>
<li><p>message.target为该handler对象，这确保了looper执行到该message时能找到处理它的handler，即loop()方法中的关键代码<br>  msg.target.dispatchMessage(msg);</p>
</li>
<li><p>post发出的message，其callback为Runnable对象</p>
</li>
</ul>
<h5 id="Handler处理消息"><a href="#Handler处理消息" class="headerlink" title="Handler处理消息"></a>Handler处理消息</h5><blockquote>
<p>说完了消息的发送，再来看下handler如何处理消息。消息的处理是通过核心方法dispatchMessage(Message msg)与钩子方法handleMessage(Message msg)完成的，见源码</p>
</blockquote>
<pre><code>// 处理消息，该方法由looper调用
    public void dispatchMessage(Message msg) {
        if (msg.callback != null) {
            // 如果message设置了callback，即runnable消息，处理callback！
            handleCallback(msg);
        } else {
            // 如果handler本身设置了callback，则执行callback
            if (mCallback != null) {
                 /* 这种方法允许让activity等来实现Handler.Callback接口，避免了自己编写handler重写handleMessage方法。见http://alex-yang-xiansoftware-com.iteye.com/blog/850865 */
                if (mCallback.handleMessage(msg)) {
                    return;
                }
            }
            // 如果message没有callback，则调用handler的钩子方法handleMessage
            handleMessage(msg);
        }
    }

    // 处理runnable消息
    private final void handleCallback(Message message) {
        message.callback.run();  //直接调用run方法！
    }
    // 由子类实现的钩子方法
    public void handleMessage(Message msg) {
    }
</code></pre><blockquote>
<p>可以看到，除了handleMessage(Message msg)和Runnable对象的run方法由开发者实现外（实现具体逻辑），handler的内部工作机制对开发者是透明的。这正是handler API设计的精妙之处！</p>
</blockquote>
<h5 id="Handler的用处"><a href="#Handler的用处" class="headerlink" title="Handler的用处"></a>Handler的用处</h5><blockquote>
<p>我在小标题中将handler描述为“异步处理大师”，这归功于Handler拥有下面两个重要的特点：</p>
</blockquote>
<ul>
<li>handler可以在任意线程发送消息，这些消息会被添加到关联的MQ上。</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/%E4%BB%BB%E6%84%8F%E7%BA%BF%E7%A8%8B%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png" alt=""></p>
<ul>
<li>handler是在它关联的looper线程中处理消息的</li>
</ul>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/%E5%85%B3%E8%81%94%E7%9A%84looper%E7%BA%BF%E7%A8%8B%E4%B8%AD%E5%A4%84%E7%90%86%E6%B6%88%E6%81%AF.png" alt=""></p>
<blockquote>
<p>这就解决了android最经典的不能在其他非主线程中更新UI的问题。<em>android的主线程也是一个looper线程</em>(looper在android中运用很广)，我们在其中创建的handler默认将关联主线程MQ。因此，利用handler的一个solution就是在activity中创建handler并将其引用传递给worker thread，worker thread执行完任务后使用handler发送消息通知activity更新UI。(过程如图)</p>
</blockquote>
<p><img src="http://o9zgq2ik9.bkt.clouddn.com/%E6%9B%B4%E6%96%B0UI.png" alt=""></p>
<blockquote>
<p>下面给出sample代码，仅供参考：</p>
</blockquote>
<pre><code>public class TestDriverActivity extends Activity {
    private TextView textview;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
        textview = (TextView) findViewById(R.id.textview);
        // 创建并启动工作线程
        Thread workerThread = new Thread(new SampleTask(new MyHandler()));
        workerThread.start();
    }

    public void appendText(String msg) {
        textview.setText(textview.getText() + &quot;\n&quot; + msg);
    }

    class MyHandler extends Handler {
        @Override
        public void handleMessage(Message msg) {
            String result = msg.getData().getString(&quot;message&quot;);
            // 更新UI
            appendText(result);
        }
    }
}

public class SampleTask implements Runnable {
    private static final String TAG = SampleTask.class.getSimpleName();
    Handler handler;

    public SampleTask(Handler handler) {
        super();
        this.handler = handler;
    }
    @Override
    public void run() {
        try {  // 模拟执行某项任务，下载等
            Thread.sleep(5000);
            // 任务完成后通知activity更新UI
            Message msg = prepareMessage(&quot;task completed!&quot;);
            // message将被添加到主线程的MQ中
            handler.sendMessage(msg);
        } catch (InterruptedException e) {
            Log.d(TAG, &quot;interrupted!&quot;);
        }

    }

    private Message prepareMessage(String str) {
        Message result = handler.obtainMessage();
        Bundle data = new Bundle();
        data.putString(&quot;message&quot;, str);
        result.setData(data);
        return result;
    }
}
</code></pre><blockquote>
<p>当然，handler能做的远远不仅如此，由于它能post Runnable对象，它还能与Looper配合实现经典的Pipeline Thread(流水线线程)模式</p>
</blockquote>
<h4 id="封装任务Message"><a href="#封装任务Message" class="headerlink" title="封装任务Message"></a>封装任务Message</h4><blockquote>
<p>在整个消息处理机制中，message又叫task，封装了任务携带的信息和处理该任务的handler。message的用法比较简单，这里不做总结了。但是有这么几点需要注意（待补充）：</p>
<ul>
<li>尽管Message有public的默认构造方法，但是你应该通过Message.obtain()来从消息池中获得空消息对象，以节省资源。</li>
<li>如果你的message只需要携带简单的int信息，请优先使用Message.arg1和Message.arg2来传递信息，这比用Bundle更省内存</li>
<li>擅用message.what来标识信息，以便用不同方式处理message。</li>
</ul>
</blockquote>
<p><strong>参考资料</strong><br><a href="http://www.cnblogs.com/codingmyworld/archive/2011/09/12/2174255.html" target="_blank" rel="external">博文</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;四个核心类&quot;&gt;&lt;a href=&quot;#四个核心类&quot; class=&quot;headerlink&quot; title=&quot;四个核心类&quot;&gt;&lt;/a&gt;四个核心类&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Looper &lt;/li&gt;
&lt;li&gt;Handler &lt;/li&gt;
&lt;li&gt;Message &lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Handler" scheme="http://yoursite.com/tags/Handler/"/>
    
      <category term="消息处理机制" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android的线程和线程池</title>
    <link href="http://yoursite.com/2016/07/01/Android%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    <id>http://yoursite.com/2016/07/01/Android的线程和线程池/</id>
    <published>2016-07-01T02:36:34.000Z</published>
    <updated>2016-10-10T06:10:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote>
<p>线程：在操作系统（OS）中，线程是OS调度的最小单元，同时又是一种受限的系统资源，不可能无限制的产生，并且其创建和销毁都会有一定的开销。当OS中存在大量的线程时，OS会通过时间片轮询的方式调度每个线程，因此线程不可能做到绝对的并行，除非线程数目小于等于CPU的核心数，一般是不可能的。</p>
<p>线程池：在一个进程中频繁地创建和销毁线程不是一种高效的做法，正确地做法是使用线程池。线程池中会缓存一定数目的线程，然后通过线程池就可以避免因为频繁创建和销毁线程所带来的系统开销。Android中的线程池来源于Java，主要是通过Executor来派生特定类型的线程池，不同类型的线程池又具有不同的特性。</p>
<p>按用途来划分，线程有两种：</p>
</blockquote>
<ul>
<li>主线程：处理和界面有关的事情</li>
<li>子线程：执行耗时的一些操作</li>
</ul>
<blockquote>
<p>由于Android的特性，如果在主线程中执行耗时操作，系统会无法及时地响应，并抛出ANR（应用程序无响应），因此，耗时操作必须要放在子线程中执行。</p>
<p>除了传统的Java中的Thread类表示线程外，在Android中，系统提供了自己特有的可以扮演线程角色的类，如AsyncTask，IntentService，HandlerThread（一种特殊的线程）等，需要注意的是这些类本质上仍是创痛的线程，AsyncTask底层用到了Java中的线程池，而IntentService和HandlerThread的底层则直接使用了Thread线程类。</p>
</blockquote>
<ul>
<li>AsyncTask封装了线程池和Handler，主要是方便开发者在子线程中更新UI。</li>
<li>HandlerThread是一个具有消息循环的线程，在它的内部可以使用Handler。</li>
<li>IntentService是一个服务，系统对其进行了封装，使其可以方便地执行后台任务，IntentService内部采用HandlerThread来执行任务，任务执行完毕后，其会自动退出。从任务执行的角度来看，IntentService的作用很像一个后台线程，但是IntentService是一种服务，它是不容易被系统杀死的，从而尽量保证任务的执行，而如果是一个后台线程的话，由于这个时候进程中没有活动的四大组件，那么这个进程的优先级就会非常低，会很容易被系统杀死，这是IntentService的优点。</li>
</ul>
<h3 id="主线程和子线程"><a href="#主线程和子线程" class="headerlink" title="主线程和子线程"></a>主线程和子线程</h3><blockquote>
<p>Android沿用Java的线程模型。</p>
</blockquote>
<h4 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h4><blockquote>
<p>主线程(UI线程)是指进程所拥有的线程，在Java中默认情况下一个进程只有一个线程，这个线程就是主线层。主线程的主要任务是处理于界面的交互相关的逻辑，在Android中就是运行四大组件以及处理和它们的交互，因为用户随时会和界面发生交互，因此主线程在任何时候都必须具有较高的响应速度，否则就会造成界面卡顿，用户体验不好。</p>
</blockquote>
<h4 id="子线程"><a href="#子线程" class="headerlink" title="子线程"></a>子线程</h4><blockquote>
<p>为了保持较高的响应速度，在主线程中就不应该执行耗时任务，这个时候子线程的作用就体现出来了。子线程又被称为工作线程，除了主线程外，其他的都是子线程。子线程就是要执行耗时任务，如网络请求，I/O操作等。Android3.0以后的系统都要求网络访问必须在子线程中进行，否则就会访问失败并抛出NetworkOnMainThreadException异常，这么做主要是避免主线程被耗时任务阻塞，造成ANR。</p>
</blockquote>
<h3 id="Android中的线程形态"><a href="#Android中的线程形态" class="headerlink" title="Android中的线程形态"></a>Android中的线程形态</h3><blockquote>
<p>除去传统的Thread， Android中的线程形态有AsyncTask，IntentService，HandlerThread三种，它们的底层实现也是线程，只是它们具有特殊的表现形式，同时在使用上也各有优缺点。</p>
</blockquote>
<h4 id="AsyncTask及其原理"><a href="#AsyncTask及其原理" class="headerlink" title="AsyncTask及其原理"></a>AsyncTask及其原理</h4><blockquote>
<p>为了简化子线程中访问UI的过程，系统提供了AsyncTask。不同版本API的AsyncTask具有不同的表现，尤其是在多任务并发执行上。</p>
<p>AsyncTask是一种轻量级的异步任务类，可以在线程池中执行后台任务，然后把执行的进度和最终结果传递给主线程并在主线程中更新UI。从实现上说，AsyncTask封装了Thread和Handler，并通过AsyncTask可以更加方便的执行后台任务以及在主线程中访问UI，但是AsyncTask并不适合执行特别耗时的后台任务，对于特别耗时的任务，建议使用线程池。</p>
<p>AsyncTask是一个抽象范型类，使用时要通过子类继承，其提供了Params，Progress，Result三个范型参数，其中Params表示参数的类型，Progress表示后台任务执行进度的类型，Result表示后台任务的返回结果类型，如果AsyncTask确实不需要传递任何参数，这三个范型参数可以使用Void来代替。AysncTask的类声明如下：</p>
</blockquote>
<pre><code>public abstract class AsyncTask&lt;Params, Progress, Result&gt;
</code></pre><blockquote>
<p>AsyncTask提供了4个核心方法，具体解释如下：</p>
</blockquote>
<ol>
<li>onProExecute(), 在主线程中执行，在异步任务执行之前，此方法会被调用，一般用于一些准备工作。</li>
<li>doInBackground(Params … params), 在线程池中执行，用于执行异步任务，params参数表示异步任务的输入参数。在此方法中可以通过调用publishProgress()方法来更新任务的进度， publishProgress()方法会触发onProgressUpdate()方法的调用。另外此方法需要返回计算结果给onPostExecute()方法。</li>
<li>onProgressUpdate(Progress … values), 在主线程中执行，当后台任务的执行进度发生改变时，此方法通过publishProgress()方法被调用。</li>
<li>onPostExecute(Result result), 在主线程中执行，当后台异步任务执行完毕之后，此方法会被调用，其中，result参数时后台异步任务的返回值，即doInBackground方法的返回值。</li>
</ol>
<blockquote>
<p>4个方法的执行顺序是：onPreExecute, doInBackground, onPostExecute. onProgressUpdate方法看情况执行，如果publishProgress方法在doInBackground方法中被调用，其执行顺序就在onPostExecute之前，否则，其不执行。除了上述4个方法外，AsyncTask也提供onCancelled()方法，当异步任务被取消时，onCancelled()方法会在主线程中被调用执行，这个时候onPostExecute方法就不会再被调用。</p>
</blockquote>
<p><strong>典型案例</strong></p>
<pre><code>private class DownLoadAsyncTask extends AsyncTask&lt;URL, Integer, Long&gt; {
    protected Long doInBackground(URL ... urls) {
        int count = urls.length;
        long totalsize = 0;
        for(int i = 0; i &lt; count; i++) {
            totalsize += Downloader.down(urls[i]);
            publishProgress((int) ((i / (float) count * 100));
            // Escape early if cancel() is called
            if(isCancelled()) {
                break;
            }
        }
        return totalsize;
    }
    protected void onProgressUpdate(Integer ... progress) {
        setProgressPercent(progress[0]);
    }
    protected void onPostExecute(Long result) {
        showDialog(&quot;Downloaded&quot; + result + &quot;bytes&quot;);
    }
}
</code></pre><blockquote>
<p>上面实现了一个具体的AsyncTask类，主要功能时模拟文件下载的过程，输入参数类型为URL，后台任务进程参数为Integer，后台任务的返回结果为Long类型。注意一点：括号中的 … 表示参数个数不定，它代表一种数组型的参数，在这点上Java和C是一致的。</p>
<p>具体的AsyncTask类定义完成后，当要执行下载任务时，通过下面方式完成：</p>
</blockquote>
<pre><code>AsyncTask task = new DownloadAsyncTask();
task.execute(url1,url2,url3);
</code></pre><p><strong>AsyncTask在具体的使用过程中的一些条件限制：</strong></p>
<ol>
<li>AsyncTask的类必须在主线程中加载，这意味着第一次访问AsyncTask必须发生在主线程，当然这个过程在Android4.1及以上的版本中已经被系统自动完成。在5.0的源码中，可以看到在ActivityThread的main方法中会调用AsyncTask的init方法，这就满足了这个限制条件。至于为什么必须满足这个条件，在下面小节的原理分析中会给予解答。<ol>
<li>AsyncTask实现类的对象必须在主线程中创建。</li>
<li>AsyncTask实现类的execute()方法也必须在主线程中被调用。</li>
<li>不要在程序中手动直接调用onPreExecute(), doInBackground(), onPostExecute(), onProgressUpdate()这四个方法。</li>
<li>一个AsyncTask实现类对象只能执行一次，即只能调用一次execute()方法，否则会报异常。</li>
<li>Android1.6之前，AsyncTask是串行执行任务的，1.6的时候开始采用线程池处理并行任务，但是从3.0开始，为了避免AsyncTask所带来的并发错误，其又再一次采用一个线程来串行执行任务。尽管如此，3.0以后的版本中，我们仍然可以通过AsyncTask的executeOnExecuter方法来并行执行任务。</li>
</ol>
</li>
</ol>
<h4 id="AsyncTask的工作原理"><a href="#AsyncTask的工作原理" class="headerlink" title="AsyncTask的工作原理"></a>AsyncTask的工作原理</h4><blockquote>
<p>待完成</p>
</blockquote>
<h4 id="HandlerThread"><a href="#HandlerThread" class="headerlink" title="HandlerThread"></a>HandlerThread</h4><blockquote>
<p>HandlerThread继承了Thread，是一种可以使用Handler的Thread，它的实现也很简单，就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread中创建Handler了。</p>
<p>HandlerThread的run方法如下所示：</p>
</blockquote>
<pre><code>public void run() {
    mTid = Process.myTid();
    Looper.prepare();
    synchrinized(this) {
        mLooper = Looper.myLooper();
        notifyAll();
    }
    Process.setThreadPriority(mPriority);
    onLooperPrepared();
    Looper.loop();
    mTid = -1;
}
</code></pre><blockquote>
<p>从HandlerThread的实现来看，它和普通的Thread有显著的不同，普通的Thread主要用于在run方法中执行一个耗时任务，而HandlerThread在内部创建了消息队列，外界需要通过Handler的消息方式来通知HandlerThread执行一个具体的任务。HandlerThread类是一个很有用的类，它在Android中的一个具体应用场景就是IntentService，将在下节介绍。由于HandlerThread的run方法是一个无限循环，因此当明确不需要再使用的时候，可以通过它的quit或者quitSafely方法来终止线程的执行，好的编程习惯。</p>
</blockquote>
<h4 id="IntentService"><a href="#IntentService" class="headerlink" title="IntentService"></a>IntentService</h4><blockquote>
<p>Todo</p>
</blockquote>
<h3 id="Android中的线程池"><a href="#Android中的线程池" class="headerlink" title="Android中的线程池"></a>Android中的线程池</h3><p><strong>线程池的优点</strong></p>
<ol>
<li>重用线程池中的线程，避免因为创建线程和销毁线程带来不必要的内存开销。</li>
<li>能有效控制线程池中的最大并发数，避免大量的线程之间因互相抢占资源而导致的阻塞现象。</li>
<li>能够对线程池进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。</li>
</ol>
<blockquote>
<p>Android中线程池的概念来自Java中的Executer，Executer是一个接口，真正的线程池实现为ThreadPoolExecuter，其提供了一系列的参数来配置线程池，通过不同的参数可以查创建不同的线程池。从线程池的功能特性上来说，Android的线程池有4类，并且可以通过Executers所提供的工厂方法来得到。</p>
</blockquote>
<h4 id="ThreadPoolExecuter"><a href="#ThreadPoolExecuter" class="headerlink" title="ThreadPoolExecuter"></a>ThreadPoolExecuter</h4><blockquote>
<p>ThreadPoolExecuter是线程池的真正实现，它的构造方法提供了一系列参数来配置线程池。下面是其一个比较常用的构造方法，构造方法中的参数会直接影响线程池的功能特性。</p>
</blockquote>
<pre><code>public ThreadPoolExecutor(
        int corePoolSize, 
        int maximumPoolSize, 
        long keepAliveTime, 
        TimeUnit unit, 
        BlockingQueue&lt;Runnable&gt; workQueue, 
        ThreadFactory threadFactory
)
</code></pre><blockquote>
<p>下面会介绍各个参数的具体用法</p>
</blockquote>
<ul>
<li>corePoolSize</li>
</ul>
<blockquote>
<p>线程池的核心线程数目，默认情况下，核心线程会在线程池中一直存活，即使它们处于闲置状态。如果将ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true，那么闲置的核心线程在等待新任务到来时会有超时策略，这个时间间隔由keepAliveTime所指定，当等待时间超过keepAliveTime所指定的时长后，核心线程就会被终止。</p>
</blockquote>
<ul>
<li>maximumPoolSize</li>
</ul>
<blockquote>
<p>线程池所能容纳的最大线程数，当活动线程数达到这个数值后，后续的新任务将会被阻塞。</p>
</blockquote>
<ul>
<li>keepAliveTime</li>
</ul>
<blockquote>
<p>非核心线程闲置时的超时时长，超过这个时长，非核心线程就会被回收。当ThreadPoolExecutor的allowCoreThreadTimeOut这个属性设置为true时，keepAliveTime同样会作用于核心线程。</p>
</blockquote>
<ul>
<li>unit</li>
</ul>
<blockquote>
<p>用于指定keepAliveTime参数的时间单位，这是一个枚举，常用的TimeUnit.MILLISECONDS(毫秒), TimeUnit.SECONDS(秒), TimeUnit.MINUTES(分钟)等。</p>
</blockquote>
<ul>
<li>workQueue</li>
</ul>
<blockquote>
<p>线程池中的任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中。</p>
</blockquote>
<ul>
<li>threadFactory</li>
</ul>
<blockquote>
<p>线程工厂，为线程池提供创建新线程的功能。ThreadFactory是一个接口，它只有一个方法，Thread  newThread(Runnable r).</p>
<p>除了上面的这些主要参数外，还有一个不常用的参数RejectedExecutionHandler handler。当线程池无法执行新任务时，这可能是由于任务队列已满或者是无法成功执行任务，这个时候ThreadPoolExecutor会调用handler的rejectedExecution方法来通知调用者，默认情况下rejectedExecution方法会直接抛出一个RejectedExecutionException。ThreadPoolExecutor为RejectedExecutionHandler提供了几个可选值：CallerRunsPolicy，AbortPolicy，DiscardPolicy和DiscardOldestPolicy，其中AbortPolicy是默认值，它会直接抛出RejectedExecutionException。</p>
<p>ThreadPoolExecutor执行任务时大致遵循如下规则：</p>
</blockquote>
<ol>
<li>如果线程池中的线程数量未达到核心线程的数量，那么会直接启动一个核心线程来执行任务。</li>
<li>如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行。</li>
<li>如果在步骤2中无法将任务插入到任务队列中，这往往是由于任务队列已满，这个时候如果线程数量未达到线程池规定的最大值，那么会立刻启动一个非核心线程来执行任务。</li>
<li>如果步骤3中线程数量已经达到线程池规定的最大值，那么就拒绝执行任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。</li>
</ol>
<blockquote>
<p>ThreadPoolExecutor的参数配置在AsyncTask中有明显的体现，如下：</p>
</blockquote>
<pre><code>private static final int CPU_COUNT = Runtime.getRuntime().availableProcessors();
private static final int CORE_POOL_SIZE = CPU_COUNT + 1;
private static final int MAXIMUM_POOL_SIZE = CPU_COUNT * 2 + 1;
private static final int KEEP_ALIVE = 1;

private static final ThreadFactory sThreadFactory = new ThreadFactory() {
    private final AtomicInteger mCount = new AtomicInteger(1);
    public Thread newThread(Runnable r) {
        return new Thread(r, &quot;AsyncTask #&quot; + mCount.getAndIncrement());
    }
}

private static final BlockingQueue&lt;Runnable&gt; sPoolWorkQueue = new LinkedBlockingQueue&lt;Runnable&gt;(128);

/**
 * An Executor that can be used to execute tasks in parallel
 **/
public static final Executor THREAD_POOL_EXECUTOR = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE,TimeUnit.SECONDS, sPoolWorkQueue, sThreadFactory);
</code></pre><blockquote>
<p>从上面的代码可以知道，AsyncTask对THREAD_POOL_EXECUTOR这个线程池进行了配置，配置后的线程池规格如下：</p>
</blockquote>
<ul>
<li>核心线程池等于CPU核心数+1</li>
<li>线程池的最大线程数为CPU核心数的2倍+1</li>
<li>核心线程无超时机制，非核心线程在闲置时的超时时间为1秒</li>
<li>任务队列的容量为128</li>
</ul>
<h4 id="线程池的分类"><a href="#线程池的分类" class="headerlink" title="线程池的分类"></a>线程池的分类</h4><blockquote>
<p>Android中常见的四类不同功能特性的线程池，都是通过直接或间接的配置ThreadPoolExecutor的参数来实现具有不同功能特性的线程池。</p>
</blockquote>
<h5 id="FixedThreadPool"><a href="#FixedThreadPool" class="headerlink" title="FixedThreadPool"></a>FixedThreadPool</h5><pre><code>public static ExecutorService newFixedThreadPool(int nThreads) {
        return new ThreadPoolExecutor(nThreads, nThreads, 0L,TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;());
}
</code></pre><blockquote>
</blockquote>
<h5 id="CachedThreadPool"><a href="#CachedThreadPool" class="headerlink" title="CachedThreadPool"></a>CachedThreadPool</h5><pre><code>public static ExecutorService newCachedThreadPool() {
        return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L,TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;());
}
</code></pre><h5 id="ScheduledThreadPool"><a href="#ScheduledThreadPool" class="headerlink" title="ScheduledThreadPool"></a>ScheduledThreadPool</h5><pre><code>public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize) {
        return new ScheduledThreadPoolExecutor(corePoolSize);
}

public static ScheduledThreadPoolExecutor (int corePoolSize) {
        super(corePoolSize, Integer.MAX_VALUE, 0 ,NANOSECONDS, new DelayedWorkQueue());
}
</code></pre><h5 id="SingleThreadPool"><a href="#SingleThreadPool" class="headerlink" title="SingleThreadPool"></a>SingleThreadPool</h5><pre><code>public static ExecutorService newSingleThreadPool() {
        return new FinalizableDelegatedExecutorService(new ThreadPoolExecutor(1, 1, 0L,TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()));
}
</code></pre><p><strong>系统预置的四种线程池的典型使用方法</strong></p>
<pre><code>Runnable command = new Runnable() {
        @Override
        public void run() {
            SystemClock.sleep(2000);
        }
}

ExecutorService fixedThreadPool = Executors.newFixedThreadPool(4);
fixedThreadPool.execute(command);

ExecutorService cachedThreadPool = Executors.newCachedThreadPool();
cachedThreadPool.execute(command);

ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(4);
// 2000ms后执行command
scheduledThreadPool.schedule(command, 2000, TimeUnit.MILLISECONDS);
// 延迟10ms后，每隔1000ms执行一次command
scheduledThreadPool.scheduleAtFixedRate(command, 10, 1000, TimeUnit.MILLISECONDS);

ExecutorService singleThreadPool = Executors.newSingleThreadPool();
singleThreadPool.execute(command);
</code></pre><p><strong>参考资料</strong></p>
<p>《Android开发艺术探索》 —  任玉刚</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;线程：在操作系统（OS）中，线程是OS调度的最小单元，同时又是一种受限的系统资源，不可能无限制的产生，并且其创建和
    
    </summary>
    
      <category term="学习记录" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="线程" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="线程池" scheme="http://yoursite.com/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
</feed>
